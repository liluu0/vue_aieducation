{"ast":null,"code":"var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\nvar Encoder = require('./Encoder.js');\nfunction FFT() {\n  var window = new_float(Encoder.BLKSIZE);\n  var window_s = new_float(Encoder.BLKSIZE_s / 2);\n  var costab = [9.238795325112867e-01, 3.826834323650898e-01, 9.951847266721969e-01, 9.801714032956060e-02, 9.996988186962042e-01, 2.454122852291229e-02, 9.999811752826011e-01, 6.135884649154475e-03];\n  function fht(fz, fzPos, n) {\n    var tri = 0;\n    var k4;\n    var fi;\n    var gi;\n    n <<= 1;\n    /* to get BLKSIZE, because of 3DNow! ASM routine */\n    var fn = fzPos + n;\n    k4 = 4;\n    do {\n      var s1, c1;\n      var i, k1, k2, k3, kx;\n      kx = k4 >> 1;\n      k1 = k4;\n      k2 = k4 << 1;\n      k3 = k2 + k1;\n      k4 = k2 << 1;\n      fi = fzPos;\n      gi = fi + kx;\n      do {\n        var f0, f1, f2, f3;\n        f1 = fz[fi + 0] - fz[fi + k1];\n        f0 = fz[fi + 0] + fz[fi + k1];\n        f3 = fz[fi + k2] - fz[fi + k3];\n        f2 = fz[fi + k2] + fz[fi + k3];\n        fz[fi + k2] = f0 - f2;\n        fz[fi + 0] = f0 + f2;\n        fz[fi + k3] = f1 - f3;\n        fz[fi + k1] = f1 + f3;\n        f1 = fz[gi + 0] - fz[gi + k1];\n        f0 = fz[gi + 0] + fz[gi + k1];\n        f3 = Util.SQRT2 * fz[gi + k3];\n        f2 = Util.SQRT2 * fz[gi + k2];\n        fz[gi + k2] = f0 - f2;\n        fz[gi + 0] = f0 + f2;\n        fz[gi + k3] = f1 - f3;\n        fz[gi + k1] = f1 + f3;\n        gi += k4;\n        fi += k4;\n      } while (fi < fn);\n      c1 = costab[tri + 0];\n      s1 = costab[tri + 1];\n      for (i = 1; i < kx; i++) {\n        var c2, s2;\n        c2 = 1 - 2 * s1 * s1;\n        s2 = 2 * s1 * c1;\n        fi = fzPos + i;\n        gi = fzPos + k1 - i;\n        do {\n          var a, b, g0, f0, f1, g1, f2, g2, f3, g3;\n          b = s2 * fz[fi + k1] - c2 * fz[gi + k1];\n          a = c2 * fz[fi + k1] + s2 * fz[gi + k1];\n          f1 = fz[fi + 0] - a;\n          f0 = fz[fi + 0] + a;\n          g1 = fz[gi + 0] - b;\n          g0 = fz[gi + 0] + b;\n          b = s2 * fz[fi + k3] - c2 * fz[gi + k3];\n          a = c2 * fz[fi + k3] + s2 * fz[gi + k3];\n          f3 = fz[fi + k2] - a;\n          f2 = fz[fi + k2] + a;\n          g3 = fz[gi + k2] - b;\n          g2 = fz[gi + k2] + b;\n          b = s1 * f2 - c1 * g3;\n          a = c1 * f2 + s1 * g3;\n          fz[fi + k2] = f0 - a;\n          fz[fi + 0] = f0 + a;\n          fz[gi + k3] = g1 - b;\n          fz[gi + k1] = g1 + b;\n          b = c1 * g2 - s1 * f3;\n          a = s1 * g2 + c1 * f3;\n          fz[gi + k2] = g0 - a;\n          fz[gi + 0] = g0 + a;\n          fz[fi + k3] = f1 - b;\n          fz[fi + k1] = f1 + b;\n          gi += k4;\n          fi += k4;\n        } while (fi < fn);\n        c2 = c1;\n        c1 = c2 * costab[tri + 0] - s1 * costab[tri + 1];\n        s1 = c2 * costab[tri + 1] + s1 * costab[tri + 0];\n      }\n      tri += 2;\n    } while (k4 < n);\n  }\n  var rv_tbl = [0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0, 0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8, 0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4, 0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc, 0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2, 0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa, 0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6, 0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe];\n  this.fft_short = function (gfc, x_real, chn, buffer, bufPos) {\n    for (var b = 0; b < 3; b++) {\n      var x = Encoder.BLKSIZE_s / 2;\n      var k = 0xffff & 576 / 3 * (b + 1);\n      var j = Encoder.BLKSIZE_s / 8 - 1;\n      do {\n        var f0, f1, f2, f3, w;\n        var i = rv_tbl[j << 2] & 0xff;\n        f0 = window_s[i] * buffer[chn][bufPos + i + k];\n        w = window_s[0x7f - i] * buffer[chn][bufPos + i + k + 0x80];\n        f1 = f0 - w;\n        f0 = f0 + w;\n        f2 = window_s[i + 0x40] * buffer[chn][bufPos + i + k + 0x40];\n        w = window_s[0x3f - i] * buffer[chn][bufPos + i + k + 0xc0];\n        f3 = f2 - w;\n        f2 = f2 + w;\n        x -= 4;\n        x_real[b][x + 0] = f0 + f2;\n        x_real[b][x + 2] = f0 - f2;\n        x_real[b][x + 1] = f1 + f3;\n        x_real[b][x + 3] = f1 - f3;\n        f0 = window_s[i + 0x01] * buffer[chn][bufPos + i + k + 0x01];\n        w = window_s[0x7e - i] * buffer[chn][bufPos + i + k + 0x81];\n        f1 = f0 - w;\n        f0 = f0 + w;\n        f2 = window_s[i + 0x41] * buffer[chn][bufPos + i + k + 0x41];\n        w = window_s[0x3e - i] * buffer[chn][bufPos + i + k + 0xc1];\n        f3 = f2 - w;\n        f2 = f2 + w;\n        x_real[b][x + Encoder.BLKSIZE_s / 2 + 0] = f0 + f2;\n        x_real[b][x + Encoder.BLKSIZE_s / 2 + 2] = f0 - f2;\n        x_real[b][x + Encoder.BLKSIZE_s / 2 + 1] = f1 + f3;\n        x_real[b][x + Encoder.BLKSIZE_s / 2 + 3] = f1 - f3;\n      } while (--j >= 0);\n      fht(x_real[b], x, Encoder.BLKSIZE_s / 2);\n      /* BLKSIZE_s/2 because of 3DNow! ASM routine */\n      /* BLKSIZE/2 because of 3DNow! ASM routine */\n    }\n  };\n  this.fft_long = function (gfc, y, chn, buffer, bufPos) {\n    var jj = Encoder.BLKSIZE / 8 - 1;\n    var x = Encoder.BLKSIZE / 2;\n    do {\n      var f0, f1, f2, f3, w;\n      var i = rv_tbl[jj] & 0xff;\n      f0 = window[i] * buffer[chn][bufPos + i];\n      w = window[i + 0x200] * buffer[chn][bufPos + i + 0x200];\n      f1 = f0 - w;\n      f0 = f0 + w;\n      f2 = window[i + 0x100] * buffer[chn][bufPos + i + 0x100];\n      w = window[i + 0x300] * buffer[chn][bufPos + i + 0x300];\n      f3 = f2 - w;\n      f2 = f2 + w;\n      x -= 4;\n      y[x + 0] = f0 + f2;\n      y[x + 2] = f0 - f2;\n      y[x + 1] = f1 + f3;\n      y[x + 3] = f1 - f3;\n      f0 = window[i + 0x001] * buffer[chn][bufPos + i + 0x001];\n      w = window[i + 0x201] * buffer[chn][bufPos + i + 0x201];\n      f1 = f0 - w;\n      f0 = f0 + w;\n      f2 = window[i + 0x101] * buffer[chn][bufPos + i + 0x101];\n      w = window[i + 0x301] * buffer[chn][bufPos + i + 0x301];\n      f3 = f2 - w;\n      f2 = f2 + w;\n      y[x + Encoder.BLKSIZE / 2 + 0] = f0 + f2;\n      y[x + Encoder.BLKSIZE / 2 + 2] = f0 - f2;\n      y[x + Encoder.BLKSIZE / 2 + 1] = f1 + f3;\n      y[x + Encoder.BLKSIZE / 2 + 3] = f1 - f3;\n    } while (--jj >= 0);\n    fht(y, x, Encoder.BLKSIZE / 2);\n    /* BLKSIZE/2 because of 3DNow! ASM routine */\n  };\n  this.init_fft = function (gfc) {\n    /* The type of window used here will make no real difference, but */\n    /*\n     * in the interest of merging nspsytune stuff - switch to blackman\n     * window\n     */\n    for (var i = 0; i < Encoder.BLKSIZE; i++) /* blackman window */\n    window[i] = 0.42 - 0.5 * Math.cos(2 * Math.PI * (i + .5) / Encoder.BLKSIZE) + 0.08 * Math.cos(4 * Math.PI * (i + .5) / Encoder.BLKSIZE);\n    for (var i = 0; i < Encoder.BLKSIZE_s / 2; i++) window_s[i] = 0.5 * (1.0 - Math.cos(2.0 * Math.PI * (i + 0.5) / Encoder.BLKSIZE_s));\n  };\n}\nmodule.exports = FFT;","map":{"version":3,"names":["common","require","System","VbrMode","Float","ShortBlock","Util","Arrays","new_array_n","new_byte","new_double","new_float","new_float_n","new_int","new_int_n","assert","Encoder","FFT","window","BLKSIZE","window_s","BLKSIZE_s","costab","fht","fz","fzPos","n","tri","k4","fi","gi","fn","s1","c1","i","k1","k2","k3","kx","f0","f1","f2","f3","SQRT2","c2","s2","a","b","g0","g1","g2","g3","rv_tbl","fft_short","gfc","x_real","chn","buffer","bufPos","x","k","j","w","fft_long","y","jj","init_fft","Math","cos","PI","module","exports"],"sources":["D:/代码/vscodeProjects/AiEducation/vue_aieducation/node_modules/lamejs/src/js/FFT.js"],"sourcesContent":["var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\nfunction FFT() {\n\n    var window = new_float(Encoder.BLKSIZE);\n    var window_s = new_float(Encoder.BLKSIZE_s / 2);\n\n    var costab = [\n        9.238795325112867e-01, 3.826834323650898e-01,\n        9.951847266721969e-01, 9.801714032956060e-02,\n        9.996988186962042e-01, 2.454122852291229e-02,\n        9.999811752826011e-01, 6.135884649154475e-03\n    ];\n\n    function fht(fz, fzPos, n) {\n        var tri = 0;\n        var k4;\n        var fi;\n        var gi;\n\n        n <<= 1;\n        /* to get BLKSIZE, because of 3DNow! ASM routine */\n        var fn = fzPos + n;\n        k4 = 4;\n        do {\n            var s1, c1;\n            var i, k1, k2, k3, kx;\n            kx = k4 >> 1;\n            k1 = k4;\n            k2 = k4 << 1;\n            k3 = k2 + k1;\n            k4 = k2 << 1;\n            fi = fzPos;\n            gi = fi + kx;\n            do {\n                var f0, f1, f2, f3;\n                f1 = fz[fi + 0] - fz[fi + k1];\n                f0 = fz[fi + 0] + fz[fi + k1];\n                f3 = fz[fi + k2] - fz[fi + k3];\n                f2 = fz[fi + k2] + fz[fi + k3];\n                fz[fi + k2] = f0 - f2;\n                fz[fi + 0] = f0 + f2;\n                fz[fi + k3] = f1 - f3;\n                fz[fi + k1] = f1 + f3;\n                f1 = fz[gi + 0] - fz[gi + k1];\n                f0 = fz[gi + 0] + fz[gi + k1];\n                f3 = (Util.SQRT2 * fz[gi + k3]);\n                f2 = (Util.SQRT2 * fz[gi + k2]);\n                fz[gi + k2] = f0 - f2;\n                fz[gi + 0] = f0 + f2;\n                fz[gi + k3] = f1 - f3;\n                fz[gi + k1] = f1 + f3;\n                gi += k4;\n                fi += k4;\n            } while (fi < fn);\n            c1 = costab[tri + 0];\n            s1 = costab[tri + 1];\n            for (i = 1; i < kx; i++) {\n                var c2, s2;\n                c2 = 1 - (2 * s1) * s1;\n                s2 = (2 * s1) * c1;\n                fi = fzPos + i;\n                gi = fzPos + k1 - i;\n                do {\n                    var a, b, g0, f0, f1, g1, f2, g2, f3, g3;\n                    b = s2 * fz[fi + k1] - c2 * fz[gi + k1];\n                    a = c2 * fz[fi + k1] + s2 * fz[gi + k1];\n                    f1 = fz[fi + 0] - a;\n                    f0 = fz[fi + 0] + a;\n                    g1 = fz[gi + 0] - b;\n                    g0 = fz[gi + 0] + b;\n                    b = s2 * fz[fi + k3] - c2 * fz[gi + k3];\n                    a = c2 * fz[fi + k3] + s2 * fz[gi + k3];\n                    f3 = fz[fi + k2] - a;\n                    f2 = fz[fi + k2] + a;\n                    g3 = fz[gi + k2] - b;\n                    g2 = fz[gi + k2] + b;\n                    b = s1 * f2 - c1 * g3;\n                    a = c1 * f2 + s1 * g3;\n                    fz[fi + k2] = f0 - a;\n                    fz[fi + 0] = f0 + a;\n                    fz[gi + k3] = g1 - b;\n                    fz[gi + k1] = g1 + b;\n                    b = c1 * g2 - s1 * f3;\n                    a = s1 * g2 + c1 * f3;\n                    fz[gi + k2] = g0 - a;\n                    fz[gi + 0] = g0 + a;\n                    fz[fi + k3] = f1 - b;\n                    fz[fi + k1] = f1 + b;\n                    gi += k4;\n                    fi += k4;\n                } while (fi < fn);\n                c2 = c1;\n                c1 = c2 * costab[tri + 0] - s1 * costab[tri + 1];\n                s1 = c2 * costab[tri + 1] + s1 * costab[tri + 0];\n            }\n            tri += 2;\n        } while (k4 < n);\n    }\n\n    var rv_tbl = [0x00, 0x80, 0x40,\n        0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10,\n        0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70,\n        0xf0, 0x08, 0x88, 0x48, 0xc8, 0x28,\n        0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58,\n        0xd8, 0x38, 0xb8, 0x78, 0xf8, 0x04,\n        0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64,\n        0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34,\n        0xb4, 0x74, 0xf4, 0x0c, 0x8c, 0x4c,\n        0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c,\n        0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c,\n        0xfc, 0x02, 0x82, 0x42, 0xc2, 0x22,\n        0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52,\n        0xd2, 0x32, 0xb2, 0x72, 0xf2, 0x0a,\n        0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a,\n        0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a,\n        0xba, 0x7a, 0xfa, 0x06, 0x86, 0x46,\n        0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16,\n        0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76,\n        0xf6, 0x0e, 0x8e, 0x4e, 0xce, 0x2e,\n        0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e,\n        0xde, 0x3e, 0xbe, 0x7e, 0xfe];\n\n    this.fft_short = function (gfc, x_real, chn, buffer, bufPos) {\n        for (var b = 0; b < 3; b++) {\n            var x = Encoder.BLKSIZE_s / 2;\n            var k = 0xffff & ((576 / 3) * (b + 1));\n            var j = Encoder.BLKSIZE_s / 8 - 1;\n            do {\n                var f0, f1, f2, f3, w;\n                var i = rv_tbl[j << 2] & 0xff;\n\n                f0 = window_s[i] * buffer[chn][bufPos + i + k];\n                w = window_s[0x7f - i] * buffer[chn][bufPos + i + k + 0x80];\n                f1 = f0 - w;\n                f0 = f0 + w;\n                f2 = window_s[i + 0x40] * buffer[chn][bufPos + i + k + 0x40];\n                w = window_s[0x3f - i] * buffer[chn][bufPos + i + k + 0xc0];\n                f3 = f2 - w;\n                f2 = f2 + w;\n\n                x -= 4;\n                x_real[b][x + 0] = f0 + f2;\n                x_real[b][x + 2] = f0 - f2;\n                x_real[b][x + 1] = f1 + f3;\n                x_real[b][x + 3] = f1 - f3;\n\n                f0 = window_s[i + 0x01] * buffer[chn][bufPos + i + k + 0x01];\n                w = window_s[0x7e - i] * buffer[chn][bufPos + i + k + 0x81];\n                f1 = f0 - w;\n                f0 = f0 + w;\n                f2 = window_s[i + 0x41] * buffer[chn][bufPos + i + k + 0x41];\n                w = window_s[0x3e - i] * buffer[chn][bufPos + i + k + 0xc1];\n                f3 = f2 - w;\n                f2 = f2 + w;\n\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 0] = f0 + f2;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 2] = f0 - f2;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 1] = f1 + f3;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 3] = f1 - f3;\n            } while (--j >= 0);\n\n            fht(x_real[b], x, Encoder.BLKSIZE_s / 2);\n            /* BLKSIZE_s/2 because of 3DNow! ASM routine */\n            /* BLKSIZE/2 because of 3DNow! ASM routine */\n        }\n    }\n\n    this.fft_long = function (gfc, y, chn, buffer, bufPos) {\n        var jj = Encoder.BLKSIZE / 8 - 1;\n        var x = Encoder.BLKSIZE / 2;\n\n        do {\n            var f0, f1, f2, f3, w;\n            var i = rv_tbl[jj] & 0xff;\n            f0 = window[i] * buffer[chn][bufPos + i];\n            w = window[i + 0x200] * buffer[chn][bufPos + i + 0x200];\n            f1 = f0 - w;\n            f0 = f0 + w;\n            f2 = window[i + 0x100] * buffer[chn][bufPos + i + 0x100];\n            w = window[i + 0x300] * buffer[chn][bufPos + i + 0x300];\n            f3 = f2 - w;\n            f2 = f2 + w;\n\n            x -= 4;\n            y[x + 0] = f0 + f2;\n            y[x + 2] = f0 - f2;\n            y[x + 1] = f1 + f3;\n            y[x + 3] = f1 - f3;\n\n            f0 = window[i + 0x001] * buffer[chn][bufPos + i + 0x001];\n            w = window[i + 0x201] * buffer[chn][bufPos + i + 0x201];\n            f1 = f0 - w;\n            f0 = f0 + w;\n            f2 = window[i + 0x101] * buffer[chn][bufPos + i + 0x101];\n            w = window[i + 0x301] * buffer[chn][bufPos + i + 0x301];\n            f3 = f2 - w;\n            f2 = f2 + w;\n\n            y[x + Encoder.BLKSIZE / 2 + 0] = f0 + f2;\n            y[x + Encoder.BLKSIZE / 2 + 2] = f0 - f2;\n            y[x + Encoder.BLKSIZE / 2 + 1] = f1 + f3;\n            y[x + Encoder.BLKSIZE / 2 + 3] = f1 - f3;\n        } while (--jj >= 0);\n\n        fht(y, x, Encoder.BLKSIZE / 2);\n        /* BLKSIZE/2 because of 3DNow! ASM routine */\n    }\n\n    this.init_fft = function (gfc) {\n        /* The type of window used here will make no real difference, but */\n        /*\n         * in the interest of merging nspsytune stuff - switch to blackman\n         * window\n         */\n        for (var i = 0; i < Encoder.BLKSIZE; i++)\n            /* blackman window */\n            window[i] = (0.42 - 0.5 * Math.cos(2 * Math.PI * (i + .5)\n                / Encoder.BLKSIZE) + 0.08 * Math.cos(4 * Math.PI * (i + .5)\n                / Encoder.BLKSIZE));\n\n        for (var i = 0; i < Encoder.BLKSIZE_s / 2; i++)\n            window_s[i] = (0.5 * (1.0 - Math.cos(2.0 * Math.PI\n                * (i + 0.5) / Encoder.BLKSIZE_s)));\n\n    }\n\n}\n\nmodule.exports = FFT;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
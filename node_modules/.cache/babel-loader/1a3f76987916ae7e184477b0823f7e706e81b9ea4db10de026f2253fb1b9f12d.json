{"ast":null,"code":"var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\nvar Encoder = require('./Encoder.js');\n\n/**\n * ATH related stuff, if something new ATH related has to be added, please plug\n * it here into the ATH.\n */\nfunction ATH() {\n  /**\n   * Method for the auto adjustment.\n   */\n  this.useAdjust = 0;\n  /**\n   * factor for tuning the (sample power) point below which adaptive threshold\n   * of hearing adjustment occurs\n   */\n  this.aaSensitivityP = 0.;\n  /**\n   * Lowering based on peak volume, 1 = no lowering.\n   */\n  this.adjust = 0.;\n  /**\n   * Limit for dynamic ATH adjust.\n   */\n  this.adjustLimit = 0.;\n  /**\n   * Determined to lower x dB each second.\n   */\n  this.decay = 0.;\n  /**\n   * Lowest ATH value.\n   */\n  this.floor = 0.;\n  /**\n   * ATH for sfbs in long blocks.\n   */\n  this.l = new_float(Encoder.SBMAX_l);\n  /**\n   * ATH for sfbs in short blocks.\n   */\n  this.s = new_float(Encoder.SBMAX_s);\n  /**\n   * ATH for partitioned sfb21 in long blocks.\n   */\n  this.psfb21 = new_float(Encoder.PSFB21);\n  /**\n   * ATH for partitioned sfb12 in short blocks.\n   */\n  this.psfb12 = new_float(Encoder.PSFB12);\n  /**\n   * ATH for long block convolution bands.\n   */\n  this.cb_l = new_float(Encoder.CBANDS);\n  /**\n   * ATH for short block convolution bands.\n   */\n  this.cb_s = new_float(Encoder.CBANDS);\n  /**\n   * Equal loudness weights (based on ATH).\n   */\n  this.eql_w = new_float(Encoder.BLKSIZE / 2);\n}\nmodule.exports = ATH;","map":{"version":3,"names":["common","require","System","VbrMode","Float","ShortBlock","Util","Arrays","new_array_n","new_byte","new_double","new_float","new_float_n","new_int","new_int_n","assert","Encoder","ATH","useAdjust","aaSensitivityP","adjust","adjustLimit","decay","floor","l","SBMAX_l","s","SBMAX_s","psfb21","PSFB21","psfb12","PSFB12","cb_l","CBANDS","cb_s","eql_w","BLKSIZE","module","exports"],"sources":["D:/代码/vscodeProjects/AiEducation/vue_aieducation/node_modules/lamejs/src/js/ATH.js"],"sourcesContent":["var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\n/**\n * ATH related stuff, if something new ATH related has to be added, please plug\n * it here into the ATH.\n */\nfunction ATH() {\n    /**\n     * Method for the auto adjustment.\n     */\n    this.useAdjust = 0;\n    /**\n     * factor for tuning the (sample power) point below which adaptive threshold\n     * of hearing adjustment occurs\n     */\n    this.aaSensitivityP = 0.;\n    /**\n     * Lowering based on peak volume, 1 = no lowering.\n     */\n    this.adjust = 0.;\n    /**\n     * Limit for dynamic ATH adjust.\n     */\n    this.adjustLimit = 0.;\n    /**\n     * Determined to lower x dB each second.\n     */\n    this.decay = 0.;\n    /**\n     * Lowest ATH value.\n     */\n    this.floor = 0.;\n    /**\n     * ATH for sfbs in long blocks.\n     */\n    this.l = new_float(Encoder.SBMAX_l);\n    /**\n     * ATH for sfbs in short blocks.\n     */\n    this.s = new_float(Encoder.SBMAX_s);\n    /**\n     * ATH for partitioned sfb21 in long blocks.\n     */\n    this.psfb21 = new_float(Encoder.PSFB21);\n    /**\n     * ATH for partitioned sfb12 in short blocks.\n     */\n    this.psfb12 = new_float(Encoder.PSFB12);\n    /**\n     * ATH for long block convolution bands.\n     */\n    this.cb_l = new_float(Encoder.CBANDS);\n    /**\n     * ATH for short block convolution bands.\n     */\n    this.cb_s = new_float(Encoder.CBANDS);\n    /**\n     * Equal loudness weights (based on ATH).\n     */\n    this.eql_w = new_float(Encoder.BLKSIZE / 2);\n}\n\nmodule.exports = ATH;\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;AACnC,IAAIC,MAAM,GAAGF,MAAM,CAACE,MAAM;AAC1B,IAAIC,OAAO,GAAGH,MAAM,CAACG,OAAO;AAC5B,IAAIC,KAAK,GAAGJ,MAAM,CAACI,KAAK;AACxB,IAAIC,UAAU,GAAGL,MAAM,CAACK,UAAU;AAClC,IAAIC,IAAI,GAAGN,MAAM,CAACM,IAAI;AACtB,IAAIC,MAAM,GAAGP,MAAM,CAACO,MAAM;AAC1B,IAAIC,WAAW,GAAGR,MAAM,CAACQ,WAAW;AACpC,IAAIC,QAAQ,GAAGT,MAAM,CAACS,QAAQ;AAC9B,IAAIC,UAAU,GAAGV,MAAM,CAACU,UAAU;AAClC,IAAIC,SAAS,GAAGX,MAAM,CAACW,SAAS;AAChC,IAAIC,WAAW,GAAGZ,MAAM,CAACY,WAAW;AACpC,IAAIC,OAAO,GAAGb,MAAM,CAACa,OAAO;AAC5B,IAAIC,SAAS,GAAGd,MAAM,CAACc,SAAS;AAChC,IAAIC,MAAM,GAAGf,MAAM,CAACe,MAAM;AAE1B,IAAIC,OAAO,GAAGf,OAAO,CAAC,cAAc,CAAC;;AAErC;AACA;AACA;AACA;AACA,SAASgB,GAAGA,CAAA,EAAG;EACX;AACJ;AACA;EACI,IAAI,CAACC,SAAS,GAAG,CAAC;EAClB;AACJ;AACA;AACA;EACI,IAAI,CAACC,cAAc,GAAG,EAAE;EACxB;AACJ;AACA;EACI,IAAI,CAACC,MAAM,GAAG,EAAE;EAChB;AACJ;AACA;EACI,IAAI,CAACC,WAAW,GAAG,EAAE;EACrB;AACJ;AACA;EACI,IAAI,CAACC,KAAK,GAAG,EAAE;EACf;AACJ;AACA;EACI,IAAI,CAACC,KAAK,GAAG,EAAE;EACf;AACJ;AACA;EACI,IAAI,CAACC,CAAC,GAAGb,SAAS,CAACK,OAAO,CAACS,OAAO,CAAC;EACnC;AACJ;AACA;EACI,IAAI,CAACC,CAAC,GAAGf,SAAS,CAACK,OAAO,CAACW,OAAO,CAAC;EACnC;AACJ;AACA;EACI,IAAI,CAACC,MAAM,GAAGjB,SAAS,CAACK,OAAO,CAACa,MAAM,CAAC;EACvC;AACJ;AACA;EACI,IAAI,CAACC,MAAM,GAAGnB,SAAS,CAACK,OAAO,CAACe,MAAM,CAAC;EACvC;AACJ;AACA;EACI,IAAI,CAACC,IAAI,GAAGrB,SAAS,CAACK,OAAO,CAACiB,MAAM,CAAC;EACrC;AACJ;AACA;EACI,IAAI,CAACC,IAAI,GAAGvB,SAAS,CAACK,OAAO,CAACiB,MAAM,CAAC;EACrC;AACJ;AACA;EACI,IAAI,CAACE,KAAK,GAAGxB,SAAS,CAACK,OAAO,CAACoB,OAAO,GAAG,CAAC,CAAC;AAC/C;AAEAC,MAAM,CAACC,OAAO,GAAGrB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
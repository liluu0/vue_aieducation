{"ast":null,"code":"var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\nfunction Presets() {\n  function VBRPresets(qual, comp, compS, y, shThreshold, shThresholdS, adj, adjShort, lower, curve, sens, inter, joint, mod, fix) {\n    this.vbr_q = qual;\n    this.quant_comp = comp;\n    this.quant_comp_s = compS;\n    this.expY = y;\n    this.st_lrm = shThreshold;\n    this.st_s = shThresholdS;\n    this.masking_adj = adj;\n    this.masking_adj_short = adjShort;\n    this.ath_lower = lower;\n    this.ath_curve = curve;\n    this.ath_sensitivity = sens;\n    this.interch = inter;\n    this.safejoint = joint;\n    this.sfb21mod = mod;\n    this.msfix = fix;\n  }\n  function ABRPresets(kbps, comp, compS, joint, fix, shThreshold, shThresholdS, bass, sc, mask, lower, curve, interCh, sfScale) {\n    this.quant_comp = comp;\n    this.quant_comp_s = compS;\n    this.safejoint = joint;\n    this.nsmsfix = fix;\n    this.st_lrm = shThreshold;\n    this.st_s = shThresholdS;\n    this.nsbass = bass;\n    this.scale = sc;\n    this.masking_adj = mask;\n    this.ath_lower = lower;\n    this.ath_curve = curve;\n    this.interch = interCh;\n    this.sfscale = sfScale;\n  }\n  var lame;\n  this.setModules = function (_lame) {\n    lame = _lame;\n  };\n\n  /**\n   * <PRE>\n   * Switch mappings for VBR mode VBR_RH\n   *             vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\n   * </PRE>\n   */\n  var vbr_old_switch_map = [new VBRPresets(0, 9, 9, 0, 5.20, 125.0, -4.2, -6.3, 4.8, 1, 0, 0, 2, 21, 0.97), new VBRPresets(1, 9, 9, 0, 5.30, 125.0, -3.6, -5.6, 4.5, 1.5, 0, 0, 2, 21, 1.35), new VBRPresets(2, 9, 9, 0, 5.60, 125.0, -2.2, -3.5, 2.8, 2, 0, 0, 2, 21, 1.49), new VBRPresets(3, 9, 9, 1, 5.80, 130.0, -1.8, -2.8, 2.6, 3, -4, 0, 2, 20, 1.64), new VBRPresets(4, 9, 9, 1, 6.00, 135.0, -0.7, -1.1, 1.1, 3.5, -8, 0, 2, 0, 1.79), new VBRPresets(5, 9, 9, 1, 6.40, 140.0, 0.5, 0.4, -7.5, 4, -12, 0.0002, 0, 0, 1.95), new VBRPresets(6, 9, 9, 1, 6.60, 145.0, 0.67, 0.65, -14.7, 6.5, -19, 0.0004, 0, 0, 2.30), new VBRPresets(7, 9, 9, 1, 6.60, 145.0, 0.8, 0.75, -19.7, 8, -22, 0.0006, 0, 0, 2.70), new VBRPresets(8, 9, 9, 1, 6.60, 145.0, 1.2, 1.15, -27.5, 10, -23, 0.0007, 0, 0, 0), new VBRPresets(9, 9, 9, 1, 6.60, 145.0, 1.6, 1.6, -36, 11, -25, 0.0008, 0, 0, 0), new VBRPresets(10, 9, 9, 1, 6.60, 145.0, 2.0, 2.0, -36, 12, -25, 0.0008, 0, 0, 0)];\n\n  /**\n   * <PRE>\n   *                 vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\n   * </PRE>\n   */\n  var vbr_psy_switch_map = [new VBRPresets(0, 9, 9, 0, 4.20, 25.0, -7.0, -4.0, 7.5, 1, 0, 0, 2, 26, 0.97), new VBRPresets(1, 9, 9, 0, 4.20, 25.0, -5.6, -3.6, 4.5, 1.5, 0, 0, 2, 21, 1.35), new VBRPresets(2, 9, 9, 0, 4.20, 25.0, -4.4, -1.8, 2, 2, 0, 0, 2, 18, 1.49), new VBRPresets(3, 9, 9, 1, 4.20, 25.0, -3.4, -1.25, 1.1, 3, -4, 0, 2, 15, 1.64), new VBRPresets(4, 9, 9, 1, 4.20, 25.0, -2.2, 0.1, 0, 3.5, -8, 0, 2, 0, 1.79), new VBRPresets(5, 9, 9, 1, 4.20, 25.0, -1.0, 1.65, -7.7, 4, -12, 0.0002, 0, 0, 1.95), new VBRPresets(6, 9, 9, 1, 4.20, 25.0, -0.0, 2.47, -7.7, 6.5, -19, 0.0004, 0, 0, 2), new VBRPresets(7, 9, 9, 1, 4.20, 25.0, 0.5, 2.0, -14.5, 8, -22, 0.0006, 0, 0, 2), new VBRPresets(8, 9, 9, 1, 4.20, 25.0, 1.0, 2.4, -22.0, 10, -23, 0.0007, 0, 0, 2), new VBRPresets(9, 9, 9, 1, 4.20, 25.0, 1.5, 2.95, -30.0, 11, -25, 0.0008, 0, 0, 2), new VBRPresets(10, 9, 9, 1, 4.20, 25.0, 2.0, 2.95, -36.0, 12, -30, 0.0008, 0, 0, 2)];\n  function apply_vbr_preset(gfp, a, enforce) {\n    var vbr_preset = gfp.VBR == VbrMode.vbr_rh ? vbr_old_switch_map : vbr_psy_switch_map;\n    var x = gfp.VBR_q_frac;\n    var p = vbr_preset[a];\n    var q = vbr_preset[a + 1];\n    var set = p;\n\n    // NOOP(vbr_q);\n    // NOOP(quant_comp);\n    // NOOP(quant_comp_s);\n    // NOOP(expY);\n    p.st_lrm = p.st_lrm + x * (q.st_lrm - p.st_lrm);\n    // LERP(st_lrm);\n    p.st_s = p.st_s + x * (q.st_s - p.st_s);\n    // LERP(st_s);\n    p.masking_adj = p.masking_adj + x * (q.masking_adj - p.masking_adj);\n    // LERP(masking_adj);\n    p.masking_adj_short = p.masking_adj_short + x * (q.masking_adj_short - p.masking_adj_short);\n    // LERP(masking_adj_short);\n    p.ath_lower = p.ath_lower + x * (q.ath_lower - p.ath_lower);\n    // LERP(ath_lower);\n    p.ath_curve = p.ath_curve + x * (q.ath_curve - p.ath_curve);\n    // LERP(ath_curve);\n    p.ath_sensitivity = p.ath_sensitivity + x * (q.ath_sensitivity - p.ath_sensitivity);\n    // LERP(ath_sensitivity);\n    p.interch = p.interch + x * (q.interch - p.interch);\n    // LERP(interch);\n    // NOOP(safejoint);\n    // NOOP(sfb21mod);\n    p.msfix = p.msfix + x * (q.msfix - p.msfix);\n    // LERP(msfix);\n\n    lame_set_VBR_q(gfp, set.vbr_q);\n    if (enforce != 0) gfp.quant_comp = set.quant_comp;else if (!(Math.abs(gfp.quant_comp - -1) > 0)) gfp.quant_comp = set.quant_comp;\n    // SET_OPTION(quant_comp, set.quant_comp, -1);\n    if (enforce != 0) gfp.quant_comp_short = set.quant_comp_s;else if (!(Math.abs(gfp.quant_comp_short - -1) > 0)) gfp.quant_comp_short = set.quant_comp_s;\n    // SET_OPTION(quant_comp_short, set.quant_comp_s, -1);\n    if (set.expY != 0) {\n      gfp.experimentalY = set.expY != 0;\n    }\n    if (enforce != 0) gfp.internal_flags.nsPsy.attackthre = set.st_lrm;else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0)) gfp.internal_flags.nsPsy.attackthre = set.st_lrm;\n    // SET_OPTION(short_threshold_lrm, set.st_lrm, -1);\n    if (enforce != 0) gfp.internal_flags.nsPsy.attackthre_s = set.st_s;else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0)) gfp.internal_flags.nsPsy.attackthre_s = set.st_s;\n    // SET_OPTION(short_threshold_s, set.st_s, -1);\n    if (enforce != 0) gfp.maskingadjust = set.masking_adj;else if (!(Math.abs(gfp.maskingadjust - 0) > 0)) gfp.maskingadjust = set.masking_adj;\n    // SET_OPTION(maskingadjust, set.masking_adj, 0);\n    if (enforce != 0) gfp.maskingadjust_short = set.masking_adj_short;else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0)) gfp.maskingadjust_short = set.masking_adj_short;\n    // SET_OPTION(maskingadjust_short, set.masking_adj_short, 0);\n    if (enforce != 0) gfp.ATHlower = -set.ath_lower / 10.0;else if (!(Math.abs(-gfp.ATHlower * 10.0 - 0) > 0)) gfp.ATHlower = -set.ath_lower / 10.0;\n    // SET_OPTION(ATHlower, set.ath_lower, 0);\n    if (enforce != 0) gfp.ATHcurve = set.ath_curve;else if (!(Math.abs(gfp.ATHcurve - -1) > 0)) gfp.ATHcurve = set.ath_curve;\n    // SET_OPTION(ATHcurve, set.ath_curve, -1);\n    if (enforce != 0) gfp.athaa_sensitivity = set.ath_sensitivity;else if (!(Math.abs(gfp.athaa_sensitivity - -1) > 0)) gfp.athaa_sensitivity = set.ath_sensitivity;\n    // SET_OPTION(athaa_sensitivity, set.ath_sensitivity, 0);\n    if (set.interch > 0) {\n      if (enforce != 0) gfp.interChRatio = set.interch;else if (!(Math.abs(gfp.interChRatio - -1) > 0)) gfp.interChRatio = set.interch;\n      // SET_OPTION(interChRatio, set.interch, -1);\n    }\n\n    /* parameters for which there is no proper set/get interface */\n    if (set.safejoint > 0) {\n      gfp.exp_nspsytune = gfp.exp_nspsytune | set.safejoint;\n    }\n    if (set.sfb21mod > 0) {\n      gfp.exp_nspsytune = gfp.exp_nspsytune | set.sfb21mod << 20;\n    }\n    if (enforce != 0) gfp.msfix = set.msfix;else if (!(Math.abs(gfp.msfix - -1) > 0)) gfp.msfix = set.msfix;\n    // SET_OPTION(msfix, set.msfix, -1);\n\n    if (enforce == 0) {\n      gfp.VBR_q = a;\n      gfp.VBR_q_frac = x;\n    }\n  }\n\n  /**\n   * <PRE>\n   *  Switch mappings for ABR mode\n   *\n   *              kbps  quant q_s safejoint nsmsfix st_lrm  st_s  ns-bass scale   msk ath_lwr ath_curve  interch , sfscale\n   * </PRE>\n   */\n  var abr_switch_map = [new ABRPresets(8, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -30.0, 11, 0.0012, 1), /*   8, impossible to use in stereo */\n  new ABRPresets(16, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -25.0, 11, 0.0010, 1), /*  16 */\n  new ABRPresets(24, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -20.0, 11, 0.0010, 1), /*  24 */\n  new ABRPresets(32, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -15.0, 11, 0.0010, 1), /*  32 */\n  new ABRPresets(40, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  40 */\n  new ABRPresets(48, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  48 */\n  new ABRPresets(56, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -6.0, 11, 0.0008, 1), /*  56 */\n  new ABRPresets(64, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -2.0, 11, 0.0008, 1), /*  64 */\n  new ABRPresets(80, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, .0, 8, 0.0007, 1), /*  80 */\n  new ABRPresets(96, 9, 9, 0, 2.50, 6.60, 145, 0, 0.95, 0, 1.0, 5.5, 0.0006, 1), /*  96 */\n  new ABRPresets(112, 9, 9, 0, 2.25, 6.60, 145, 0, 0.95, 0, 2.0, 4.5, 0.0005, 1), /* 112 */\n  new ABRPresets(128, 9, 9, 0, 1.95, 6.40, 140, 0, 0.95, 0, 3.0, 4, 0.0002, 1), /* 128 */\n  new ABRPresets(160, 9, 9, 1, 1.79, 6.00, 135, 0, 0.95, -2, 5.0, 3.5, 0, 1), /* 160 */\n  new ABRPresets(192, 9, 9, 1, 1.49, 5.60, 125, 0, 0.97, -4, 7.0, 3, 0, 0), /* 192 */\n  new ABRPresets(224, 9, 9, 1, 1.25, 5.20, 125, 0, 0.98, -6, 9.0, 2, 0, 0), /* 224 */\n  new ABRPresets(256, 9, 9, 1, 0.97, 5.20, 125, 0, 1.00, -8, 10.0, 1, 0, 0), /* 256 */\n  new ABRPresets(320, 9, 9, 1, 0.90, 5.20, 125, 0, 1.00, -10, 12.0, 0, 0, 0) /* 320 */];\n  function apply_abr_preset(gfp, preset, enforce) {\n    /* Variables for the ABR stuff */\n    var actual_bitrate = preset;\n    var r = lame.nearestBitrateFullIndex(preset);\n    gfp.VBR = VbrMode.vbr_abr;\n    gfp.VBR_mean_bitrate_kbps = actual_bitrate;\n    gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps, 320);\n    gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps, 8);\n    gfp.brate = gfp.VBR_mean_bitrate_kbps;\n    if (gfp.VBR_mean_bitrate_kbps > 320) {\n      gfp.disable_reservoir = true;\n    }\n\n    /* parameters for which there is no proper set/get interface */\n    if (abr_switch_map[r].safejoint > 0) gfp.exp_nspsytune = gfp.exp_nspsytune | 2;\n    /* safejoint */\n\n    if (abr_switch_map[r].sfscale > 0) {\n      gfp.internal_flags.noise_shaping = 2;\n    }\n    /* ns-bass tweaks */\n    if (Math.abs(abr_switch_map[r].nsbass) > 0) {\n      var k = int(abr_switch_map[r].nsbass * 4);\n      if (k < 0) k += 64;\n      gfp.exp_nspsytune = gfp.exp_nspsytune | k << 2;\n    }\n    if (enforce != 0) gfp.quant_comp = abr_switch_map[r].quant_comp;else if (!(Math.abs(gfp.quant_comp - -1) > 0)) gfp.quant_comp = abr_switch_map[r].quant_comp;\n    // SET_OPTION(quant_comp, abr_switch_map[r].quant_comp, -1);\n    if (enforce != 0) gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;else if (!(Math.abs(gfp.quant_comp_short - -1) > 0)) gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;\n    // SET_OPTION(quant_comp_short, abr_switch_map[r].quant_comp_s, -1);\n\n    if (enforce != 0) gfp.msfix = abr_switch_map[r].nsmsfix;else if (!(Math.abs(gfp.msfix - -1) > 0)) gfp.msfix = abr_switch_map[r].nsmsfix;\n    // SET_OPTION(msfix, abr_switch_map[r].nsmsfix, -1);\n\n    if (enforce != 0) gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0)) gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;\n    // SET_OPTION(short_threshold_lrm, abr_switch_map[r].st_lrm, -1);\n    if (enforce != 0) gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0)) gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;\n    // SET_OPTION(short_threshold_s, abr_switch_map[r].st_s, -1);\n\n    /*\n     * ABR seems to have big problems with clipping, especially at low\n     * bitrates\n     */\n    /*\n     * so we compensate for that here by using a scale value depending on\n     * bitrate\n     */\n    if (enforce != 0) gfp.scale = abr_switch_map[r].scale;else if (!(Math.abs(gfp.scale - -1) > 0)) gfp.scale = abr_switch_map[r].scale;\n    // SET_OPTION(scale, abr_switch_map[r].scale, -1);\n\n    if (enforce != 0) gfp.maskingadjust = abr_switch_map[r].masking_adj;else if (!(Math.abs(gfp.maskingadjust - 0) > 0)) gfp.maskingadjust = abr_switch_map[r].masking_adj;\n    // SET_OPTION(maskingadjust, abr_switch_map[r].masking_adj, 0);\n    if (abr_switch_map[r].masking_adj > 0) {\n      if (enforce != 0) gfp.maskingadjust_short = abr_switch_map[r].masking_adj * .9;else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0)) gfp.maskingadjust_short = abr_switch_map[r].masking_adj * .9;\n      // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n      // .9, 0);\n    } else {\n      if (enforce != 0) gfp.maskingadjust_short = abr_switch_map[r].masking_adj * 1.1;else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0)) gfp.maskingadjust_short = abr_switch_map[r].masking_adj * 1.1;\n      // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n      // 1.1, 0);\n    }\n    if (enforce != 0) gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;else if (!(Math.abs(-gfp.ATHlower * 10. - 0) > 0)) gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;\n    // SET_OPTION(ATHlower, abr_switch_map[r].ath_lower, 0);\n    if (enforce != 0) gfp.ATHcurve = abr_switch_map[r].ath_curve;else if (!(Math.abs(gfp.ATHcurve - -1) > 0)) gfp.ATHcurve = abr_switch_map[r].ath_curve;\n    // SET_OPTION(ATHcurve, abr_switch_map[r].ath_curve, -1);\n\n    if (enforce != 0) gfp.interChRatio = abr_switch_map[r].interch;else if (!(Math.abs(gfp.interChRatio - -1) > 0)) gfp.interChRatio = abr_switch_map[r].interch;\n    // SET_OPTION(interChRatio, abr_switch_map[r].interch, -1);\n\n    return preset;\n  }\n  this.apply_preset = function (gfp, preset, enforce) {\n    /* translate legacy presets */\n    switch (preset) {\n      case Lame.R3MIX:\n        {\n          preset = Lame.V3;\n          gfp.VBR = VbrMode.vbr_mtrh;\n          break;\n        }\n      case Lame.MEDIUM:\n        {\n          preset = Lame.V4;\n          gfp.VBR = VbrMode.vbr_rh;\n          break;\n        }\n      case Lame.MEDIUM_FAST:\n        {\n          preset = Lame.V4;\n          gfp.VBR = VbrMode.vbr_mtrh;\n          break;\n        }\n      case Lame.STANDARD:\n        {\n          preset = Lame.V2;\n          gfp.VBR = VbrMode.vbr_rh;\n          break;\n        }\n      case Lame.STANDARD_FAST:\n        {\n          preset = Lame.V2;\n          gfp.VBR = VbrMode.vbr_mtrh;\n          break;\n        }\n      case Lame.EXTREME:\n        {\n          preset = Lame.V0;\n          gfp.VBR = VbrMode.vbr_rh;\n          break;\n        }\n      case Lame.EXTREME_FAST:\n        {\n          preset = Lame.V0;\n          gfp.VBR = VbrMode.vbr_mtrh;\n          break;\n        }\n      case Lame.INSANE:\n        {\n          preset = 320;\n          gfp.preset = preset;\n          apply_abr_preset(gfp, preset, enforce);\n          gfp.VBR = VbrMode.vbr_off;\n          return preset;\n        }\n    }\n    gfp.preset = preset;\n    {\n      switch (preset) {\n        case Lame.V9:\n          apply_vbr_preset(gfp, 9, enforce);\n          return preset;\n        case Lame.V8:\n          apply_vbr_preset(gfp, 8, enforce);\n          return preset;\n        case Lame.V7:\n          apply_vbr_preset(gfp, 7, enforce);\n          return preset;\n        case Lame.V6:\n          apply_vbr_preset(gfp, 6, enforce);\n          return preset;\n        case Lame.V5:\n          apply_vbr_preset(gfp, 5, enforce);\n          return preset;\n        case Lame.V4:\n          apply_vbr_preset(gfp, 4, enforce);\n          return preset;\n        case Lame.V3:\n          apply_vbr_preset(gfp, 3, enforce);\n          return preset;\n        case Lame.V2:\n          apply_vbr_preset(gfp, 2, enforce);\n          return preset;\n        case Lame.V1:\n          apply_vbr_preset(gfp, 1, enforce);\n          return preset;\n        case Lame.V0:\n          apply_vbr_preset(gfp, 0, enforce);\n          return preset;\n        default:\n          break;\n      }\n    }\n    if (8 <= preset && preset <= 320) {\n      return apply_abr_preset(gfp, preset, enforce);\n    }\n\n    /* no corresponding preset found */\n    gfp.preset = 0;\n    return preset;\n  };\n\n  // Rest from getset.c:\n\n  /**\n   * VBR quality level.<BR>\n   * 0 = highest<BR>\n   * 9 = lowest\n   */\n  function lame_set_VBR_q(gfp, VBR_q) {\n    var ret = 0;\n    if (0 > VBR_q) {\n      /* Unknown VBR quality level! */\n      ret = -1;\n      VBR_q = 0;\n    }\n    if (9 < VBR_q) {\n      ret = -1;\n      VBR_q = 9;\n    }\n    gfp.VBR_q = VBR_q;\n    gfp.VBR_q_frac = 0;\n    return ret;\n  }\n}\nmodule.exports = Presets;","map":{"version":3,"names":["common","require","System","VbrMode","Float","ShortBlock","Util","Arrays","new_array_n","new_byte","new_double","new_float","new_float_n","new_int","new_int_n","assert","Presets","VBRPresets","qual","comp","compS","y","shThreshold","shThresholdS","adj","adjShort","lower","curve","sens","inter","joint","mod","fix","vbr_q","quant_comp","quant_comp_s","expY","st_lrm","st_s","masking_adj","masking_adj_short","ath_lower","ath_curve","ath_sensitivity","interch","safejoint","sfb21mod","msfix","ABRPresets","kbps","bass","sc","mask","interCh","sfScale","nsmsfix","nsbass","scale","sfscale","lame","setModules","_lame","vbr_old_switch_map","vbr_psy_switch_map","apply_vbr_preset","gfp","a","enforce","vbr_preset","VBR","vbr_rh","x","VBR_q_frac","p","q","set","lame_set_VBR_q","Math","abs","quant_comp_short","experimentalY","internal_flags","nsPsy","attackthre","attackthre_s","maskingadjust","maskingadjust_short","ATHlower","ATHcurve","athaa_sensitivity","interChRatio","exp_nspsytune","VBR_q","abr_switch_map","apply_abr_preset","preset","actual_bitrate","r","nearestBitrateFullIndex","vbr_abr","VBR_mean_bitrate_kbps","min","max","brate","disable_reservoir","noise_shaping","k","int","apply_preset","Lame","R3MIX","V3","vbr_mtrh","MEDIUM","V4","MEDIUM_FAST","STANDARD","V2","STANDARD_FAST","EXTREME","V0","EXTREME_FAST","INSANE","vbr_off","V9","V8","V7","V6","V5","V1","ret","module","exports"],"sources":["D:/代码/vscodeProjects/AiEducation/vue_aieducation/node_modules/lamejs/src/js/Presets.js"],"sourcesContent":["var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nfunction Presets() {\n    function VBRPresets(qual, comp, compS,\n                        y, shThreshold, shThresholdS,\n                        adj, adjShort, lower,\n                        curve, sens, inter,\n                        joint, mod, fix) {\n        this.vbr_q = qual;\n        this.quant_comp = comp;\n        this.quant_comp_s = compS;\n        this.expY = y;\n        this.st_lrm = shThreshold;\n        this.st_s = shThresholdS;\n        this.masking_adj = adj;\n        this.masking_adj_short = adjShort;\n        this.ath_lower = lower;\n        this.ath_curve = curve;\n        this.ath_sensitivity = sens;\n        this.interch = inter;\n        this.safejoint = joint;\n        this.sfb21mod = mod;\n        this.msfix = fix;\n    }\n\n    function ABRPresets(kbps, comp, compS,\n                        joint, fix, shThreshold,\n                        shThresholdS, bass, sc,\n                        mask, lower, curve,\n                        interCh, sfScale) {\n        this.quant_comp = comp;\n        this.quant_comp_s = compS;\n        this.safejoint = joint;\n        this.nsmsfix = fix;\n        this.st_lrm = shThreshold;\n        this.st_s = shThresholdS;\n        this.nsbass = bass;\n        this.scale = sc;\n        this.masking_adj = mask;\n        this.ath_lower = lower;\n        this.ath_curve = curve;\n        this.interch = interCh;\n        this.sfscale = sfScale;\n    }\n\n    var lame;\n\n    this.setModules = function (_lame) {\n        lame = _lame;\n    };\n\n    /**\n     * <PRE>\n     * Switch mappings for VBR mode VBR_RH\n     *             vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\n     * </PRE>\n     */\n    var vbr_old_switch_map = [\n        new VBRPresets(0, 9, 9, 0, 5.20, 125.0, -4.2, -6.3, 4.8, 1, 0, 0, 2, 21, 0.97),\n        new VBRPresets(1, 9, 9, 0, 5.30, 125.0, -3.6, -5.6, 4.5, 1.5, 0, 0, 2, 21, 1.35),\n        new VBRPresets(2, 9, 9, 0, 5.60, 125.0, -2.2, -3.5, 2.8, 2, 0, 0, 2, 21, 1.49),\n        new VBRPresets(3, 9, 9, 1, 5.80, 130.0, -1.8, -2.8, 2.6, 3, -4, 0, 2, 20, 1.64),\n        new VBRPresets(4, 9, 9, 1, 6.00, 135.0, -0.7, -1.1, 1.1, 3.5, -8, 0, 2, 0, 1.79),\n        new VBRPresets(5, 9, 9, 1, 6.40, 140.0, 0.5, 0.4, -7.5, 4, -12, 0.0002, 0, 0, 1.95),\n        new VBRPresets(6, 9, 9, 1, 6.60, 145.0, 0.67, 0.65, -14.7, 6.5, -19, 0.0004, 0, 0, 2.30),\n        new VBRPresets(7, 9, 9, 1, 6.60, 145.0, 0.8, 0.75, -19.7, 8, -22, 0.0006, 0, 0, 2.70),\n        new VBRPresets(8, 9, 9, 1, 6.60, 145.0, 1.2, 1.15, -27.5, 10, -23, 0.0007, 0, 0, 0),\n        new VBRPresets(9, 9, 9, 1, 6.60, 145.0, 1.6, 1.6, -36, 11, -25, 0.0008, 0, 0, 0),\n        new VBRPresets(10, 9, 9, 1, 6.60, 145.0, 2.0, 2.0, -36, 12, -25, 0.0008, 0, 0, 0)\n    ];\n\n    /**\n     * <PRE>\n     *                 vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\n     * </PRE>\n     */\n    var vbr_psy_switch_map = [\n        new VBRPresets(0, 9, 9, 0, 4.20, 25.0, -7.0, -4.0, 7.5, 1, 0, 0, 2, 26, 0.97),\n        new VBRPresets(1, 9, 9, 0, 4.20, 25.0, -5.6, -3.6, 4.5, 1.5, 0, 0, 2, 21, 1.35),\n        new VBRPresets(2, 9, 9, 0, 4.20, 25.0, -4.4, -1.8, 2, 2, 0, 0, 2, 18, 1.49),\n        new VBRPresets(3, 9, 9, 1, 4.20, 25.0, -3.4, -1.25, 1.1, 3, -4, 0, 2, 15, 1.64),\n        new VBRPresets(4, 9, 9, 1, 4.20, 25.0, -2.2, 0.1, 0, 3.5, -8, 0, 2, 0, 1.79),\n        new VBRPresets(5, 9, 9, 1, 4.20, 25.0, -1.0, 1.65, -7.7, 4, -12, 0.0002, 0, 0, 1.95),\n        new VBRPresets(6, 9, 9, 1, 4.20, 25.0, -0.0, 2.47, -7.7, 6.5, -19, 0.0004, 0, 0, 2),\n        new VBRPresets(7, 9, 9, 1, 4.20, 25.0, 0.5, 2.0, -14.5, 8, -22, 0.0006, 0, 0, 2),\n        new VBRPresets(8, 9, 9, 1, 4.20, 25.0, 1.0, 2.4, -22.0, 10, -23, 0.0007, 0, 0, 2),\n        new VBRPresets(9, 9, 9, 1, 4.20, 25.0, 1.5, 2.95, -30.0, 11, -25, 0.0008, 0, 0, 2),\n        new VBRPresets(10, 9, 9, 1, 4.20, 25.0, 2.0, 2.95, -36.0, 12, -30, 0.0008, 0, 0, 2)\n    ];\n\n    function apply_vbr_preset(gfp, a, enforce) {\n        var vbr_preset = gfp.VBR == VbrMode.vbr_rh ? vbr_old_switch_map\n            : vbr_psy_switch_map;\n\n        var x = gfp.VBR_q_frac;\n        var p = vbr_preset[a];\n        var q = vbr_preset[a + 1];\n        var set = p;\n\n        // NOOP(vbr_q);\n        // NOOP(quant_comp);\n        // NOOP(quant_comp_s);\n        // NOOP(expY);\n        p.st_lrm = p.st_lrm + x * (q.st_lrm - p.st_lrm);\n        // LERP(st_lrm);\n        p.st_s = p.st_s + x * (q.st_s - p.st_s);\n        // LERP(st_s);\n        p.masking_adj = p.masking_adj + x * (q.masking_adj - p.masking_adj);\n        // LERP(masking_adj);\n        p.masking_adj_short = p.masking_adj_short + x\n            * (q.masking_adj_short - p.masking_adj_short);\n        // LERP(masking_adj_short);\n        p.ath_lower = p.ath_lower + x * (q.ath_lower - p.ath_lower);\n        // LERP(ath_lower);\n        p.ath_curve = p.ath_curve + x * (q.ath_curve - p.ath_curve);\n        // LERP(ath_curve);\n        p.ath_sensitivity = p.ath_sensitivity + x\n            * (q.ath_sensitivity - p.ath_sensitivity);\n        // LERP(ath_sensitivity);\n        p.interch = p.interch + x * (q.interch - p.interch);\n        // LERP(interch);\n        // NOOP(safejoint);\n        // NOOP(sfb21mod);\n        p.msfix = p.msfix + x * (q.msfix - p.msfix);\n        // LERP(msfix);\n\n        lame_set_VBR_q(gfp, set.vbr_q);\n\n        if (enforce != 0)\n            gfp.quant_comp = set.quant_comp;\n        else if (!(Math.abs(gfp.quant_comp - -1) > 0))\n            gfp.quant_comp = set.quant_comp;\n        // SET_OPTION(quant_comp, set.quant_comp, -1);\n        if (enforce != 0)\n            gfp.quant_comp_short = set.quant_comp_s;\n        else if (!(Math.abs(gfp.quant_comp_short - -1) > 0))\n            gfp.quant_comp_short = set.quant_comp_s;\n        // SET_OPTION(quant_comp_short, set.quant_comp_s, -1);\n        if (set.expY != 0) {\n            gfp.experimentalY = set.expY != 0;\n        }\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre = set.st_lrm;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre = set.st_lrm;\n        // SET_OPTION(short_threshold_lrm, set.st_lrm, -1);\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre_s = set.st_s;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre_s = set.st_s;\n        // SET_OPTION(short_threshold_s, set.st_s, -1);\n        if (enforce != 0)\n            gfp.maskingadjust = set.masking_adj;\n        else if (!(Math.abs(gfp.maskingadjust - 0) > 0))\n            gfp.maskingadjust = set.masking_adj;\n        // SET_OPTION(maskingadjust, set.masking_adj, 0);\n        if (enforce != 0)\n            gfp.maskingadjust_short = set.masking_adj_short;\n        else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n            gfp.maskingadjust_short = set.masking_adj_short;\n        // SET_OPTION(maskingadjust_short, set.masking_adj_short, 0);\n        if (enforce != 0)\n            gfp.ATHlower = -set.ath_lower / 10.0;\n        else if (!(Math.abs((-gfp.ATHlower * 10.0) - 0) > 0))\n            gfp.ATHlower = -set.ath_lower / 10.0;\n        // SET_OPTION(ATHlower, set.ath_lower, 0);\n        if (enforce != 0)\n            gfp.ATHcurve = set.ath_curve;\n        else if (!(Math.abs(gfp.ATHcurve - -1) > 0))\n            gfp.ATHcurve = set.ath_curve;\n        // SET_OPTION(ATHcurve, set.ath_curve, -1);\n        if (enforce != 0)\n            gfp.athaa_sensitivity = set.ath_sensitivity;\n        else if (!(Math.abs(gfp.athaa_sensitivity - -1) > 0))\n            gfp.athaa_sensitivity = set.ath_sensitivity;\n        // SET_OPTION(athaa_sensitivity, set.ath_sensitivity, 0);\n        if (set.interch > 0) {\n            if (enforce != 0)\n                gfp.interChRatio = set.interch;\n            else if (!(Math.abs(gfp.interChRatio - -1) > 0))\n                gfp.interChRatio = set.interch;\n            // SET_OPTION(interChRatio, set.interch, -1);\n        }\n\n        /* parameters for which there is no proper set/get interface */\n        if (set.safejoint > 0) {\n            gfp.exp_nspsytune = gfp.exp_nspsytune | set.safejoint;\n        }\n        if (set.sfb21mod > 0) {\n            gfp.exp_nspsytune = gfp.exp_nspsytune | (set.sfb21mod << 20);\n        }\n        if (enforce != 0)\n            gfp.msfix = set.msfix;\n        else if (!(Math.abs(gfp.msfix - -1) > 0))\n            gfp.msfix = set.msfix;\n        // SET_OPTION(msfix, set.msfix, -1);\n\n        if (enforce == 0) {\n            gfp.VBR_q = a;\n            gfp.VBR_q_frac = x;\n        }\n    }\n\n    /**\n     * <PRE>\n     *  Switch mappings for ABR mode\n     *\n     *              kbps  quant q_s safejoint nsmsfix st_lrm  st_s  ns-bass scale   msk ath_lwr ath_curve  interch , sfscale\n     * </PRE>\n     */\n    var abr_switch_map = [\n        new ABRPresets(8, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -30.0, 11, 0.0012, 1), /*   8, impossible to use in stereo */\n        new ABRPresets(16, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -25.0, 11, 0.0010, 1), /*  16 */\n        new ABRPresets(24, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -20.0, 11, 0.0010, 1), /*  24 */\n        new ABRPresets(32, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -15.0, 11, 0.0010, 1), /*  32 */\n        new ABRPresets(40, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  40 */\n        new ABRPresets(48, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  48 */\n        new ABRPresets(56, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -6.0, 11, 0.0008, 1), /*  56 */\n        new ABRPresets(64, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -2.0, 11, 0.0008, 1), /*  64 */\n        new ABRPresets(80, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, .0, 8, 0.0007, 1), /*  80 */\n        new ABRPresets(96, 9, 9, 0, 2.50, 6.60, 145, 0, 0.95, 0, 1.0, 5.5, 0.0006, 1), /*  96 */\n        new ABRPresets(112, 9, 9, 0, 2.25, 6.60, 145, 0, 0.95, 0, 2.0, 4.5, 0.0005, 1), /* 112 */\n        new ABRPresets(128, 9, 9, 0, 1.95, 6.40, 140, 0, 0.95, 0, 3.0, 4, 0.0002, 1), /* 128 */\n        new ABRPresets(160, 9, 9, 1, 1.79, 6.00, 135, 0, 0.95, -2, 5.0, 3.5, 0, 1), /* 160 */\n        new ABRPresets(192, 9, 9, 1, 1.49, 5.60, 125, 0, 0.97, -4, 7.0, 3, 0, 0), /* 192 */\n        new ABRPresets(224, 9, 9, 1, 1.25, 5.20, 125, 0, 0.98, -6, 9.0, 2, 0, 0), /* 224 */\n        new ABRPresets(256, 9, 9, 1, 0.97, 5.20, 125, 0, 1.00, -8, 10.0, 1, 0, 0), /* 256 */\n        new ABRPresets(320, 9, 9, 1, 0.90, 5.20, 125, 0, 1.00, -10, 12.0, 0, 0, 0)  /* 320 */\n    ];\n\n    function apply_abr_preset(gfp, preset, enforce) {\n        /* Variables for the ABR stuff */\n        var actual_bitrate = preset;\n\n        var r = lame.nearestBitrateFullIndex(preset);\n\n        gfp.VBR = VbrMode.vbr_abr;\n        gfp.VBR_mean_bitrate_kbps = actual_bitrate;\n        gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps, 320);\n        gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps, 8);\n        gfp.brate = gfp.VBR_mean_bitrate_kbps;\n        if (gfp.VBR_mean_bitrate_kbps > 320) {\n            gfp.disable_reservoir = true;\n        }\n\n        /* parameters for which there is no proper set/get interface */\n        if (abr_switch_map[r].safejoint > 0)\n            gfp.exp_nspsytune = gfp.exp_nspsytune | 2;\n        /* safejoint */\n\n        if (abr_switch_map[r].sfscale > 0) {\n            gfp.internal_flags.noise_shaping = 2;\n        }\n        /* ns-bass tweaks */\n        if (Math.abs(abr_switch_map[r].nsbass) > 0) {\n            var k = (int)(abr_switch_map[r].nsbass * 4);\n            if (k < 0)\n                k += 64;\n            gfp.exp_nspsytune = gfp.exp_nspsytune | (k << 2);\n        }\n\n        if (enforce != 0)\n            gfp.quant_comp = abr_switch_map[r].quant_comp;\n        else if (!(Math.abs(gfp.quant_comp - -1) > 0))\n            gfp.quant_comp = abr_switch_map[r].quant_comp;\n        // SET_OPTION(quant_comp, abr_switch_map[r].quant_comp, -1);\n        if (enforce != 0)\n            gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;\n        else if (!(Math.abs(gfp.quant_comp_short - -1) > 0))\n            gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;\n        // SET_OPTION(quant_comp_short, abr_switch_map[r].quant_comp_s, -1);\n\n        if (enforce != 0)\n            gfp.msfix = abr_switch_map[r].nsmsfix;\n        else if (!(Math.abs(gfp.msfix - -1) > 0))\n            gfp.msfix = abr_switch_map[r].nsmsfix;\n        // SET_OPTION(msfix, abr_switch_map[r].nsmsfix, -1);\n\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;\n        // SET_OPTION(short_threshold_lrm, abr_switch_map[r].st_lrm, -1);\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;\n        // SET_OPTION(short_threshold_s, abr_switch_map[r].st_s, -1);\n\n        /*\n         * ABR seems to have big problems with clipping, especially at low\n         * bitrates\n         */\n        /*\n         * so we compensate for that here by using a scale value depending on\n         * bitrate\n         */\n        if (enforce != 0)\n            gfp.scale = abr_switch_map[r].scale;\n        else if (!(Math.abs(gfp.scale - -1) > 0))\n            gfp.scale = abr_switch_map[r].scale;\n        // SET_OPTION(scale, abr_switch_map[r].scale, -1);\n\n        if (enforce != 0)\n            gfp.maskingadjust = abr_switch_map[r].masking_adj;\n        else if (!(Math.abs(gfp.maskingadjust - 0) > 0))\n            gfp.maskingadjust = abr_switch_map[r].masking_adj;\n        // SET_OPTION(maskingadjust, abr_switch_map[r].masking_adj, 0);\n        if (abr_switch_map[r].masking_adj > 0) {\n            if (enforce != 0)\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * .9);\n            else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * .9);\n            // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n            // .9, 0);\n        } else {\n            if (enforce != 0)\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * 1.1);\n            else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * 1.1);\n            // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n            // 1.1, 0);\n        }\n\n        if (enforce != 0)\n            gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;\n        else if (!(Math.abs((-gfp.ATHlower * 10.) - 0) > 0))\n            gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;\n        // SET_OPTION(ATHlower, abr_switch_map[r].ath_lower, 0);\n        if (enforce != 0)\n            gfp.ATHcurve = abr_switch_map[r].ath_curve;\n        else if (!(Math.abs(gfp.ATHcurve - -1) > 0))\n            gfp.ATHcurve = abr_switch_map[r].ath_curve;\n        // SET_OPTION(ATHcurve, abr_switch_map[r].ath_curve, -1);\n\n        if (enforce != 0)\n            gfp.interChRatio = abr_switch_map[r].interch;\n        else if (!(Math.abs(gfp.interChRatio - -1) > 0))\n            gfp.interChRatio = abr_switch_map[r].interch;\n        // SET_OPTION(interChRatio, abr_switch_map[r].interch, -1);\n\n        return preset;\n    }\n\n    this.apply_preset = function(gfp, preset, enforce) {\n        /* translate legacy presets */\n        switch (preset) {\n            case Lame.R3MIX:\n            {\n                preset = Lame.V3;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.MEDIUM:\n            {\n                preset = Lame.V4;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.MEDIUM_FAST:\n            {\n                preset = Lame.V4;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.STANDARD:\n            {\n                preset = Lame.V2;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.STANDARD_FAST:\n            {\n                preset = Lame.V2;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.EXTREME:\n            {\n                preset = Lame.V0;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.EXTREME_FAST:\n            {\n                preset = Lame.V0;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.INSANE:\n            {\n                preset = 320;\n                gfp.preset = preset;\n                apply_abr_preset(gfp, preset, enforce);\n                gfp.VBR = VbrMode.vbr_off;\n                return preset;\n            }\n        }\n\n        gfp.preset = preset;\n        {\n            switch (preset) {\n                case Lame.V9:\n                    apply_vbr_preset(gfp, 9, enforce);\n                    return preset;\n                case Lame.V8:\n                    apply_vbr_preset(gfp, 8, enforce);\n                    return preset;\n                case Lame.V7:\n                    apply_vbr_preset(gfp, 7, enforce);\n                    return preset;\n                case Lame.V6:\n                    apply_vbr_preset(gfp, 6, enforce);\n                    return preset;\n                case Lame.V5:\n                    apply_vbr_preset(gfp, 5, enforce);\n                    return preset;\n                case Lame.V4:\n                    apply_vbr_preset(gfp, 4, enforce);\n                    return preset;\n                case Lame.V3:\n                    apply_vbr_preset(gfp, 3, enforce);\n                    return preset;\n                case Lame.V2:\n                    apply_vbr_preset(gfp, 2, enforce);\n                    return preset;\n                case Lame.V1:\n                    apply_vbr_preset(gfp, 1, enforce);\n                    return preset;\n                case Lame.V0:\n                    apply_vbr_preset(gfp, 0, enforce);\n                    return preset;\n                default:\n                    break;\n            }\n        }\n        if (8 <= preset && preset <= 320) {\n            return apply_abr_preset(gfp, preset, enforce);\n        }\n\n        /* no corresponding preset found */\n        gfp.preset = 0;\n        return preset;\n    }\n\n    // Rest from getset.c:\n\n    /**\n     * VBR quality level.<BR>\n     * 0 = highest<BR>\n     * 9 = lowest\n     */\n    function lame_set_VBR_q(gfp, VBR_q) {\n        var ret = 0;\n\n        if (0 > VBR_q) {\n            /* Unknown VBR quality level! */\n            ret = -1;\n            VBR_q = 0;\n        }\n        if (9 < VBR_q) {\n            ret = -1;\n            VBR_q = 9;\n        }\n\n        gfp.VBR_q = VBR_q;\n        gfp.VBR_q_frac = 0;\n        return ret;\n    }\n\n}\n\nmodule.exports = Presets;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\nvar IIISideInfo = require('./IIISideInfo.js');\nvar ScaleFac = require('./ScaleFac.js');\nvar NsPsy = require('./NsPsy.js');\nvar VBRSeekInfo = require('./VBRSeekInfo.js');\nvar III_psy_xmin = require('./III_psy_xmin.js');\nvar Encoder = require('./Encoder.js');\nvar L3Side = require('./L3Side.js');\nLameInternalFlags.MFSIZE = 3 * 1152 + Encoder.ENCDELAY - Encoder.MDCTDELAY;\nLameInternalFlags.MAX_HEADER_BUF = 256;\nLameInternalFlags.MAX_BITS_PER_CHANNEL = 4095;\nLameInternalFlags.MAX_BITS_PER_GRANULE = 7680;\nLameInternalFlags.BPC = 320;\nfunction LameInternalFlags() {\n  var MAX_HEADER_LEN = 40;\n\n  /********************************************************************\n   * internal variables NOT set by calling program, and should not be *\n   * modified by the calling program *\n   ********************************************************************/\n\n  /**\n   * Some remarks to the Class_ID field: The Class ID is an Identifier for a\n   * pointer to this struct. It is very unlikely that a pointer to\n   * lame_global_flags has the same 32 bits in it's structure (large and other\n   * special properties, for instance prime).\n   *\n   * To test that the structure is right and initialized, use: if ( gfc .\n   * Class_ID == LAME_ID ) ... Other remark: If you set a flag to 0 for uninit\n   * data and 1 for init data, the right test should be \"if (flag == 1)\" and\n   * NOT \"if (flag)\". Unintended modification of this element will be\n   * otherwise misinterpreted as an init.\n   */\n  this.Class_ID = 0;\n  this.lame_encode_frame_init = 0;\n  this.iteration_init_init = 0;\n  this.fill_buffer_resample_init = 0;\n\n  //public float mfbuf[][] = new float[2][MFSIZE];\n  this.mfbuf = new_float_n([2, LameInternalFlags.MFSIZE]);\n\n  /**\n   * granules per frame\n   */\n  this.mode_gr = 0;\n  /**\n   * number of channels in the input data stream (PCM or decoded PCM)\n   */\n  this.channels_in = 0;\n  /**\n   * number of channels in the output data stream (not used for decoding)\n   */\n  this.channels_out = 0;\n  /**\n   * input_samp_rate/output_samp_rate\n   */\n  //public double resample_ratio;\n  this.resample_ratio = 0.;\n  this.mf_samples_to_encode = 0;\n  this.mf_size = 0;\n  /**\n   * min bitrate index\n   */\n  this.VBR_min_bitrate = 0;\n  /**\n   * max bitrate index\n   */\n  this.VBR_max_bitrate = 0;\n  this.bitrate_index = 0;\n  this.samplerate_index = 0;\n  this.mode_ext = 0;\n\n  /* lowpass and highpass filter control */\n  /**\n   * normalized frequency bounds of passband\n   */\n  this.lowpass1 = 0.;\n  this.lowpass2 = 0.;\n  /**\n   * normalized frequency bounds of passband\n   */\n  this.highpass1 = 0.;\n  this.highpass2 = 0.;\n\n  /**\n   * 0 = none 1 = ISO AAC model 2 = allow scalefac_select=1\n   */\n  this.noise_shaping = 0;\n\n  /**\n   * 0 = ISO model: amplify all distorted bands<BR>\n   * 1 = amplify within 50% of max (on db scale)<BR>\n   * 2 = amplify only most distorted band<BR>\n   * 3 = method 1 and refine with method 2<BR>\n   */\n  this.noise_shaping_amp = 0;\n  /**\n   * 0 = no substep<BR>\n   * 1 = use substep shaping at last step(VBR only)<BR>\n   * (not implemented yet)<BR>\n   * 2 = use substep inside loop<BR>\n   * 3 = use substep inside loop and last step<BR>\n   */\n  this.substep_shaping = 0;\n\n  /**\n   * 1 = gpsycho. 0 = none\n   */\n  this.psymodel = 0;\n  /**\n   * 0 = stop at over=0, all scalefacs amplified or<BR>\n   * a scalefac has reached max value<BR>\n   * 1 = stop when all scalefacs amplified or a scalefac has reached max value<BR>\n   * 2 = stop when all scalefacs amplified\n   */\n  this.noise_shaping_stop = 0;\n\n  /**\n   * 0 = no, 1 = yes\n   */\n  this.subblock_gain = 0;\n  /**\n   * 0 = no. 1=outside loop 2=inside loop(slow)\n   */\n  this.use_best_huffman = 0;\n\n  /**\n   * 0 = stop early after 0 distortion found. 1 = full search\n   */\n  this.full_outer_loop = 0;\n\n  //public IIISideInfo l3_side = new IIISideInfo();\n  this.l3_side = new IIISideInfo();\n  this.ms_ratio = new_float(2);\n\n  /* used for padding */\n  /**\n   * padding for the current frame?\n   */\n  this.padding = 0;\n  this.frac_SpF = 0;\n  this.slot_lag = 0;\n\n  /**\n   * optional ID3 tags\n   */\n  //public ID3TagSpec tag_spec;\n  this.tag_spec = null;\n  this.nMusicCRC = 0;\n\n  /* variables used by Quantize */\n  //public int OldValue[] = new int[2];\n  this.OldValue = new_int(2);\n  //public int CurrentStep[] = new int[2];\n  this.CurrentStep = new_int(2);\n  this.masking_lower = 0.;\n  //public int bv_scf[] = new int[576];\n  this.bv_scf = new_int(576);\n  //public int pseudohalf[] = new int[L3Side.SFBMAX];\n  this.pseudohalf = new_int(L3Side.SFBMAX);\n\n  /**\n   * will be set in lame_init_params\n   */\n  this.sfb21_extra = false;\n\n  /* BPC = maximum number of filter convolution windows to precompute */\n  //public float[][] inbuf_old = new float[2][];\n  this.inbuf_old = new Array(2);\n  //public float[][] blackfilt = new float[2 * BPC + 1][];\n  this.blackfilt = new Array(2 * LameInternalFlags.BPC + 1);\n  //public double itime[] = new double[2];\n  this.itime = new_double(2);\n  this.sideinfo_len = 0;\n\n  /* variables for newmdct.c */\n  //public float sb_sample[][][][] = new float[2][2][18][Encoder.SBLIMIT];\n  this.sb_sample = new_float_n([2, 2, 18, Encoder.SBLIMIT]);\n  this.amp_filter = new_float(32);\n\n  /* variables for BitStream */\n\n  /**\n   * <PRE>\n   * mpeg1: buffer=511 bytes  smallest frame: 96-38(sideinfo)=58\n   * max number of frames in reservoir:  8\n   * mpeg2: buffer=255 bytes.  smallest frame: 24-23bytes=1\n   * with VBR, if you are encoding all silence, it is possible to\n   * have 8kbs/24khz frames with 1byte of data each, which means we need\n   * to buffer up to 255 headers!\n   * </PRE>\n   */\n  /**\n   * also, max_header_buf has to be a power of two\n   */\n  /**\n   * max size of header is 38\n   */\n\n  function Header() {\n    this.write_timing = 0;\n    this.ptr = 0;\n    //public byte buf[] = new byte[MAX_HEADER_LEN];\n    this.buf = new_byte(MAX_HEADER_LEN);\n  }\n  this.header = new Array(LameInternalFlags.MAX_HEADER_BUF);\n  this.h_ptr = 0;\n  this.w_ptr = 0;\n  this.ancillary_flag = 0;\n\n  /* variables for Reservoir */\n  /**\n   * in bits\n   */\n  this.ResvSize = 0;\n  /**\n   * in bits\n   */\n  this.ResvMax = 0;\n\n  //public ScaleFac scalefac_band = new ScaleFac();\n  this.scalefac_band = new ScaleFac();\n\n  /* daa from PsyModel */\n  /* The static variables \"r\", \"phi_sav\", \"new\", \"old\" and \"oldest\" have */\n  /* to be remembered for the unpredictability measure. For \"r\" and */\n  /* \"phi_sav\", the first index from the left is the channel select and */\n  /* the second index is the \"age\" of the data. */\n  this.minval_l = new_float(Encoder.CBANDS);\n  this.minval_s = new_float(Encoder.CBANDS);\n  this.nb_1 = new_float_n([4, Encoder.CBANDS]);\n  this.nb_2 = new_float_n([4, Encoder.CBANDS]);\n  this.nb_s1 = new_float_n([4, Encoder.CBANDS]);\n  this.nb_s2 = new_float_n([4, Encoder.CBANDS]);\n  this.s3_ss = null;\n  this.s3_ll = null;\n  this.decay = 0.;\n\n  //public III_psy_xmin[] thm = new III_psy_xmin[4];\n  //public III_psy_xmin[] en = new III_psy_xmin[4];\n  this.thm = new Array(4);\n  this.en = new Array(4);\n\n  /**\n   * fft and energy calculation\n   */\n  this.tot_ener = new_float(4);\n\n  /* loudness calculation (for adaptive threshold of hearing) */\n  /**\n   * loudness^2 approx. per granule and channel\n   */\n  this.loudness_sq = new_float_n([2, 2]);\n  /**\n   * account for granule delay of L3psycho_anal\n   */\n  this.loudness_sq_save = new_float(2);\n\n  /**\n   * Scale Factor Bands\n   */\n  this.mld_l = new_float(Encoder.SBMAX_l);\n  this.mld_s = new_float(Encoder.SBMAX_s);\n  this.bm_l = new_int(Encoder.SBMAX_l);\n  this.bo_l = new_int(Encoder.SBMAX_l);\n  this.bm_s = new_int(Encoder.SBMAX_s);\n  this.bo_s = new_int(Encoder.SBMAX_s);\n  this.npart_l = 0;\n  this.npart_s = 0;\n  this.s3ind = new_int_n([Encoder.CBANDS, 2]);\n  this.s3ind_s = new_int_n([Encoder.CBANDS, 2]);\n  this.numlines_s = new_int(Encoder.CBANDS);\n  this.numlines_l = new_int(Encoder.CBANDS);\n  this.rnumlines_l = new_float(Encoder.CBANDS);\n  this.mld_cb_l = new_float(Encoder.CBANDS);\n  this.mld_cb_s = new_float(Encoder.CBANDS);\n  this.numlines_s_num1 = 0;\n  this.numlines_l_num1 = 0;\n\n  /* ratios */\n  this.pe = new_float(4);\n  this.ms_ratio_s_old = 0.;\n  this.ms_ratio_l_old = 0.;\n  this.ms_ener_ratio_old = 0.;\n\n  /**\n   * block type\n   */\n  this.blocktype_old = new_int(2);\n\n  /**\n   * variables used for --nspsytune\n   */\n  this.nsPsy = new NsPsy();\n\n  /**\n   * used for Xing VBR header\n   */\n  this.VBR_seek_table = new VBRSeekInfo();\n\n  /**\n   * all ATH related stuff\n   */\n  //public ATH ATH;\n  this.ATH = null;\n  this.PSY = null;\n  this.nogap_total = 0;\n  this.nogap_current = 0;\n\n  /* ReplayGain */\n  this.decode_on_the_fly = true;\n  this.findReplayGain = true;\n  this.findPeakSample = true;\n  this.PeakSample = 0.;\n  this.RadioGain = 0;\n  this.AudiophileGain = 0;\n  //public ReplayGain rgdata;\n  this.rgdata = null;\n\n  /**\n   * gain change required for preventing clipping\n   */\n  this.noclipGainChange = 0;\n  /**\n   * user-specified scale factor required for preventing clipping\n   */\n  this.noclipScale = 0.;\n\n  /* simple statistics */\n  this.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\n  /**\n   * norm/start/short/stop/mixed(short)/sum\n   */\n  this.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\n\n  //public PlottingData pinfo;\n  //public MPGLib.mpstr_tag hip;\n  this.pinfo = null;\n  this.hip = null;\n  this.in_buffer_nsamples = 0;\n  //public float[] in_buffer_0;\n  //public float[] in_buffer_1;\n  this.in_buffer_0 = null;\n  this.in_buffer_1 = null;\n\n  //public IIterationLoop iteration_loop;\n  this.iteration_loop = null;\n  for (var i = 0; i < this.en.length; i++) {\n    this.en[i] = new III_psy_xmin();\n  }\n  for (var i = 0; i < this.thm.length; i++) {\n    this.thm[i] = new III_psy_xmin();\n  }\n  for (var i = 0; i < this.header.length; i++) {\n    this.header[i] = new Header();\n  }\n}\nmodule.exports = LameInternalFlags;","map":{"version":3,"names":["common","require","System","VbrMode","Float","ShortBlock","Util","Arrays","new_array_n","new_byte","new_double","new_float","new_float_n","new_int","new_int_n","assert","IIISideInfo","ScaleFac","NsPsy","VBRSeekInfo","III_psy_xmin","Encoder","L3Side","LameInternalFlags","MFSIZE","ENCDELAY","MDCTDELAY","MAX_HEADER_BUF","MAX_BITS_PER_CHANNEL","MAX_BITS_PER_GRANULE","BPC","MAX_HEADER_LEN","Class_ID","lame_encode_frame_init","iteration_init_init","fill_buffer_resample_init","mfbuf","mode_gr","channels_in","channels_out","resample_ratio","mf_samples_to_encode","mf_size","VBR_min_bitrate","VBR_max_bitrate","bitrate_index","samplerate_index","mode_ext","lowpass1","lowpass2","highpass1","highpass2","noise_shaping","noise_shaping_amp","substep_shaping","psymodel","noise_shaping_stop","subblock_gain","use_best_huffman","full_outer_loop","l3_side","ms_ratio","padding","frac_SpF","slot_lag","tag_spec","nMusicCRC","OldValue","CurrentStep","masking_lower","bv_scf","pseudohalf","SFBMAX","sfb21_extra","inbuf_old","Array","blackfilt","itime","sideinfo_len","sb_sample","SBLIMIT","amp_filter","Header","write_timing","ptr","buf","header","h_ptr","w_ptr","ancillary_flag","ResvSize","ResvMax","scalefac_band","minval_l","CBANDS","minval_s","nb_1","nb_2","nb_s1","nb_s2","s3_ss","s3_ll","decay","thm","en","tot_ener","loudness_sq","loudness_sq_save","mld_l","SBMAX_l","mld_s","SBMAX_s","bm_l","bo_l","bm_s","bo_s","npart_l","npart_s","s3ind","s3ind_s","numlines_s","numlines_l","rnumlines_l","mld_cb_l","mld_cb_s","numlines_s_num1","numlines_l_num1","pe","ms_ratio_s_old","ms_ratio_l_old","ms_ener_ratio_old","blocktype_old","nsPsy","VBR_seek_table","ATH","PSY","nogap_total","nogap_current","decode_on_the_fly","findReplayGain","findPeakSample","PeakSample","RadioGain","AudiophileGain","rgdata","noclipGainChange","noclipScale","bitrate_stereoMode_Hist","bitrate_blockType_Hist","pinfo","hip","in_buffer_nsamples","in_buffer_0","in_buffer_1","iteration_loop","i","length","module","exports"],"sources":["D:/代码/vscodeProjects/AiEducation/vue_aieducation/node_modules/lamejs/src/js/LameInternalFlags.js"],"sourcesContent":["var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar IIISideInfo = require('./IIISideInfo.js');\nvar ScaleFac = require('./ScaleFac.js');\nvar NsPsy = require('./NsPsy.js');\nvar VBRSeekInfo = require('./VBRSeekInfo.js');\nvar III_psy_xmin = require('./III_psy_xmin.js');\nvar Encoder = require('./Encoder.js');\nvar L3Side = require('./L3Side.js');\n\n\nLameInternalFlags.MFSIZE = (3 * 1152 + Encoder.ENCDELAY - Encoder.MDCTDELAY);\nLameInternalFlags.MAX_HEADER_BUF = 256;\nLameInternalFlags.MAX_BITS_PER_CHANNEL = 4095;\nLameInternalFlags.MAX_BITS_PER_GRANULE = 7680;\nLameInternalFlags.BPC = 320;\n\nfunction LameInternalFlags() {\n    var MAX_HEADER_LEN = 40;\n\n\n    /********************************************************************\n     * internal variables NOT set by calling program, and should not be *\n     * modified by the calling program *\n     ********************************************************************/\n\n    /**\n     * Some remarks to the Class_ID field: The Class ID is an Identifier for a\n     * pointer to this struct. It is very unlikely that a pointer to\n     * lame_global_flags has the same 32 bits in it's structure (large and other\n     * special properties, for instance prime).\n     *\n     * To test that the structure is right and initialized, use: if ( gfc .\n     * Class_ID == LAME_ID ) ... Other remark: If you set a flag to 0 for uninit\n     * data and 1 for init data, the right test should be \"if (flag == 1)\" and\n     * NOT \"if (flag)\". Unintended modification of this element will be\n     * otherwise misinterpreted as an init.\n     */\n    this.Class_ID = 0;\n\n    this.lame_encode_frame_init = 0;\n    this.iteration_init_init = 0;\n    this.fill_buffer_resample_init = 0;\n\n    //public float mfbuf[][] = new float[2][MFSIZE];\n    this.mfbuf = new_float_n([2, LameInternalFlags.MFSIZE]);\n\n    /**\n     * granules per frame\n     */\n    this.mode_gr = 0;\n    /**\n     * number of channels in the input data stream (PCM or decoded PCM)\n     */\n    this.channels_in = 0;\n    /**\n     * number of channels in the output data stream (not used for decoding)\n     */\n    this.channels_out = 0;\n    /**\n     * input_samp_rate/output_samp_rate\n     */\n        //public double resample_ratio;\n    this.resample_ratio = 0.;\n\n    this.mf_samples_to_encode = 0;\n    this.mf_size = 0;\n    /**\n     * min bitrate index\n     */\n    this.VBR_min_bitrate = 0;\n    /**\n     * max bitrate index\n     */\n    this.VBR_max_bitrate = 0;\n    this.bitrate_index = 0;\n    this.samplerate_index = 0;\n    this.mode_ext = 0;\n\n    /* lowpass and highpass filter control */\n    /**\n     * normalized frequency bounds of passband\n     */\n    this.lowpass1 = 0.;\n    this.lowpass2 = 0.;\n    /**\n     * normalized frequency bounds of passband\n     */\n    this.highpass1 = 0.;\n    this.highpass2 = 0.;\n\n    /**\n     * 0 = none 1 = ISO AAC model 2 = allow scalefac_select=1\n     */\n    this.noise_shaping = 0;\n\n    /**\n     * 0 = ISO model: amplify all distorted bands<BR>\n     * 1 = amplify within 50% of max (on db scale)<BR>\n     * 2 = amplify only most distorted band<BR>\n     * 3 = method 1 and refine with method 2<BR>\n     */\n    this.noise_shaping_amp = 0;\n    /**\n     * 0 = no substep<BR>\n     * 1 = use substep shaping at last step(VBR only)<BR>\n     * (not implemented yet)<BR>\n     * 2 = use substep inside loop<BR>\n     * 3 = use substep inside loop and last step<BR>\n     */\n    this.substep_shaping = 0;\n\n    /**\n     * 1 = gpsycho. 0 = none\n     */\n    this.psymodel = 0;\n    /**\n     * 0 = stop at over=0, all scalefacs amplified or<BR>\n     * a scalefac has reached max value<BR>\n     * 1 = stop when all scalefacs amplified or a scalefac has reached max value<BR>\n     * 2 = stop when all scalefacs amplified\n     */\n    this.noise_shaping_stop = 0;\n\n    /**\n     * 0 = no, 1 = yes\n     */\n    this.subblock_gain = 0;\n    /**\n     * 0 = no. 1=outside loop 2=inside loop(slow)\n     */\n    this.use_best_huffman = 0;\n\n    /**\n     * 0 = stop early after 0 distortion found. 1 = full search\n     */\n    this.full_outer_loop = 0;\n\n    //public IIISideInfo l3_side = new IIISideInfo();\n    this.l3_side = new IIISideInfo();\n    this.ms_ratio = new_float(2);\n\n    /* used for padding */\n    /**\n     * padding for the current frame?\n     */\n    this.padding = 0;\n    this.frac_SpF = 0;\n    this.slot_lag = 0;\n\n    /**\n     * optional ID3 tags\n     */\n        //public ID3TagSpec tag_spec;\n    this.tag_spec = null;\n    this.nMusicCRC = 0;\n\n    /* variables used by Quantize */\n    //public int OldValue[] = new int[2];\n    this.OldValue = new_int(2);\n    //public int CurrentStep[] = new int[2];\n    this.CurrentStep = new_int(2);\n\n    this.masking_lower = 0.;\n    //public int bv_scf[] = new int[576];\n    this.bv_scf = new_int(576);\n    //public int pseudohalf[] = new int[L3Side.SFBMAX];\n    this.pseudohalf = new_int(L3Side.SFBMAX);\n\n    /**\n     * will be set in lame_init_params\n     */\n    this.sfb21_extra = false;\n\n    /* BPC = maximum number of filter convolution windows to precompute */\n    //public float[][] inbuf_old = new float[2][];\n    this.inbuf_old = new Array(2);\n    //public float[][] blackfilt = new float[2 * BPC + 1][];\n    this.blackfilt = new Array(2 * LameInternalFlags.BPC + 1);\n    //public double itime[] = new double[2];\n    this.itime = new_double(2);\n    this.sideinfo_len = 0;\n\n    /* variables for newmdct.c */\n    //public float sb_sample[][][][] = new float[2][2][18][Encoder.SBLIMIT];\n    this.sb_sample = new_float_n([2, 2, 18, Encoder.SBLIMIT]);\n    this.amp_filter = new_float(32);\n\n    /* variables for BitStream */\n\n    /**\n     * <PRE>\n     * mpeg1: buffer=511 bytes  smallest frame: 96-38(sideinfo)=58\n     * max number of frames in reservoir:  8\n     * mpeg2: buffer=255 bytes.  smallest frame: 24-23bytes=1\n     * with VBR, if you are encoding all silence, it is possible to\n     * have 8kbs/24khz frames with 1byte of data each, which means we need\n     * to buffer up to 255 headers!\n     * </PRE>\n     */\n    /**\n     * also, max_header_buf has to be a power of two\n     */\n    /**\n     * max size of header is 38\n     */\n\n    function Header() {\n        this.write_timing = 0;\n        this.ptr = 0;\n        //public byte buf[] = new byte[MAX_HEADER_LEN];\n        this.buf = new_byte(MAX_HEADER_LEN);\n    }\n\n    this.header = new Array(LameInternalFlags.MAX_HEADER_BUF);\n\n    this.h_ptr = 0;\n    this.w_ptr = 0;\n    this.ancillary_flag = 0;\n\n    /* variables for Reservoir */\n    /**\n     * in bits\n     */\n    this.ResvSize = 0;\n    /**\n     * in bits\n     */\n    this.ResvMax = 0;\n\n    //public ScaleFac scalefac_band = new ScaleFac();\n    this.scalefac_band = new ScaleFac();\n\n    /* daa from PsyModel */\n    /* The static variables \"r\", \"phi_sav\", \"new\", \"old\" and \"oldest\" have */\n    /* to be remembered for the unpredictability measure. For \"r\" and */\n    /* \"phi_sav\", the first index from the left is the channel select and */\n    /* the second index is the \"age\" of the data. */\n    this.minval_l = new_float(Encoder.CBANDS);\n    this.minval_s = new_float(Encoder.CBANDS);\n    this.nb_1 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_2 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_s1 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_s2 = new_float_n([4, Encoder.CBANDS]);\n    this.s3_ss = null;\n    this.s3_ll = null;\n    this.decay = 0.;\n\n    //public III_psy_xmin[] thm = new III_psy_xmin[4];\n    //public III_psy_xmin[] en = new III_psy_xmin[4];\n    this.thm = new Array(4);\n    this.en = new Array(4);\n\n    /**\n     * fft and energy calculation\n     */\n    this.tot_ener = new_float(4);\n\n    /* loudness calculation (for adaptive threshold of hearing) */\n    /**\n     * loudness^2 approx. per granule and channel\n     */\n    this.loudness_sq = new_float_n([2, 2]);\n    /**\n     * account for granule delay of L3psycho_anal\n     */\n    this.loudness_sq_save = new_float(2);\n\n    /**\n     * Scale Factor Bands\n     */\n    this.mld_l = new_float(Encoder.SBMAX_l);\n    this.mld_s = new_float(Encoder.SBMAX_s);\n    this.bm_l = new_int(Encoder.SBMAX_l);\n    this.bo_l = new_int(Encoder.SBMAX_l);\n    this.bm_s = new_int(Encoder.SBMAX_s);\n    this.bo_s = new_int(Encoder.SBMAX_s);\n    this.npart_l = 0;\n    this.npart_s = 0;\n\n    this.s3ind = new_int_n([Encoder.CBANDS, 2]);\n    this.s3ind_s = new_int_n([Encoder.CBANDS, 2]);\n\n    this.numlines_s = new_int(Encoder.CBANDS);\n    this.numlines_l = new_int(Encoder.CBANDS);\n    this.rnumlines_l = new_float(Encoder.CBANDS);\n    this.mld_cb_l = new_float(Encoder.CBANDS);\n    this.mld_cb_s = new_float(Encoder.CBANDS);\n    this.numlines_s_num1 = 0;\n    this.numlines_l_num1 = 0;\n\n    /* ratios */\n    this.pe = new_float(4);\n    this.ms_ratio_s_old = 0.;\n    this.ms_ratio_l_old = 0.;\n    this.ms_ener_ratio_old = 0.;\n\n    /**\n     * block type\n     */\n    this.blocktype_old = new_int(2);\n\n    /**\n     * variables used for --nspsytune\n     */\n    this.nsPsy = new NsPsy();\n\n    /**\n     * used for Xing VBR header\n     */\n    this.VBR_seek_table = new VBRSeekInfo();\n\n    /**\n     * all ATH related stuff\n     */\n        //public ATH ATH;\n    this.ATH = null;\n\n    this.PSY = null;\n\n    this.nogap_total = 0;\n    this.nogap_current = 0;\n\n    /* ReplayGain */\n    this.decode_on_the_fly = true;\n    this.findReplayGain = true;\n    this.findPeakSample = true;\n    this.PeakSample = 0.;\n    this.RadioGain = 0;\n    this.AudiophileGain = 0;\n    //public ReplayGain rgdata;\n    this.rgdata = null;\n\n    /**\n     * gain change required for preventing clipping\n     */\n    this.noclipGainChange = 0;\n    /**\n     * user-specified scale factor required for preventing clipping\n     */\n    this.noclipScale = 0.;\n\n    /* simple statistics */\n    this.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\n    /**\n     * norm/start/short/stop/mixed(short)/sum\n     */\n    this.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\n\n    //public PlottingData pinfo;\n    //public MPGLib.mpstr_tag hip;\n    this.pinfo = null;\n    this.hip = null;\n\n    this.in_buffer_nsamples = 0;\n    //public float[] in_buffer_0;\n    //public float[] in_buffer_1;\n    this.in_buffer_0 = null;\n    this.in_buffer_1 = null;\n\n    //public IIterationLoop iteration_loop;\n    this.iteration_loop = null;\n\n    for (var i = 0; i < this.en.length; i++) {\n        this.en[i] = new III_psy_xmin();\n    }\n    for (var i = 0; i < this.thm.length; i++) {\n        this.thm[i] = new III_psy_xmin();\n    }\n    for (var i = 0; i < this.header.length; i++) {\n        this.header[i] = new Header();\n    }\n\n}\n\nmodule.exports = LameInternalFlags;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
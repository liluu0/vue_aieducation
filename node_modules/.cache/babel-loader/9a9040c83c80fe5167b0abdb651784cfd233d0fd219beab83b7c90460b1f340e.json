{"ast":null,"code":"var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\nvar MeanBits = require('./MeanBits.js');\nvar Encoder = require('./Encoder.js');\nvar L3Side = require('./L3Side.js');\nvar LameInternalFlags = require('./LameInternalFlags.js');\nfunction CBRNewIterationLoop(_quantize) {\n  var quantize = _quantize;\n  this.quantize = quantize;\n  this.iteration_loop = function (gfp, pe, ms_ener_ratio, ratio) {\n    var gfc = gfp.internal_flags;\n    var l3_xmin = new_float(L3Side.SFBMAX);\n    var xrpow = new_float(576);\n    var targ_bits = new_int(2);\n    var mean_bits = 0,\n      max_bits;\n    var l3_side = gfc.l3_side;\n    var mb = new MeanBits(mean_bits);\n    this.quantize.rv.ResvFrameBegin(gfp, mb);\n    mean_bits = mb.bits;\n\n    /* quantize! */\n    for (var gr = 0; gr < gfc.mode_gr; gr++) {\n      /*\n       * calculate needed bits\n       */\n      max_bits = this.quantize.qupvt.on_pe(gfp, pe, targ_bits, mean_bits, gr, gr);\n      if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n        this.quantize.ms_convert(gfc.l3_side, gr);\n        this.quantize.qupvt.reduce_side(targ_bits, ms_ener_ratio[gr], mean_bits, max_bits);\n      }\n      for (var ch = 0; ch < gfc.channels_out; ch++) {\n        var adjust, masking_lower_db;\n        var cod_info = l3_side.tt[gr][ch];\n        if (cod_info.block_type != Encoder.SHORT_TYPE) {\n          // NORM, START or STOP type\n          adjust = 0;\n          masking_lower_db = gfc.PSY.mask_adjust - adjust;\n        } else {\n          adjust = 0;\n          masking_lower_db = gfc.PSY.mask_adjust_short - adjust;\n        }\n        gfc.masking_lower = Math.pow(10.0, masking_lower_db * 0.1);\n\n        /*\n         * init_outer_loop sets up cod_info, scalefac and xrpow\n         */\n        this.quantize.init_outer_loop(gfc, cod_info);\n        if (this.quantize.init_xrpow(gfc, cod_info, xrpow)) {\n          /*\n           * xr contains energy we will have to encode calculate the\n           * masking abilities find some good quantization in\n           * outer_loop\n           */\n          this.quantize.qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info, l3_xmin);\n          this.quantize.outer_loop(gfp, cod_info, l3_xmin, xrpow, ch, targ_bits[ch]);\n        }\n        this.quantize.iteration_finish_one(gfc, gr, ch);\n        assert(cod_info.part2_3_length <= LameInternalFlags.MAX_BITS_PER_CHANNEL);\n        assert(cod_info.part2_3_length <= targ_bits[ch]);\n      } /* for ch */\n    } /* for gr */\n\n    this.quantize.rv.ResvFrameEnd(gfc, mean_bits);\n  };\n}\nmodule.exports = CBRNewIterationLoop;","map":{"version":3,"names":["common","require","System","VbrMode","Float","ShortBlock","Util","Arrays","new_array_n","new_byte","new_double","new_float","new_float_n","new_int","new_int_n","assert","MeanBits","Encoder","L3Side","LameInternalFlags","CBRNewIterationLoop","_quantize","quantize","iteration_loop","gfp","pe","ms_ener_ratio","ratio","gfc","internal_flags","l3_xmin","SFBMAX","xrpow","targ_bits","mean_bits","max_bits","l3_side","mb","rv","ResvFrameBegin","bits","gr","mode_gr","qupvt","on_pe","mode_ext","MPG_MD_MS_LR","ms_convert","reduce_side","ch","channels_out","adjust","masking_lower_db","cod_info","tt","block_type","SHORT_TYPE","PSY","mask_adjust","mask_adjust_short","masking_lower","Math","pow","init_outer_loop","init_xrpow","calc_xmin","outer_loop","iteration_finish_one","part2_3_length","MAX_BITS_PER_CHANNEL","ResvFrameEnd","module","exports"],"sources":["D:/代码/vscodeProjects/AiEducation/vue_aieducation/node_modules/lamejs/src/js/CBRNewIterationLoop.js"],"sourcesContent":["var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar MeanBits = require('./MeanBits.js');\nvar Encoder = require('./Encoder.js');\nvar L3Side = require('./L3Side.js');\nvar LameInternalFlags = require('./LameInternalFlags.js');\n\nfunction CBRNewIterationLoop(_quantize)  {\n    var quantize = _quantize;\n    this.quantize = quantize;\n\tthis.iteration_loop = function(gfp, pe, ms_ener_ratio, ratio) {\n\t\tvar gfc = gfp.internal_flags;\n        var l3_xmin = new_float(L3Side.SFBMAX);\n\t\tvar xrpow = new_float(576);\n\t\tvar targ_bits = new_int(2);\n\t\tvar mean_bits = 0, max_bits;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tvar mb = new MeanBits(mean_bits);\n\t\tthis.quantize.rv.ResvFrameBegin(gfp, mb);\n\t\tmean_bits = mb.bits;\n\n\t\t/* quantize! */\n\t\tfor (var gr = 0; gr < gfc.mode_gr; gr++) {\n\n\t\t\t/*\n\t\t\t * calculate needed bits\n\t\t\t */\n\t\t\tmax_bits = this.quantize.qupvt.on_pe(gfp, pe, targ_bits, mean_bits,\n\t\t\t\t\tgr, gr);\n\n\t\t\tif (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n\t\t\t\tthis.quantize.ms_convert(gfc.l3_side, gr);\n\t\t\t\tthis.quantize.qupvt.reduce_side(targ_bits, ms_ener_ratio[gr],\n\t\t\t\t\t\tmean_bits, max_bits);\n\t\t\t}\n\n\t\t\tfor (var ch = 0; ch < gfc.channels_out; ch++) {\n\t\t\t\tvar adjust, masking_lower_db;\n\t\t\t\tvar cod_info = l3_side.tt[gr][ch];\n\n\t\t\t\tif (cod_info.block_type != Encoder.SHORT_TYPE) {\n\t\t\t\t\t// NORM, START or STOP type\n\t\t\t\t\tadjust = 0;\n\t\t\t\t\tmasking_lower_db = gfc.PSY.mask_adjust - adjust;\n\t\t\t\t} else {\n\t\t\t\t\tadjust = 0;\n\t\t\t\t\tmasking_lower_db = gfc.PSY.mask_adjust_short - adjust;\n\t\t\t\t}\n\t\t\t\tgfc.masking_lower =  Math.pow(10.0,\n\t\t\t\t\t\tmasking_lower_db * 0.1);\n\n\t\t\t\t/*\n\t\t\t\t * init_outer_loop sets up cod_info, scalefac and xrpow\n\t\t\t\t */\n\t\t\t\tthis.quantize.init_outer_loop(gfc, cod_info);\n\t\t\t\tif (this.quantize.init_xrpow(gfc, cod_info, xrpow)) {\n\t\t\t\t\t/*\n\t\t\t\t\t * xr contains energy we will have to encode calculate the\n\t\t\t\t\t * masking abilities find some good quantization in\n\t\t\t\t\t * outer_loop\n\t\t\t\t\t */\n\t\t\t\t\tthis.quantize.qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\n\t\t\t\t\t\t\tl3_xmin);\n\t\t\t\t\tthis.quantize.outer_loop(gfp, cod_info, l3_xmin, xrpow, ch,\n\t\t\t\t\t\t\ttarg_bits[ch]);\n\t\t\t\t}\n\n\t\t\t\tthis.quantize.iteration_finish_one(gfc, gr, ch);\n\t\t\t\tassert (cod_info.part2_3_length <= LameInternalFlags.MAX_BITS_PER_CHANNEL);\n\t\t\t\tassert (cod_info.part2_3_length <= targ_bits[ch]);\n\t\t\t} /* for ch */\n\t\t} /* for gr */\n\n\t\tthis.quantize.rv.ResvFrameEnd(gfc, mean_bits);\n\t}\n}\nmodule.exports = CBRNewIterationLoop;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
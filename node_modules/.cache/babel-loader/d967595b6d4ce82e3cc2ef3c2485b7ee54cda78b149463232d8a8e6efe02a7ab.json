{"ast":null,"code":"require(\"core-js/modules/es.array-buffer.detached.js\");\nrequire(\"core-js/modules/es.array-buffer.transfer.js\");\nrequire(\"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\");\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\n//package mp3;\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\nvar L3Side = require('./L3Side.js');\nfunction GrInfo() {\n  //float xr[] = new float[576];\n  this.xr = new_float(576);\n  //int l3_enc[] = new int[576];\n  this.l3_enc = new_int(576);\n  //int scalefac[] = new int[L3Side.SFBMAX];\n  this.scalefac = new_int(L3Side.SFBMAX);\n  this.xrpow_max = 0.;\n  this.part2_3_length = 0;\n  this.big_values = 0;\n  this.count1 = 0;\n  this.global_gain = 0;\n  this.scalefac_compress = 0;\n  this.block_type = 0;\n  this.mixed_block_flag = 0;\n  this.table_select = new_int(3);\n  this.subblock_gain = new_int(3 + 1);\n  this.region0_count = 0;\n  this.region1_count = 0;\n  this.preflag = 0;\n  this.scalefac_scale = 0;\n  this.count1table_select = 0;\n  this.part2_length = 0;\n  this.sfb_lmax = 0;\n  this.sfb_smin = 0;\n  this.psy_lmax = 0;\n  this.sfbmax = 0;\n  this.psymax = 0;\n  this.sfbdivide = 0;\n  this.width = new_int(L3Side.SFBMAX);\n  this.window = new_int(L3Side.SFBMAX);\n  this.count1bits = 0;\n  /**\n   * added for LSF\n   */\n  this.sfb_partition_table = null;\n  this.slen = new_int(4);\n  this.max_nonzero_coeff = 0;\n  var self = this;\n  function clone_int(array) {\n    return new Int32Array(array);\n  }\n  function clone_float(array) {\n    return new Float32Array(array);\n  }\n  this.assign = function (other) {\n    self.xr = clone_float(other.xr); //.slice(0); //clone();\n    self.l3_enc = clone_int(other.l3_enc); //.slice(0); //clone();\n    self.scalefac = clone_int(other.scalefac); //.slice(0); //clone();\n    self.xrpow_max = other.xrpow_max;\n    self.part2_3_length = other.part2_3_length;\n    self.big_values = other.big_values;\n    self.count1 = other.count1;\n    self.global_gain = other.global_gain;\n    self.scalefac_compress = other.scalefac_compress;\n    self.block_type = other.block_type;\n    self.mixed_block_flag = other.mixed_block_flag;\n    self.table_select = clone_int(other.table_select); //.slice(0); //clone();\n    self.subblock_gain = clone_int(other.subblock_gain); //.slice(0); //.clone();\n    self.region0_count = other.region0_count;\n    self.region1_count = other.region1_count;\n    self.preflag = other.preflag;\n    self.scalefac_scale = other.scalefac_scale;\n    self.count1table_select = other.count1table_select;\n    self.part2_length = other.part2_length;\n    self.sfb_lmax = other.sfb_lmax;\n    self.sfb_smin = other.sfb_smin;\n    self.psy_lmax = other.psy_lmax;\n    self.sfbmax = other.sfbmax;\n    self.psymax = other.psymax;\n    self.sfbdivide = other.sfbdivide;\n    self.width = clone_int(other.width); //.slice(0); //.clone();\n    self.window = clone_int(other.window); //.slice(0); //.clone();\n    self.count1bits = other.count1bits;\n    self.sfb_partition_table = other.sfb_partition_table.slice(0); //.clone();\n    self.slen = clone_int(other.slen); //.slice(0); //.clone();\n    self.max_nonzero_coeff = other.max_nonzero_coeff;\n  };\n}\nmodule.exports = GrInfo;","map":{"version":3,"names":["common","require","System","VbrMode","Float","ShortBlock","Util","Arrays","new_array_n","new_byte","new_double","new_float","new_float_n","new_int","new_int_n","assert","L3Side","GrInfo","xr","l3_enc","scalefac","SFBMAX","xrpow_max","part2_3_length","big_values","count1","global_gain","scalefac_compress","block_type","mixed_block_flag","table_select","subblock_gain","region0_count","region1_count","preflag","scalefac_scale","count1table_select","part2_length","sfb_lmax","sfb_smin","psy_lmax","sfbmax","psymax","sfbdivide","width","window","count1bits","sfb_partition_table","slen","max_nonzero_coeff","self","clone_int","array","Int32Array","clone_float","Float32Array","assign","other","slice","module","exports"],"sources":["D:/代码/vscodeProjects/AiEducation/vue_aieducation/node_modules/lamejs/src/js/GrInfo.js"],"sourcesContent":["//package mp3;\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar L3Side = require('./L3Side.js');\n\nfunction GrInfo() {\n    //float xr[] = new float[576];\n    this.xr = new_float(576);\n    //int l3_enc[] = new int[576];\n    this.l3_enc = new_int(576);\n    //int scalefac[] = new int[L3Side.SFBMAX];\n    this.scalefac = new_int(L3Side.SFBMAX);\n    this.xrpow_max = 0.;\n\n    this.part2_3_length = 0;\n    this.big_values = 0;\n    this.count1 = 0;\n    this.global_gain = 0;\n    this.scalefac_compress = 0;\n    this.block_type = 0;\n    this.mixed_block_flag = 0;\n    this.table_select = new_int(3);\n    this.subblock_gain = new_int(3 + 1);\n    this.region0_count = 0;\n    this.region1_count = 0;\n    this.preflag = 0;\n    this.scalefac_scale = 0;\n    this.count1table_select = 0;\n\n    this.part2_length = 0;\n    this.sfb_lmax = 0;\n    this.sfb_smin = 0;\n    this.psy_lmax = 0;\n    this.sfbmax = 0;\n    this.psymax = 0;\n    this.sfbdivide = 0;\n    this.width = new_int(L3Side.SFBMAX);\n    this.window = new_int(L3Side.SFBMAX);\n    this.count1bits = 0;\n    /**\n     * added for LSF\n     */\n    this.sfb_partition_table = null;\n    this.slen = new_int(4);\n\n    this.max_nonzero_coeff = 0;\n\n    var self = this;\n    function clone_int(array) {\n        return new Int32Array(array);\n    }\n    function clone_float(array) {\n        return new Float32Array(array);\n    }\n    this.assign = function (other) {\n        self.xr = clone_float(other.xr); //.slice(0); //clone();\n        self.l3_enc = clone_int(other.l3_enc); //.slice(0); //clone();\n        self.scalefac = clone_int(other.scalefac);//.slice(0); //clone();\n        self.xrpow_max = other.xrpow_max;\n\n        self.part2_3_length = other.part2_3_length;\n        self.big_values = other.big_values;\n        self.count1 = other.count1;\n        self.global_gain = other.global_gain;\n        self.scalefac_compress = other.scalefac_compress;\n        self.block_type = other.block_type;\n        self.mixed_block_flag = other.mixed_block_flag;\n        self.table_select = clone_int(other.table_select);//.slice(0); //clone();\n        self.subblock_gain = clone_int(other.subblock_gain); //.slice(0); //.clone();\n        self.region0_count = other.region0_count;\n        self.region1_count = other.region1_count;\n        self.preflag = other.preflag;\n        self.scalefac_scale = other.scalefac_scale;\n        self.count1table_select = other.count1table_select;\n\n        self.part2_length = other.part2_length;\n        self.sfb_lmax = other.sfb_lmax;\n        self.sfb_smin = other.sfb_smin;\n        self.psy_lmax = other.psy_lmax;\n        self.sfbmax = other.sfbmax;\n        self.psymax = other.psymax;\n        self.sfbdivide = other.sfbdivide;\n        self.width = clone_int(other.width); //.slice(0); //.clone();\n        self.window = clone_int(other.window); //.slice(0); //.clone();\n        self.count1bits = other.count1bits;\n\n        self.sfb_partition_table = other.sfb_partition_table.slice(0); //.clone();\n        self.slen = clone_int(other.slen); //.slice(0); //.clone();\n        self.max_nonzero_coeff = other.max_nonzero_coeff;\n    }\n}\n\nmodule.exports = GrInfo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
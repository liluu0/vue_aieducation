{"ast":null,"code":"var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar new_short_n = common.new_short_n;\nvar assert = common.assert;\nvar PsyModel = require('./PsyModel.js');\nvar LameGlobalFlags = require('./LameGlobalFlags.js');\nvar LameInternalFlags = require('./LameInternalFlags.js');\nvar ATH = require('./ATH.js');\nvar ReplayGain = require('./ReplayGain.js');\nvar CBRNewIterationLoop = require('./CBRNewIterationLoop.js');\nvar BitStream = require('./BitStream.js');\nvar Tables = require('./Tables.js');\nvar Encoder = require('./Encoder.js');\nfunction Lame() {\n  var self = this;\n  var LAME_MAXALBUMART = 128 * 1024;\n  Lame.V9 = 410;\n  Lame.V8 = 420;\n  Lame.V7 = 430;\n  Lame.V6 = 440;\n  Lame.V5 = 450;\n  Lame.V4 = 460;\n  Lame.V3 = 470;\n  Lame.V2 = 480;\n  Lame.V1 = 490;\n  Lame.V0 = 500;\n\n  /* still there for compatibility */\n\n  Lame.R3MIX = 1000;\n  Lame.STANDARD = 1001;\n  Lame.EXTREME = 1002;\n  Lame.INSANE = 1003;\n  Lame.STANDARD_FAST = 1004;\n  Lame.EXTREME_FAST = 1005;\n  Lame.MEDIUM = 1006;\n  Lame.MEDIUM_FAST = 1007;\n\n  /**\n   * maximum size of mp3buffer needed if you encode at most 1152 samples for\n   * each call to lame_encode_buffer. see lame_encode_buffer() below\n   * (LAME_MAXMP3BUFFER is now obsolete)\n   */\n  var LAME_MAXMP3BUFFER = 16384 + LAME_MAXALBUMART;\n  Lame.LAME_MAXMP3BUFFER = LAME_MAXMP3BUFFER;\n  var ga;\n  var bs;\n  var p;\n  var qupvt;\n  var qu;\n  var psy = new PsyModel();\n  var vbr;\n  var ver;\n  var id3;\n  var mpglib;\n  this.enc = new Encoder();\n  this.setModules = function (_ga, _bs, _p, _qupvt, _qu, _vbr, _ver, _id3, _mpglib) {\n    ga = _ga;\n    bs = _bs;\n    p = _p;\n    qupvt = _qupvt;\n    qu = _qu;\n    vbr = _vbr;\n    ver = _ver;\n    id3 = _id3;\n    mpglib = _mpglib;\n    this.enc.setModules(bs, psy, qupvt, vbr);\n  };\n\n  /**\n   * PSY Model related stuff\n   */\n  function PSY() {\n    /**\n     * The dbQ stuff.\n     */\n    this.mask_adjust = 0.;\n    /**\n     * The dbQ stuff.\n     */\n    this.mask_adjust_short = 0.;\n    /* at transition from one scalefactor band to next */\n    /**\n     * Band weight long scalefactor bands.\n     */\n    this.bo_l_weight = new_float(Encoder.SBMAX_l);\n    /**\n     * Band weight short scalefactor bands.\n     */\n    this.bo_s_weight = new_float(Encoder.SBMAX_s);\n  }\n  function LowPassHighPass() {\n    this.lowerlimit = 0.;\n  }\n  function BandPass(bitrate, lPass) {\n    this.lowpass = lPass;\n  }\n  var LAME_ID = 0xFFF88E3B;\n  function lame_init_old(gfp) {\n    var gfc;\n    gfp.class_id = LAME_ID;\n    gfc = gfp.internal_flags = new LameInternalFlags();\n\n    /* Global flags. set defaults here for non-zero values */\n    /* see lame.h for description */\n    /*\n     * set integer values to -1 to mean that LAME will compute the best\n     * value, UNLESS the calling program as set it (and the value is no\n     * longer -1)\n     */\n\n    gfp.mode = MPEGMode.NOT_SET;\n    gfp.original = 1;\n    gfp.in_samplerate = 44100;\n    gfp.num_channels = 2;\n    gfp.num_samples = -1;\n    gfp.bWriteVbrTag = true;\n    gfp.quality = -1;\n    gfp.short_blocks = null;\n    gfc.subblock_gain = -1;\n    gfp.lowpassfreq = 0;\n    gfp.highpassfreq = 0;\n    gfp.lowpasswidth = -1;\n    gfp.highpasswidth = -1;\n    gfp.VBR = VbrMode.vbr_off;\n    gfp.VBR_q = 4;\n    gfp.ATHcurve = -1;\n    gfp.VBR_mean_bitrate_kbps = 128;\n    gfp.VBR_min_bitrate_kbps = 0;\n    gfp.VBR_max_bitrate_kbps = 0;\n    gfp.VBR_hard_min = 0;\n    gfc.VBR_min_bitrate = 1;\n    /* not 0 ????? */\n    gfc.VBR_max_bitrate = 13;\n    /* not 14 ????? */\n\n    gfp.quant_comp = -1;\n    gfp.quant_comp_short = -1;\n    gfp.msfix = -1;\n    gfc.resample_ratio = 1;\n    gfc.OldValue[0] = 180;\n    gfc.OldValue[1] = 180;\n    gfc.CurrentStep[0] = 4;\n    gfc.CurrentStep[1] = 4;\n    gfc.masking_lower = 1;\n    gfc.nsPsy.attackthre = -1;\n    gfc.nsPsy.attackthre_s = -1;\n    gfp.scale = -1;\n    gfp.athaa_type = -1;\n    gfp.ATHtype = -1;\n    /* default = -1 = set in lame_init_params */\n    gfp.athaa_loudapprox = -1;\n    /* 1 = flat loudness approx. (total energy) */\n    /* 2 = equal loudness curve */\n    gfp.athaa_sensitivity = 0.0;\n    /* no offset */\n    gfp.useTemporal = null;\n    gfp.interChRatio = -1;\n\n    /*\n     * The reason for int mf_samples_to_encode = ENCDELAY + POSTDELAY;\n     * ENCDELAY = internal encoder delay. And then we have to add\n     * POSTDELAY=288 because of the 50% MDCT overlap. A 576 MDCT granule\n     * decodes to 1152 samples. To synthesize the 576 samples centered under\n     * this granule we need the previous granule for the first 288 samples\n     * (no problem), and the next granule for the next 288 samples (not\n     * possible if this is last granule). So we need to pad with 288 samples\n     * to make sure we can encode the 576 samples we are interested in.\n     */\n    gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\n    gfp.encoder_padding = 0;\n    gfc.mf_size = Encoder.ENCDELAY - Encoder.MDCTDELAY;\n    /*\n     * we pad input with this many 0's\n     */\n\n    gfp.findReplayGain = false;\n    gfp.decode_on_the_fly = false;\n    gfc.decode_on_the_fly = false;\n    gfc.findReplayGain = false;\n    gfc.findPeakSample = false;\n    gfc.RadioGain = 0;\n    gfc.AudiophileGain = 0;\n    gfc.noclipGainChange = 0;\n    gfc.noclipScale = -1.0;\n    gfp.preset = 0;\n    gfp.write_id3tag_automatic = true;\n    return 0;\n  }\n  this.lame_init = function () {\n    var gfp = new LameGlobalFlags();\n    var ret = lame_init_old(gfp);\n    if (ret != 0) {\n      return null;\n    }\n    gfp.lame_allocated_gfp = 1;\n    return gfp;\n  };\n  function filter_coef(x) {\n    if (x > 1.0) return 0.0;\n    if (x <= 0.0) return 1.0;\n    return Math.cos(Math.PI / 2 * x);\n  }\n  this.nearestBitrateFullIndex = function (bitrate) {\n    /* borrowed from DM abr presets */\n\n    var full_bitrate_table = [8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320];\n    var lower_range = 0,\n      lower_range_kbps = 0,\n      upper_range = 0,\n      upper_range_kbps = 0;\n\n    /* We assume specified bitrate will be 320kbps */\n    upper_range_kbps = full_bitrate_table[16];\n    upper_range = 16;\n    lower_range_kbps = full_bitrate_table[16];\n    lower_range = 16;\n\n    /*\n     * Determine which significant bitrates the value specified falls\n     * between, if loop ends without breaking then we were correct above\n     * that the value was 320\n     */\n    for (var b = 0; b < 16; b++) {\n      if (Math.max(bitrate, full_bitrate_table[b + 1]) != bitrate) {\n        upper_range_kbps = full_bitrate_table[b + 1];\n        upper_range = b + 1;\n        lower_range_kbps = full_bitrate_table[b];\n        lower_range = b;\n        break;\n        /* We found upper range */\n      }\n    }\n\n    /* Determine which range the value specified is closer to */\n    if (upper_range_kbps - bitrate > bitrate - lower_range_kbps) {\n      return lower_range;\n    }\n    return upper_range;\n  };\n  function optimum_samplefreq(lowpassfreq, input_samplefreq) {\n    /*\n     * Rules:\n     *\n     * - if possible, sfb21 should NOT be used\n     */\n    var suggested_samplefreq = 44100;\n    if (input_samplefreq >= 48000) suggested_samplefreq = 48000;else if (input_samplefreq >= 44100) suggested_samplefreq = 44100;else if (input_samplefreq >= 32000) suggested_samplefreq = 32000;else if (input_samplefreq >= 24000) suggested_samplefreq = 24000;else if (input_samplefreq >= 22050) suggested_samplefreq = 22050;else if (input_samplefreq >= 16000) suggested_samplefreq = 16000;else if (input_samplefreq >= 12000) suggested_samplefreq = 12000;else if (input_samplefreq >= 11025) suggested_samplefreq = 11025;else if (input_samplefreq >= 8000) suggested_samplefreq = 8000;\n    if (lowpassfreq == -1) return suggested_samplefreq;\n    if (lowpassfreq <= 15960) suggested_samplefreq = 44100;\n    if (lowpassfreq <= 15250) suggested_samplefreq = 32000;\n    if (lowpassfreq <= 11220) suggested_samplefreq = 24000;\n    if (lowpassfreq <= 9970) suggested_samplefreq = 22050;\n    if (lowpassfreq <= 7230) suggested_samplefreq = 16000;\n    if (lowpassfreq <= 5420) suggested_samplefreq = 12000;\n    if (lowpassfreq <= 4510) suggested_samplefreq = 11025;\n    if (lowpassfreq <= 3970) suggested_samplefreq = 8000;\n    if (input_samplefreq < suggested_samplefreq) {\n      /*\n       * choose a valid MPEG sample frequency above the input sample\n       * frequency to avoid SFB21/12 bitrate bloat rh 061115\n       */\n      if (input_samplefreq > 44100) {\n        return 48000;\n      }\n      if (input_samplefreq > 32000) {\n        return 44100;\n      }\n      if (input_samplefreq > 24000) {\n        return 32000;\n      }\n      if (input_samplefreq > 22050) {\n        return 24000;\n      }\n      if (input_samplefreq > 16000) {\n        return 22050;\n      }\n      if (input_samplefreq > 12000) {\n        return 16000;\n      }\n      if (input_samplefreq > 11025) {\n        return 12000;\n      }\n      if (input_samplefreq > 8000) {\n        return 11025;\n      }\n      return 8000;\n    }\n    return suggested_samplefreq;\n  }\n\n  /**\n   * convert samp freq in Hz to index\n   */\n  function SmpFrqIndex(sample_freq, gpf) {\n    switch (sample_freq) {\n      case 44100:\n        gpf.version = 1;\n        return 0;\n      case 48000:\n        gpf.version = 1;\n        return 1;\n      case 32000:\n        gpf.version = 1;\n        return 2;\n      case 22050:\n        gpf.version = 0;\n        return 0;\n      case 24000:\n        gpf.version = 0;\n        return 1;\n      case 16000:\n        gpf.version = 0;\n        return 2;\n      case 11025:\n        gpf.version = 0;\n        return 0;\n      case 12000:\n        gpf.version = 0;\n        return 1;\n      case 8000:\n        gpf.version = 0;\n        return 2;\n      default:\n        gpf.version = 0;\n        return -1;\n    }\n  }\n\n  /**\n   * @param bRate\n   *            legal rates from 8 to 320\n   */\n  function FindNearestBitrate(bRate, version, samplerate) {\n    /* MPEG-1 or MPEG-2 LSF */\n    if (samplerate < 16000) version = 2;\n    var bitrate = Tables.bitrate_table[version][1];\n    for (var i = 2; i <= 14; i++) {\n      if (Tables.bitrate_table[version][i] > 0) {\n        if (Math.abs(Tables.bitrate_table[version][i] - bRate) < Math.abs(bitrate - bRate)) bitrate = Tables.bitrate_table[version][i];\n      }\n    }\n    return bitrate;\n  }\n\n  /**\n   * @param bRate\n   *            legal rates from 32 to 448 kbps\n   * @param version\n   *            MPEG-1 or MPEG-2/2.5 LSF\n   */\n  function BitrateIndex(bRate, version, samplerate) {\n    /* convert bitrate in kbps to index */\n    if (samplerate < 16000) version = 2;\n    for (var i = 0; i <= 14; i++) {\n      if (Tables.bitrate_table[version][i] > 0) {\n        if (Tables.bitrate_table[version][i] == bRate) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n  function optimum_bandwidth(lh, bitrate) {\n    /**\n     * <PRE>\n     *  Input:\n     *      bitrate     total bitrate in kbps\n     *\n     *   Output:\n     *      lowerlimit: best lowpass frequency limit for input filter in Hz\n     *      upperlimit: best highpass frequency limit for input filter in Hz\n     * </PRE>\n     */\n    var freq_map = [new BandPass(8, 2000), new BandPass(16, 3700), new BandPass(24, 3900), new BandPass(32, 5500), new BandPass(40, 7000), new BandPass(48, 7500), new BandPass(56, 10000), new BandPass(64, 11000), new BandPass(80, 13500), new BandPass(96, 15100), new BandPass(112, 15600), new BandPass(128, 17000), new BandPass(160, 17500), new BandPass(192, 18600), new BandPass(224, 19400), new BandPass(256, 19700), new BandPass(320, 20500)];\n    var table_index = self.nearestBitrateFullIndex(bitrate);\n    lh.lowerlimit = freq_map[table_index].lowpass;\n  }\n  function lame_init_params_ppflt(gfp) {\n    var gfc = gfp.internal_flags;\n    /***************************************************************/\n    /* compute info needed for polyphase filter (filter type==0, default) */\n    /***************************************************************/\n\n    var lowpass_band = 32;\n    var highpass_band = -1;\n    if (gfc.lowpass1 > 0) {\n      var minband = 999;\n      for (var band = 0; band <= 31; band++) {\n        var freq = band / 31.0;\n        /* this band and above will be zeroed: */\n        if (freq >= gfc.lowpass2) {\n          lowpass_band = Math.min(lowpass_band, band);\n        }\n        if (gfc.lowpass1 < freq && freq < gfc.lowpass2) {\n          minband = Math.min(minband, band);\n        }\n      }\n\n      /*\n       * compute the *actual* transition band implemented by the polyphase\n       * filter\n       */\n      if (minband == 999) {\n        gfc.lowpass1 = (lowpass_band - .75) / 31.0;\n      } else {\n        gfc.lowpass1 = (minband - .75) / 31.0;\n      }\n      gfc.lowpass2 = lowpass_band / 31.0;\n    }\n\n    /*\n     * make sure highpass filter is within 90% of what the effective\n     * highpass frequency will be\n     */\n    if (gfc.highpass2 > 0) {\n      if (gfc.highpass2 < .9 * (.75 / 31.0)) {\n        gfc.highpass1 = 0;\n        gfc.highpass2 = 0;\n        System.err.println(\"Warning: highpass filter disabled.  \" + \"highpass frequency too small\\n\");\n      }\n    }\n    if (gfc.highpass2 > 0) {\n      var maxband = -1;\n      for (var band = 0; band <= 31; band++) {\n        var freq = band / 31.0;\n        /* this band and below will be zereod */\n        if (freq <= gfc.highpass1) {\n          highpass_band = Math.max(highpass_band, band);\n        }\n        if (gfc.highpass1 < freq && freq < gfc.highpass2) {\n          maxband = Math.max(maxband, band);\n        }\n      }\n      /*\n       * compute the *actual* transition band implemented by the polyphase\n       * filter\n       */\n      gfc.highpass1 = highpass_band / 31.0;\n      if (maxband == -1) {\n        gfc.highpass2 = (highpass_band + .75) / 31.0;\n      } else {\n        gfc.highpass2 = (maxband + .75) / 31.0;\n      }\n    }\n    for (var band = 0; band < 32; band++) {\n      var fc1, fc2;\n      var freq = band / 31.0;\n      if (gfc.highpass2 > gfc.highpass1) {\n        fc1 = filter_coef((gfc.highpass2 - freq) / (gfc.highpass2 - gfc.highpass1 + 1e-20));\n      } else {\n        fc1 = 1.0;\n      }\n      if (gfc.lowpass2 > gfc.lowpass1) {\n        fc2 = filter_coef((freq - gfc.lowpass1) / (gfc.lowpass2 - gfc.lowpass1 + 1e-20));\n      } else {\n        fc2 = 1.0;\n      }\n      gfc.amp_filter[band] = fc1 * fc2;\n    }\n  }\n  function lame_init_qval(gfp) {\n    var gfc = gfp.internal_flags;\n    switch (gfp.quality) {\n      default:\n      case 9:\n        /* no psymodel, no noise shaping */\n        gfc.psymodel = 0;\n        gfc.noise_shaping = 0;\n        gfc.noise_shaping_amp = 0;\n        gfc.noise_shaping_stop = 0;\n        gfc.use_best_huffman = 0;\n        gfc.full_outer_loop = 0;\n        break;\n      case 8:\n        gfp.quality = 7;\n      //$FALL-THROUGH$\n      case 7:\n        /*\n         * use psymodel (for short block and m/s switching), but no noise\n         * shapping\n         */\n        gfc.psymodel = 1;\n        gfc.noise_shaping = 0;\n        gfc.noise_shaping_amp = 0;\n        gfc.noise_shaping_stop = 0;\n        gfc.use_best_huffman = 0;\n        gfc.full_outer_loop = 0;\n        break;\n      case 6:\n        gfc.psymodel = 1;\n        if (gfc.noise_shaping == 0) gfc.noise_shaping = 1;\n        gfc.noise_shaping_amp = 0;\n        gfc.noise_shaping_stop = 0;\n        if (gfc.subblock_gain == -1) gfc.subblock_gain = 1;\n        gfc.use_best_huffman = 0;\n        gfc.full_outer_loop = 0;\n        break;\n      case 5:\n        gfc.psymodel = 1;\n        if (gfc.noise_shaping == 0) gfc.noise_shaping = 1;\n        gfc.noise_shaping_amp = 0;\n        gfc.noise_shaping_stop = 0;\n        if (gfc.subblock_gain == -1) gfc.subblock_gain = 1;\n        gfc.use_best_huffman = 0;\n        gfc.full_outer_loop = 0;\n        break;\n      case 4:\n        gfc.psymodel = 1;\n        if (gfc.noise_shaping == 0) gfc.noise_shaping = 1;\n        gfc.noise_shaping_amp = 0;\n        gfc.noise_shaping_stop = 0;\n        if (gfc.subblock_gain == -1) gfc.subblock_gain = 1;\n        gfc.use_best_huffman = 1;\n        gfc.full_outer_loop = 0;\n        break;\n      case 3:\n        gfc.psymodel = 1;\n        if (gfc.noise_shaping == 0) gfc.noise_shaping = 1;\n        gfc.noise_shaping_amp = 1;\n        gfc.noise_shaping_stop = 1;\n        if (gfc.subblock_gain == -1) gfc.subblock_gain = 1;\n        gfc.use_best_huffman = 1;\n        gfc.full_outer_loop = 0;\n        break;\n      case 2:\n        gfc.psymodel = 1;\n        if (gfc.noise_shaping == 0) gfc.noise_shaping = 1;\n        if (gfc.substep_shaping == 0) gfc.substep_shaping = 2;\n        gfc.noise_shaping_amp = 1;\n        gfc.noise_shaping_stop = 1;\n        if (gfc.subblock_gain == -1) gfc.subblock_gain = 1;\n        gfc.use_best_huffman = 1;\n        /* inner loop */\n        gfc.full_outer_loop = 0;\n        break;\n      case 1:\n        gfc.psymodel = 1;\n        if (gfc.noise_shaping == 0) gfc.noise_shaping = 1;\n        if (gfc.substep_shaping == 0) gfc.substep_shaping = 2;\n        gfc.noise_shaping_amp = 2;\n        gfc.noise_shaping_stop = 1;\n        if (gfc.subblock_gain == -1) gfc.subblock_gain = 1;\n        gfc.use_best_huffman = 1;\n        gfc.full_outer_loop = 0;\n        break;\n      case 0:\n        gfc.psymodel = 1;\n        if (gfc.noise_shaping == 0) gfc.noise_shaping = 1;\n        if (gfc.substep_shaping == 0) gfc.substep_shaping = 2;\n        gfc.noise_shaping_amp = 2;\n        gfc.noise_shaping_stop = 1;\n        if (gfc.subblock_gain == -1) gfc.subblock_gain = 1;\n        gfc.use_best_huffman = 1;\n        /*\n         * type 2 disabled because of it slowness, in favor of full outer\n         * loop search\n         */\n        gfc.full_outer_loop = 0;\n        /*\n         * full outer loop search disabled because of audible distortions it\n         * may generate rh 060629\n         */\n        break;\n    }\n  }\n  function lame_init_bitstream(gfp) {\n    var gfc = gfp.internal_flags;\n    gfp.frameNum = 0;\n    if (gfp.write_id3tag_automatic) {\n      id3.id3tag_write_v2(gfp);\n    }\n    /* initialize histogram data optionally used by frontend */\n\n    gfc.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\n    gfc.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\n    gfc.PeakSample = 0.0;\n\n    /* Write initial VBR Header to bitstream and init VBR data */\n    if (gfp.bWriteVbrTag) vbr.InitVbrTag(gfp);\n  }\n\n  /********************************************************************\n   * initialize internal params based on data in gf (globalflags struct filled\n   * in by calling program)\n   *\n   * OUTLINE:\n   *\n   * We first have some complex code to determine bitrate, output samplerate\n   * and mode. It is complicated by the fact that we allow the user to set\n   * some or all of these parameters, and need to determine best possible\n   * values for the rest of them:\n   *\n   * 1. set some CPU related flags 2. check if we are mono.mono, stereo.mono\n   * or stereo.stereo 3. compute bitrate and output samplerate: user may have\n   * set compression ratio user may have set a bitrate user may have set a\n   * output samplerate 4. set some options which depend on output samplerate\n   * 5. compute the actual compression ratio 6. set mode based on compression\n   * ratio\n   *\n   * The remaining code is much simpler - it just sets options based on the\n   * mode & compression ratio:\n   *\n   * set allow_diff_short based on mode select lowpass filter based on\n   * compression ratio & mode set the bitrate index, and min/max bitrates for\n   * VBR modes disable VBR tag if it is not appropriate initialize the\n   * bitstream initialize scalefac_band data set sideinfo_len (based on\n   * channels, CRC, out_samplerate) write an id3v2 tag into the bitstream\n   * write VBR tag into the bitstream set mpeg1/2 flag estimate the number of\n   * frames (based on a lot of data)\n   *\n   * now we set more flags: nspsytune: see code VBR modes see code CBR/ABR see\n   * code\n   *\n   * Finally, we set the algorithm flags based on the gfp.quality value\n   * lame_init_qval(gfp);\n   *\n   ********************************************************************/\n  this.lame_init_params = function (gfp) {\n    var gfc = gfp.internal_flags;\n    gfc.Class_ID = 0;\n    if (gfc.ATH == null) gfc.ATH = new ATH();\n    if (gfc.PSY == null) gfc.PSY = new PSY();\n    if (gfc.rgdata == null) gfc.rgdata = new ReplayGain();\n    gfc.channels_in = gfp.num_channels;\n    if (gfc.channels_in == 1) gfp.mode = MPEGMode.MONO;\n    gfc.channels_out = gfp.mode == MPEGMode.MONO ? 1 : 2;\n    gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n    if (gfp.mode == MPEGMode.MONO) gfp.force_ms = false;\n    /*\n     * don't allow forced mid/side stereo for mono output\n     */\n\n    if (gfp.VBR == VbrMode.vbr_off && gfp.VBR_mean_bitrate_kbps != 128 && gfp.brate == 0) gfp.brate = gfp.VBR_mean_bitrate_kbps;\n    if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\n      /* these modes can handle free format condition */\n    } else {\n      gfp.free_format = false;\n      /* mode can't be mixed with free format */\n    }\n    if (gfp.VBR == VbrMode.vbr_off && gfp.brate == 0) {\n      /* no bitrate or compression ratio specified, use 11.025 */\n      if (BitStream.EQ(gfp.compression_ratio, 0)) gfp.compression_ratio = 11.025;\n      /*\n       * rate to compress a CD down to exactly 128000 bps\n       */\n    }\n\n    /* find bitrate if user specify a compression ratio */\n    if (gfp.VBR == VbrMode.vbr_off && gfp.compression_ratio > 0) {\n      if (gfp.out_samplerate == 0) gfp.out_samplerate = map2MP3Frequency(int(0.97 * gfp.in_samplerate));\n      /*\n       * round up with a margin of 3 %\n       */\n\n      /*\n       * choose a bitrate for the output samplerate which achieves\n       * specified compression ratio\n       */\n      gfp.brate = 0 | gfp.out_samplerate * 16 * gfc.channels_out / (1.e3 * gfp.compression_ratio);\n\n      /* we need the version for the bitrate table look up */\n      gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\n      if (!gfp.free_format)\n        /*\n        * for non Free Format find the nearest allowed\n        * bitrate\n        */\n        gfp.brate = FindNearestBitrate(gfp.brate, gfp.version, gfp.out_samplerate);\n    }\n    if (gfp.out_samplerate != 0) {\n      if (gfp.out_samplerate < 16000) {\n        gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps, 8);\n        gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps, 64);\n      } else if (gfp.out_samplerate < 32000) {\n        gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps, 8);\n        gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps, 160);\n      } else {\n        gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps, 32);\n        gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps, 320);\n      }\n    }\n\n    /****************************************************************/\n    /* if a filter has not been enabled, see if we should add one: */\n    /****************************************************************/\n    if (gfp.lowpassfreq == 0) {\n      var lowpass = 16000.;\n      switch (gfp.VBR) {\n        case VbrMode.vbr_off:\n          {\n            var lh = new LowPassHighPass();\n            optimum_bandwidth(lh, gfp.brate);\n            lowpass = lh.lowerlimit;\n            break;\n          }\n        case VbrMode.vbr_abr:\n          {\n            var lh = new LowPassHighPass();\n            optimum_bandwidth(lh, gfp.VBR_mean_bitrate_kbps);\n            lowpass = lh.lowerlimit;\n            break;\n          }\n        case VbrMode.vbr_rh:\n          {\n            var x = [19500, 19000, 18600, 18000, 17500, 16000, 15600, 14900, 12500, 10000, 3950];\n            if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\n              var a = x[gfp.VBR_q],\n                b = x[gfp.VBR_q + 1],\n                m = gfp.VBR_q_frac;\n              lowpass = linear_int(a, b, m);\n            } else {\n              lowpass = 19500;\n            }\n            break;\n          }\n        default:\n          {\n            var x = [19500, 19000, 18500, 18000, 17500, 16500, 15500, 14500, 12500, 9500, 3950];\n            if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\n              var a = x[gfp.VBR_q],\n                b = x[gfp.VBR_q + 1],\n                m = gfp.VBR_q_frac;\n              lowpass = linear_int(a, b, m);\n            } else {\n              lowpass = 19500;\n            }\n          }\n      }\n      if (gfp.mode == MPEGMode.MONO && (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr)) lowpass *= 1.5;\n      gfp.lowpassfreq = lowpass | 0;\n    }\n    if (gfp.out_samplerate == 0) {\n      if (2 * gfp.lowpassfreq > gfp.in_samplerate) {\n        gfp.lowpassfreq = gfp.in_samplerate / 2;\n      }\n      gfp.out_samplerate = optimum_samplefreq(gfp.lowpassfreq | 0, gfp.in_samplerate);\n    }\n    gfp.lowpassfreq = Math.min(20500, gfp.lowpassfreq);\n    gfp.lowpassfreq = Math.min(gfp.out_samplerate / 2, gfp.lowpassfreq);\n    if (gfp.VBR == VbrMode.vbr_off) {\n      gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out / (1.e3 * gfp.brate);\n    }\n    if (gfp.VBR == VbrMode.vbr_abr) {\n      gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out / (1.e3 * gfp.VBR_mean_bitrate_kbps);\n    }\n\n    /*\n     * do not compute ReplayGain values and do not find the peak sample if\n     * we can't store them\n     */\n    if (!gfp.bWriteVbrTag) {\n      gfp.findReplayGain = false;\n      gfp.decode_on_the_fly = false;\n      gfc.findPeakSample = false;\n    }\n    gfc.findReplayGain = gfp.findReplayGain;\n    gfc.decode_on_the_fly = gfp.decode_on_the_fly;\n    if (gfc.decode_on_the_fly) gfc.findPeakSample = true;\n    if (gfc.findReplayGain) {\n      if (ga.InitGainAnalysis(gfc.rgdata, gfp.out_samplerate) == GainAnalysis.INIT_GAIN_ANALYSIS_ERROR) {\n        gfp.internal_flags = null;\n        return -6;\n      }\n    }\n    if (gfc.decode_on_the_fly && !gfp.decode_only) {\n      if (gfc.hip != null) {\n        mpglib.hip_decode_exit(gfc.hip);\n      }\n      gfc.hip = mpglib.hip_decode_init();\n    }\n    gfc.mode_gr = gfp.out_samplerate <= 24000 ? 1 : 2;\n    /*\n     * Number of granules per frame\n     */\n    gfp.framesize = 576 * gfc.mode_gr;\n    gfp.encoder_delay = Encoder.ENCDELAY;\n    gfc.resample_ratio = gfp.in_samplerate / gfp.out_samplerate;\n\n    /**\n     * <PRE>\n     *  sample freq       bitrate     compression ratio\n     *     [kHz]      [kbps/channel]   for 16 bit input\n     *     44.1            56               12.6\n     *     44.1            64               11.025\n     *     44.1            80                8.82\n     *     22.05           24               14.7\n     *     22.05           32               11.025\n     *     22.05           40                8.82\n     *     16              16               16.0\n     *     16              24               10.667\n     * </PRE>\n     */\n    /**\n     * <PRE>\n     *  For VBR, take a guess at the compression_ratio.\n     *  For example:\n     *\n     *    VBR_q    compression     like\n     *     -        4.4         320 kbps/44 kHz\n     *   0...1      5.5         256 kbps/44 kHz\n     *     2        7.3         192 kbps/44 kHz\n     *     4        8.8         160 kbps/44 kHz\n     *     6       11           128 kbps/44 kHz\n     *     9       14.7          96 kbps\n     *\n     *  for lower bitrates, downsample with --resample\n     * </PRE>\n     */\n    switch (gfp.VBR) {\n      case VbrMode.vbr_mt:\n      case VbrMode.vbr_rh:\n      case VbrMode.vbr_mtrh:\n        {\n          /* numbers are a bit strange, but they determine the lowpass value */\n          var cmp = [5.7, 6.5, 7.3, 8.2, 10, 11.9, 13, 14, 15, 16.5];\n          gfp.compression_ratio = cmp[gfp.VBR_q];\n        }\n        break;\n      case VbrMode.vbr_abr:\n        gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out / (1.e3 * gfp.VBR_mean_bitrate_kbps);\n        break;\n      default:\n        gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out / (1.e3 * gfp.brate);\n        break;\n    }\n\n    /*\n     * mode = -1 (not set by user) or mode = MONO (because of only 1 input\n     * channel). If mode has not been set, then select J-STEREO\n     */\n    if (gfp.mode == MPEGMode.NOT_SET) {\n      gfp.mode = MPEGMode.JOINT_STEREO;\n    }\n\n    /* apply user driven high pass filter */\n    if (gfp.highpassfreq > 0) {\n      gfc.highpass1 = 2. * gfp.highpassfreq;\n      if (gfp.highpasswidth >= 0) gfc.highpass2 = 2. * (gfp.highpassfreq + gfp.highpasswidth);else /* 0% above on default */\n        gfc.highpass2 = (1 + 0.00) * 2. * gfp.highpassfreq;\n      gfc.highpass1 /= gfp.out_samplerate;\n      gfc.highpass2 /= gfp.out_samplerate;\n    } else {\n      gfc.highpass1 = 0;\n      gfc.highpass2 = 0;\n    }\n    /* apply user driven low pass filter */\n    if (gfp.lowpassfreq > 0) {\n      gfc.lowpass2 = 2. * gfp.lowpassfreq;\n      if (gfp.lowpasswidth >= 0) {\n        gfc.lowpass1 = 2. * (gfp.lowpassfreq - gfp.lowpasswidth);\n        if (gfc.lowpass1 < 0) /* has to be >= 0 */\n          gfc.lowpass1 = 0;\n      } else {\n        /* 0% below on default */\n        gfc.lowpass1 = (1 - 0.00) * 2. * gfp.lowpassfreq;\n      }\n      gfc.lowpass1 /= gfp.out_samplerate;\n      gfc.lowpass2 /= gfp.out_samplerate;\n    } else {\n      gfc.lowpass1 = 0;\n      gfc.lowpass2 = 0;\n    }\n\n    /**********************************************************************/\n    /* compute info needed for polyphase filter (filter type==0, default) */\n    /**********************************************************************/\n    lame_init_params_ppflt(gfp);\n    /*******************************************************\n     * samplerate and bitrate index\n     *******************************************************/\n    gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\n    if (gfc.samplerate_index < 0) {\n      gfp.internal_flags = null;\n      return -1;\n    }\n    if (gfp.VBR == VbrMode.vbr_off) {\n      if (gfp.free_format) {\n        gfc.bitrate_index = 0;\n      } else {\n        gfp.brate = FindNearestBitrate(gfp.brate, gfp.version, gfp.out_samplerate);\n        gfc.bitrate_index = BitrateIndex(gfp.brate, gfp.version, gfp.out_samplerate);\n        if (gfc.bitrate_index <= 0) {\n          gfp.internal_flags = null;\n          return -1;\n        }\n      }\n    } else {\n      gfc.bitrate_index = 1;\n    }\n\n    /* for CBR, we will write an \"info\" tag. */\n\n    if (gfp.analysis) gfp.bWriteVbrTag = false;\n\n    /* some file options not allowed if output is: not specified or stdout */\n    if (gfc.pinfo != null) gfp.bWriteVbrTag = false;\n    /* disable Xing VBR tag */\n\n    bs.init_bit_stream_w(gfc);\n    var j = gfc.samplerate_index + 3 * gfp.version + 6 * (gfp.out_samplerate < 16000 ? 1 : 0);\n    for (var i = 0; i < Encoder.SBMAX_l + 1; i++) gfc.scalefac_band.l[i] = qupvt.sfBandIndex[j].l[i];\n    for (var i = 0; i < Encoder.PSFB21 + 1; i++) {\n      var size = (gfc.scalefac_band.l[22] - gfc.scalefac_band.l[21]) / Encoder.PSFB21;\n      var start = gfc.scalefac_band.l[21] + i * size;\n      gfc.scalefac_band.psfb21[i] = start;\n    }\n    gfc.scalefac_band.psfb21[Encoder.PSFB21] = 576;\n    for (var i = 0; i < Encoder.SBMAX_s + 1; i++) gfc.scalefac_band.s[i] = qupvt.sfBandIndex[j].s[i];\n    for (var i = 0; i < Encoder.PSFB12 + 1; i++) {\n      var size = (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12]) / Encoder.PSFB12;\n      var start = gfc.scalefac_band.s[12] + i * size;\n      gfc.scalefac_band.psfb12[i] = start;\n    }\n    gfc.scalefac_band.psfb12[Encoder.PSFB12] = 192;\n    /* determine the mean bitrate for main data */\n    if (gfp.version == 1) /* MPEG 1 */\n      gfc.sideinfo_len = gfc.channels_out == 1 ? 4 + 17 : 4 + 32;else /* MPEG 2 */\n      gfc.sideinfo_len = gfc.channels_out == 1 ? 4 + 9 : 4 + 17;\n    if (gfp.error_protection) gfc.sideinfo_len += 2;\n    lame_init_bitstream(gfp);\n    gfc.Class_ID = LAME_ID;\n    {\n      var k;\n      for (k = 0; k < 19; k++) gfc.nsPsy.pefirbuf[k] = 700 * gfc.mode_gr * gfc.channels_out;\n      if (gfp.ATHtype == -1) gfp.ATHtype = 4;\n    }\n    assert(gfp.VBR_q <= 9);\n    assert(gfp.VBR_q >= 0);\n    switch (gfp.VBR) {\n      case VbrMode.vbr_mt:\n        gfp.VBR = VbrMode.vbr_mtrh;\n      //$FALL-THROUGH$\n      case VbrMode.vbr_mtrh:\n        {\n          if (gfp.useTemporal == null) {\n            gfp.useTemporal = false;\n            /* off by default for this VBR mode */\n          }\n          p.apply_preset(gfp, 500 - gfp.VBR_q * 10, 0);\n          /**\n           * <PRE>\n           *   The newer VBR code supports only a limited\n           *     subset of quality levels:\n           *     9-5=5 are the same, uses x^3/4 quantization\n           *   4-0=0 are the same  5 plus best huffman divide code\n           * </PRE>\n           */\n          if (gfp.quality < 0) gfp.quality = LAME_DEFAULT_QUALITY;\n          if (gfp.quality < 5) gfp.quality = 0;\n          if (gfp.quality > 5) gfp.quality = 5;\n          gfc.PSY.mask_adjust = gfp.maskingadjust;\n          gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n          /*\n           * sfb21 extra only with MPEG-1 at higher sampling rates\n           */\n          if (gfp.experimentalY) gfc.sfb21_extra = false;else gfc.sfb21_extra = gfp.out_samplerate > 44000;\n          gfc.iteration_loop = new VBRNewIterationLoop(qu);\n          break;\n        }\n      case VbrMode.vbr_rh:\n        {\n          p.apply_preset(gfp, 500 - gfp.VBR_q * 10, 0);\n          gfc.PSY.mask_adjust = gfp.maskingadjust;\n          gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n          /*\n           * sfb21 extra only with MPEG-1 at higher sampling rates\n           */\n          if (gfp.experimentalY) gfc.sfb21_extra = false;else gfc.sfb21_extra = gfp.out_samplerate > 44000;\n\n          /*\n           * VBR needs at least the output of GPSYCHO, so we have to garantee\n           * that by setting a minimum quality level, actually level 6 does\n           * it. down to level 6\n           */\n          if (gfp.quality > 6) gfp.quality = 6;\n          if (gfp.quality < 0) gfp.quality = LAME_DEFAULT_QUALITY;\n          gfc.iteration_loop = new VBROldIterationLoop(qu);\n          break;\n        }\n      default:\n        /* cbr/abr */\n        {\n          var vbrmode;\n\n          /*\n           * no sfb21 extra with CBR code\n           */\n          gfc.sfb21_extra = false;\n          if (gfp.quality < 0) gfp.quality = LAME_DEFAULT_QUALITY;\n          vbrmode = gfp.VBR;\n          if (vbrmode == VbrMode.vbr_off) gfp.VBR_mean_bitrate_kbps = gfp.brate;\n          /* second, set parameters depending on bitrate */\n          p.apply_preset(gfp, gfp.VBR_mean_bitrate_kbps, 0);\n          gfp.VBR = vbrmode;\n          gfc.PSY.mask_adjust = gfp.maskingadjust;\n          gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n          if (vbrmode == VbrMode.vbr_off) {\n            gfc.iteration_loop = new CBRNewIterationLoop(qu);\n          } else {\n            gfc.iteration_loop = new ABRIterationLoop(qu);\n          }\n          break;\n        }\n    }\n    assert(gfp.scale >= 0);\n    /* initialize default values common for all modes */\n\n    if (gfp.VBR != VbrMode.vbr_off) {\n      /* choose a min/max bitrate for VBR */\n      /* if the user didn't specify VBR_max_bitrate: */\n      gfc.VBR_min_bitrate = 1;\n      /*\n       * default: allow 8 kbps (MPEG-2) or 32 kbps (MPEG-1)\n       */\n      gfc.VBR_max_bitrate = 14;\n      /*\n       * default: allow 160 kbps (MPEG-2) or 320 kbps (MPEG-1)\n       */\n      if (gfp.out_samplerate < 16000) gfc.VBR_max_bitrate = 8;\n      /* default: allow 64 kbps (MPEG-2.5) */\n      if (gfp.VBR_min_bitrate_kbps != 0) {\n        gfp.VBR_min_bitrate_kbps = FindNearestBitrate(gfp.VBR_min_bitrate_kbps, gfp.version, gfp.out_samplerate);\n        gfc.VBR_min_bitrate = BitrateIndex(gfp.VBR_min_bitrate_kbps, gfp.version, gfp.out_samplerate);\n        if (gfc.VBR_min_bitrate < 0) return -1;\n      }\n      if (gfp.VBR_max_bitrate_kbps != 0) {\n        gfp.VBR_max_bitrate_kbps = FindNearestBitrate(gfp.VBR_max_bitrate_kbps, gfp.version, gfp.out_samplerate);\n        gfc.VBR_max_bitrate = BitrateIndex(gfp.VBR_max_bitrate_kbps, gfp.version, gfp.out_samplerate);\n        if (gfc.VBR_max_bitrate < 0) return -1;\n      }\n      gfp.VBR_min_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate];\n      gfp.VBR_max_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate];\n      gfp.VBR_mean_bitrate_kbps = Math.min(Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate], gfp.VBR_mean_bitrate_kbps);\n      gfp.VBR_mean_bitrate_kbps = Math.max(Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate], gfp.VBR_mean_bitrate_kbps);\n    }\n\n    /* just another daily changing developer switch */\n    if (gfp.tune) {\n      gfc.PSY.mask_adjust += gfp.tune_value_a;\n      gfc.PSY.mask_adjust_short += gfp.tune_value_a;\n    }\n\n    /* initialize internal qval settings */\n    lame_init_qval(gfp);\n    assert(gfp.scale >= 0);\n    /*\n     * automatic ATH adjustment on\n     */\n    if (gfp.athaa_type < 0) gfc.ATH.useAdjust = 3;else gfc.ATH.useAdjust = gfp.athaa_type;\n\n    /* initialize internal adaptive ATH settings -jd */\n    gfc.ATH.aaSensitivityP = Math.pow(10.0, gfp.athaa_sensitivity / -10.0);\n    if (gfp.short_blocks == null) {\n      gfp.short_blocks = ShortBlock.short_block_allowed;\n    }\n\n    /*\n     * Note Jan/2003: Many hardware decoders cannot handle short blocks in\n     * regular stereo mode unless they are coupled (same type in both\n     * channels) it is a rare event (1 frame per min. or so) that LAME would\n     * use uncoupled short blocks, so lets turn them off until we decide how\n     * to handle this. No other encoders allow uncoupled short blocks, even\n     * though it is in the standard.\n     */\n    /*\n     * rh 20040217: coupling makes no sense for mono and dual-mono streams\n     */\n    if (gfp.short_blocks == ShortBlock.short_block_allowed && (gfp.mode == MPEGMode.JOINT_STEREO || gfp.mode == MPEGMode.STEREO)) {\n      gfp.short_blocks = ShortBlock.short_block_coupled;\n    }\n    if (gfp.quant_comp < 0) gfp.quant_comp = 1;\n    if (gfp.quant_comp_short < 0) gfp.quant_comp_short = 0;\n    if (gfp.msfix < 0) gfp.msfix = 0;\n\n    /* select psychoacoustic model */\n    gfp.exp_nspsytune = gfp.exp_nspsytune | 1;\n    if (gfp.internal_flags.nsPsy.attackthre < 0) gfp.internal_flags.nsPsy.attackthre = PsyModel.NSATTACKTHRE;\n    if (gfp.internal_flags.nsPsy.attackthre_s < 0) gfp.internal_flags.nsPsy.attackthre_s = PsyModel.NSATTACKTHRE_S;\n    assert(gfp.scale >= 0);\n    if (gfp.scale < 0) gfp.scale = 1;\n    if (gfp.ATHtype < 0) gfp.ATHtype = 4;\n    if (gfp.ATHcurve < 0) gfp.ATHcurve = 4;\n    if (gfp.athaa_loudapprox < 0) gfp.athaa_loudapprox = 2;\n    if (gfp.interChRatio < 0) gfp.interChRatio = 0;\n    if (gfp.useTemporal == null) gfp.useTemporal = true;\n    /* on by default */\n\n    /*\n     * padding method as described in\n     * \"MPEG-Layer3 / Bitstream Syntax and Decoding\" by Martin Sieler, Ralph\n     * Sperschneider\n     *\n     * note: there is no padding for the very first frame\n     *\n     * Robert Hegemann 2000-06-22\n     */\n    gfc.slot_lag = gfc.frac_SpF = 0;\n    if (gfp.VBR == VbrMode.vbr_off) gfc.slot_lag = gfc.frac_SpF = (gfp.version + 1) * 72000 * gfp.brate % gfp.out_samplerate | 0;\n    qupvt.iteration_init(gfp);\n    psy.psymodel_init(gfp);\n    assert(gfp.scale >= 0);\n    return 0;\n  };\n  function update_inbuffer_size(gfc, nsamples) {\n    if (gfc.in_buffer_0 == null || gfc.in_buffer_nsamples < nsamples) {\n      gfc.in_buffer_0 = new_float(nsamples);\n      gfc.in_buffer_1 = new_float(nsamples);\n      gfc.in_buffer_nsamples = nsamples;\n    }\n  }\n  this.lame_encode_flush = function (gfp, mp3buffer, mp3bufferPos, mp3buffer_size) {\n    var gfc = gfp.internal_flags;\n    var buffer = new_short_n([2, 1152]);\n    var imp3 = 0,\n      mp3count,\n      mp3buffer_size_remaining;\n\n    /*\n     * we always add POSTDELAY=288 padding to make sure granule with real\n     * data can be complety decoded (because of 50% overlap with next\n     * granule\n     */\n    var end_padding;\n    var frames_left;\n    var samples_to_encode = gfc.mf_samples_to_encode - Encoder.POSTDELAY;\n    var mf_needed = calcNeeded(gfp);\n\n    /* Was flush already called? */\n    if (gfc.mf_samples_to_encode < 1) {\n      return 0;\n    }\n    mp3count = 0;\n    if (gfp.in_samplerate != gfp.out_samplerate) {\n      /*\n       * delay due to resampling; needs to be fixed, if resampling code\n       * gets changed\n       */\n      samples_to_encode += 16. * gfp.out_samplerate / gfp.in_samplerate;\n    }\n    end_padding = gfp.framesize - samples_to_encode % gfp.framesize;\n    if (end_padding < 576) end_padding += gfp.framesize;\n    gfp.encoder_padding = end_padding;\n    frames_left = (samples_to_encode + end_padding) / gfp.framesize;\n\n    /*\n     * send in a frame of 0 padding until all internal sample buffers are\n     * flushed\n     */\n    while (frames_left > 0 && imp3 >= 0) {\n      var bunch = mf_needed - gfc.mf_size;\n      var frame_num = gfp.frameNum;\n      bunch *= gfp.in_samplerate;\n      bunch /= gfp.out_samplerate;\n      if (bunch > 1152) bunch = 1152;\n      if (bunch < 1) bunch = 1;\n      mp3buffer_size_remaining = mp3buffer_size - mp3count;\n\n      /* if user specifed buffer size = 0, dont check size */\n      if (mp3buffer_size == 0) mp3buffer_size_remaining = 0;\n      imp3 = this.lame_encode_buffer(gfp, buffer[0], buffer[1], bunch, mp3buffer, mp3bufferPos, mp3buffer_size_remaining);\n      mp3bufferPos += imp3;\n      mp3count += imp3;\n      frames_left -= frame_num != gfp.frameNum ? 1 : 0;\n    }\n    /*\n     * Set gfc.mf_samples_to_encode to 0, so we may detect and break loops\n     * calling it more than once in a row.\n     */\n    gfc.mf_samples_to_encode = 0;\n    if (imp3 < 0) {\n      /* some type of fatal error */\n      return imp3;\n    }\n    mp3buffer_size_remaining = mp3buffer_size - mp3count;\n    /* if user specifed buffer size = 0, dont check size */\n    if (mp3buffer_size == 0) mp3buffer_size_remaining = 0;\n\n    /* mp3 related stuff. bit buffer might still contain some mp3 data */\n    bs.flush_bitstream(gfp);\n    imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos, mp3buffer_size_remaining, 1);\n    if (imp3 < 0) {\n      /* some type of fatal error */\n      return imp3;\n    }\n    mp3bufferPos += imp3;\n    mp3count += imp3;\n    mp3buffer_size_remaining = mp3buffer_size - mp3count;\n    /* if user specifed buffer size = 0, dont check size */\n    if (mp3buffer_size == 0) mp3buffer_size_remaining = 0;\n    if (gfp.write_id3tag_automatic) {\n      /* write a id3 tag to the bitstream */\n      id3.id3tag_write_v1(gfp);\n      imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos, mp3buffer_size_remaining, 0);\n      if (imp3 < 0) {\n        return imp3;\n      }\n      mp3count += imp3;\n    }\n    return mp3count;\n  };\n  this.lame_encode_buffer = function (gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n    var gfc = gfp.internal_flags;\n    var in_buffer = [null, null];\n    if (gfc.Class_ID != LAME_ID) return -3;\n    if (nsamples == 0) return 0;\n    update_inbuffer_size(gfc, nsamples);\n    in_buffer[0] = gfc.in_buffer_0;\n    in_buffer[1] = gfc.in_buffer_1;\n\n    /* make a copy of input buffer, changing type to sample_t */\n    for (var i = 0; i < nsamples; i++) {\n      in_buffer[0][i] = buffer_l[i];\n      if (gfc.channels_in > 1) in_buffer[1][i] = buffer_r[i];\n    }\n    return lame_encode_buffer_sample(gfp, in_buffer[0], in_buffer[1], nsamples, mp3buf, mp3bufPos, mp3buf_size);\n  };\n  function calcNeeded(gfp) {\n    var mf_needed = Encoder.BLKSIZE + gfp.framesize - Encoder.FFTOFFSET;\n    /*\n     * amount needed for FFT\n     */\n    mf_needed = Math.max(mf_needed, 512 + gfp.framesize - 32);\n    assert(LameInternalFlags.MFSIZE >= mf_needed);\n    return mf_needed;\n  }\n  function lame_encode_buffer_sample(gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n    var gfc = gfp.internal_flags;\n    var mp3size = 0,\n      ret,\n      i,\n      ch,\n      mf_needed;\n    var mp3out;\n    var mfbuf = [null, null];\n    var in_buffer = [null, null];\n    if (gfc.Class_ID != LAME_ID) return -3;\n    if (nsamples == 0) return 0;\n\n    /* copy out any tags that may have been written into bitstream */\n    mp3out = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 0);\n    if (mp3out < 0) return mp3out;\n    /* not enough buffer space */\n    mp3bufPos += mp3out;\n    mp3size += mp3out;\n    in_buffer[0] = buffer_l;\n    in_buffer[1] = buffer_r;\n\n    /* Apply user defined re-scaling */\n\n    /* user selected scaling of the samples */\n    if (BitStream.NEQ(gfp.scale, 0) && BitStream.NEQ(gfp.scale, 1.0)) {\n      for (i = 0; i < nsamples; ++i) {\n        in_buffer[0][i] *= gfp.scale;\n        if (gfc.channels_out == 2) in_buffer[1][i] *= gfp.scale;\n      }\n    }\n\n    /* user selected scaling of the channel 0 (left) samples */\n    if (BitStream.NEQ(gfp.scale_left, 0) && BitStream.NEQ(gfp.scale_left, 1.0)) {\n      for (i = 0; i < nsamples; ++i) {\n        in_buffer[0][i] *= gfp.scale_left;\n      }\n    }\n\n    /* user selected scaling of the channel 1 (right) samples */\n    if (BitStream.NEQ(gfp.scale_right, 0) && BitStream.NEQ(gfp.scale_right, 1.0)) {\n      for (i = 0; i < nsamples; ++i) {\n        in_buffer[1][i] *= gfp.scale_right;\n      }\n    }\n\n    /* Downsample to Mono if 2 channels in and 1 channel out */\n    if (gfp.num_channels == 2 && gfc.channels_out == 1) {\n      for (i = 0; i < nsamples; ++i) {\n        in_buffer[0][i] = 0.5 * (in_buffer[0][i] + in_buffer[1][i]);\n        in_buffer[1][i] = 0.0;\n      }\n    }\n    mf_needed = calcNeeded(gfp);\n    mfbuf[0] = gfc.mfbuf[0];\n    mfbuf[1] = gfc.mfbuf[1];\n    var in_bufferPos = 0;\n    while (nsamples > 0) {\n      var in_buffer_ptr = [null, null];\n      var n_in = 0;\n      /* number of input samples processed with fill_buffer */\n      var n_out = 0;\n      /* number of samples output with fill_buffer */\n      /* n_in <> n_out if we are resampling */\n\n      in_buffer_ptr[0] = in_buffer[0];\n      in_buffer_ptr[1] = in_buffer[1];\n      /* copy in new samples into mfbuf, with resampling */\n      var inOut = new InOut();\n      fill_buffer(gfp, mfbuf, in_buffer_ptr, in_bufferPos, nsamples, inOut);\n      n_in = inOut.n_in;\n      n_out = inOut.n_out;\n\n      /* compute ReplayGain of resampled input if requested */\n      if (gfc.findReplayGain && !gfc.decode_on_the_fly) if (ga.AnalyzeSamples(gfc.rgdata, mfbuf[0], gfc.mf_size, mfbuf[1], gfc.mf_size, n_out, gfc.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR) return -6;\n\n      /* update in_buffer counters */\n      nsamples -= n_in;\n      in_bufferPos += n_in;\n      if (gfc.channels_out == 2) ; // in_bufferPos += n_in;\n\n      /* update mfbuf[] counters */\n      gfc.mf_size += n_out;\n      assert(gfc.mf_size <= LameInternalFlags.MFSIZE);\n\n      /*\n       * lame_encode_flush may have set gfc.mf_sample_to_encode to 0 so we\n       * have to reinitialize it here when that happened.\n       */\n      if (gfc.mf_samples_to_encode < 1) {\n        gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\n      }\n      gfc.mf_samples_to_encode += n_out;\n      if (gfc.mf_size >= mf_needed) {\n        /* encode the frame. */\n        /* mp3buf = pointer to current location in buffer */\n        /* mp3buf_size = size of original mp3 output buffer */\n        /* = 0 if we should not worry about the */\n        /* buffer size because calling program is */\n        /* to lazy to compute it */\n        /* mp3size = size of data written to buffer so far */\n        /* mp3buf_size-mp3size = amount of space avalable */\n\n        var buf_size = mp3buf_size - mp3size;\n        if (mp3buf_size == 0) buf_size = 0;\n        ret = lame_encode_frame(gfp, mfbuf[0], mfbuf[1], mp3buf, mp3bufPos, buf_size);\n        if (ret < 0) return ret;\n        mp3bufPos += ret;\n        mp3size += ret;\n\n        /* shift out old samples */\n        gfc.mf_size -= gfp.framesize;\n        gfc.mf_samples_to_encode -= gfp.framesize;\n        for (ch = 0; ch < gfc.channels_out; ch++) for (i = 0; i < gfc.mf_size; i++) mfbuf[ch][i] = mfbuf[ch][i + gfp.framesize];\n      }\n    }\n    assert(nsamples == 0);\n    return mp3size;\n  }\n  function lame_encode_frame(gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\n    var ret = self.enc.lame_encode_mp3_frame(gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size);\n    gfp.frameNum++;\n    return ret;\n  }\n  function InOut() {\n    this.n_in = 0;\n    this.n_out = 0;\n  }\n  function NumUsed() {\n    this.num_used = 0;\n  }\n\n  /**\n   * Greatest common divisor.\n   * <p>\n   * Joint work of Euclid and M. Hendry\n   */\n  function gcd(i, j) {\n    return j != 0 ? gcd(j, i % j) : i;\n  }\n\n  /**\n   * Resampling via FIR filter, blackman window.\n   */\n  function blackman(x, fcn, l) {\n    /*\n     * This algorithm from: SIGNAL PROCESSING ALGORITHMS IN FORTRAN AND C\n     * S.D. Stearns and R.A. David, Prentice-Hall, 1992\n     */\n    var wcn = Math.PI * fcn;\n    x /= l;\n    if (x < 0) x = 0;\n    if (x > 1) x = 1;\n    var x2 = x - .5;\n    var bkwn = 0.42 - 0.5 * Math.cos(2 * x * Math.PI) + 0.08 * Math.cos(4 * x * Math.PI);\n    if (Math.abs(x2) < 1e-9) return wcn / Math.PI;else return bkwn * Math.sin(l * wcn * x2) / (Math.PI * l * x2);\n  }\n  function fill_buffer_resample(gfp, outbuf, outbufPos, desired_len, inbuf, in_bufferPos, len, num_used, ch) {\n    var gfc = gfp.internal_flags;\n    var i,\n      j = 0,\n      k;\n    /* number of convolution functions to pre-compute */\n    var bpc = gfp.out_samplerate / gcd(gfp.out_samplerate, gfp.in_samplerate);\n    if (bpc > LameInternalFlags.BPC) bpc = LameInternalFlags.BPC;\n    var intratio = Math.abs(gfc.resample_ratio - Math.floor(.5 + gfc.resample_ratio)) < .0001 ? 1 : 0;\n    var fcn = 1.00 / gfc.resample_ratio;\n    if (fcn > 1.00) fcn = 1.00;\n    var filter_l = 31;\n    if (0 == filter_l % 2) --filter_l;\n    /* must be odd */\n    filter_l += intratio;\n    /* unless resample_ratio=int, it must be even */\n\n    var BLACKSIZE = filter_l + 1;\n    /* size of data needed for FIR */\n\n    if (gfc.fill_buffer_resample_init == 0) {\n      gfc.inbuf_old[0] = new_float(BLACKSIZE);\n      gfc.inbuf_old[1] = new_float(BLACKSIZE);\n      for (i = 0; i <= 2 * bpc; ++i) gfc.blackfilt[i] = new_float(BLACKSIZE);\n      gfc.itime[0] = 0;\n      gfc.itime[1] = 0;\n\n      /* precompute blackman filter coefficients */\n      for (j = 0; j <= 2 * bpc; j++) {\n        var sum = 0.;\n        var offset = (j - bpc) / (2. * bpc);\n        for (i = 0; i <= filter_l; i++) sum += gfc.blackfilt[j][i] = blackman(i - offset, fcn, filter_l);\n        for (i = 0; i <= filter_l; i++) gfc.blackfilt[j][i] /= sum;\n      }\n      gfc.fill_buffer_resample_init = 1;\n    }\n    var inbuf_old = gfc.inbuf_old[ch];\n\n    /* time of j'th element in inbuf = itime + j/ifreq; */\n    /* time of k'th element in outbuf = j/ofreq */\n    for (k = 0; k < desired_len; k++) {\n      var time0;\n      var joff;\n      time0 = k * gfc.resample_ratio;\n      /* time of k'th output sample */\n      j = 0 | Math.floor(time0 - gfc.itime[ch]);\n\n      /* check if we need more input data */\n      if (filter_l + j - filter_l / 2 >= len) break;\n\n      /* blackman filter. by default, window centered at j+.5(filter_l%2) */\n      /* but we want a window centered at time0. */\n      var offset = time0 - gfc.itime[ch] - (j + .5 * (filter_l % 2));\n      assert(Math.abs(offset) <= .501);\n\n      /* find the closest precomputed window for this offset: */\n      joff = 0 | Math.floor(offset * 2 * bpc + bpc + .5);\n      var xvalue = 0.;\n      for (i = 0; i <= filter_l; ++i) {\n        /* force integer index */\n        var j2 = 0 | i + j - filter_l / 2;\n        var y;\n        assert(j2 < len);\n        assert(j2 + BLACKSIZE >= 0);\n        y = j2 < 0 ? inbuf_old[BLACKSIZE + j2] : inbuf[in_bufferPos + j2];\n        xvalue += y * gfc.blackfilt[joff][i];\n      }\n      outbuf[outbufPos + k] = xvalue;\n    }\n\n    /* k = number of samples added to outbuf */\n    /* last k sample used data from [j-filter_l/2,j+filter_l-filter_l/2] */\n\n    /* how many samples of input data were used: */\n    num_used.num_used = Math.min(len, filter_l + j - filter_l / 2);\n\n    /*\n     * adjust our input time counter. Incriment by the number of samples\n     * used, then normalize so that next output sample is at time 0, next\n     * input buffer is at time itime[ch]\n     */\n    gfc.itime[ch] += num_used.num_used - k * gfc.resample_ratio;\n\n    /* save the last BLACKSIZE samples into the inbuf_old buffer */\n    if (num_used.num_used >= BLACKSIZE) {\n      for (i = 0; i < BLACKSIZE; i++) inbuf_old[i] = inbuf[in_bufferPos + num_used.num_used + i - BLACKSIZE];\n    } else {\n      /* shift in num_used.num_used samples into inbuf_old */\n      var n_shift = BLACKSIZE - num_used.num_used;\n      /*\n       * number of samples to\n       * shift\n       */\n\n      /*\n       * shift n_shift samples by num_used.num_used, to make room for the\n       * num_used new samples\n       */\n      for (i = 0; i < n_shift; ++i) inbuf_old[i] = inbuf_old[i + num_used.num_used];\n\n      /* shift in the num_used.num_used samples */\n      for (j = 0; i < BLACKSIZE; ++i, ++j) inbuf_old[i] = inbuf[in_bufferPos + j];\n      assert(j == num_used.num_used);\n    }\n    return k;\n    /* return the number samples created at the new samplerate */\n  }\n  function fill_buffer(gfp, mfbuf, in_buffer, in_bufferPos, nsamples, io) {\n    var gfc = gfp.internal_flags;\n\n    /* copy in new samples into mfbuf, with resampling if necessary */\n    if (gfc.resample_ratio < .9999 || gfc.resample_ratio > 1.0001) {\n      for (var ch = 0; ch < gfc.channels_out; ch++) {\n        var numUsed = new NumUsed();\n        io.n_out = fill_buffer_resample(gfp, mfbuf[ch], gfc.mf_size, gfp.framesize, in_buffer[ch], in_bufferPos, nsamples, numUsed, ch);\n        io.n_in = numUsed.num_used;\n      }\n    } else {\n      io.n_out = Math.min(gfp.framesize, nsamples);\n      io.n_in = io.n_out;\n      for (var i = 0; i < io.n_out; ++i) {\n        mfbuf[0][gfc.mf_size + i] = in_buffer[0][in_bufferPos + i];\n        if (gfc.channels_out == 2) mfbuf[1][gfc.mf_size + i] = in_buffer[1][in_bufferPos + i];\n      }\n    }\n  }\n}\nmodule.exports = Lame;","map":{"version":3,"names":["common","require","System","VbrMode","Float","ShortBlock","Util","Arrays","new_array_n","new_byte","new_double","new_float","new_float_n","new_int","new_int_n","new_short_n","assert","PsyModel","LameGlobalFlags","LameInternalFlags","ATH","ReplayGain","CBRNewIterationLoop","BitStream","Tables","Encoder","Lame","self","LAME_MAXALBUMART","V9","V8","V7","V6","V5","V4","V3","V2","V1","V0","R3MIX","STANDARD","EXTREME","INSANE","STANDARD_FAST","EXTREME_FAST","MEDIUM","MEDIUM_FAST","LAME_MAXMP3BUFFER","ga","bs","p","qupvt","qu","psy","vbr","ver","id3","mpglib","enc","setModules","_ga","_bs","_p","_qupvt","_qu","_vbr","_ver","_id3","_mpglib","PSY","mask_adjust","mask_adjust_short","bo_l_weight","SBMAX_l","bo_s_weight","SBMAX_s","LowPassHighPass","lowerlimit","BandPass","bitrate","lPass","lowpass","LAME_ID","lame_init_old","gfp","gfc","class_id","internal_flags","mode","MPEGMode","NOT_SET","original","in_samplerate","num_channels","num_samples","bWriteVbrTag","quality","short_blocks","subblock_gain","lowpassfreq","highpassfreq","lowpasswidth","highpasswidth","VBR","vbr_off","VBR_q","ATHcurve","VBR_mean_bitrate_kbps","VBR_min_bitrate_kbps","VBR_max_bitrate_kbps","VBR_hard_min","VBR_min_bitrate","VBR_max_bitrate","quant_comp","quant_comp_short","msfix","resample_ratio","OldValue","CurrentStep","masking_lower","nsPsy","attackthre","attackthre_s","scale","athaa_type","ATHtype","athaa_loudapprox","athaa_sensitivity","useTemporal","interChRatio","mf_samples_to_encode","ENCDELAY","POSTDELAY","encoder_padding","mf_size","MDCTDELAY","findReplayGain","decode_on_the_fly","findPeakSample","RadioGain","AudiophileGain","noclipGainChange","noclipScale","preset","write_id3tag_automatic","lame_init","ret","lame_allocated_gfp","filter_coef","x","Math","cos","PI","nearestBitrateFullIndex","full_bitrate_table","lower_range","lower_range_kbps","upper_range","upper_range_kbps","b","max","optimum_samplefreq","input_samplefreq","suggested_samplefreq","SmpFrqIndex","sample_freq","gpf","version","FindNearestBitrate","bRate","samplerate","bitrate_table","i","abs","BitrateIndex","optimum_bandwidth","lh","freq_map","table_index","lame_init_params_ppflt","lowpass_band","highpass_band","lowpass1","minband","band","freq","lowpass2","min","highpass2","highpass1","err","println","maxband","fc1","fc2","amp_filter","lame_init_qval","psymodel","noise_shaping","noise_shaping_amp","noise_shaping_stop","use_best_huffman","full_outer_loop","substep_shaping","lame_init_bitstream","frameNum","id3tag_write_v2","bitrate_stereoMode_Hist","bitrate_blockType_Hist","PeakSample","InitVbrTag","lame_init_params","Class_ID","rgdata","channels_in","MONO","channels_out","mode_ext","MPG_MD_MS_LR","force_ms","brate","vbr_mtrh","vbr_mt","free_format","EQ","compression_ratio","out_samplerate","map2MP3Frequency","int","samplerate_index","vbr_abr","vbr_rh","a","m","VBR_q_frac","linear_int","InitGainAnalysis","GainAnalysis","INIT_GAIN_ANALYSIS_ERROR","decode_only","hip","hip_decode_exit","hip_decode_init","mode_gr","framesize","encoder_delay","cmp","JOINT_STEREO","bitrate_index","analysis","pinfo","init_bit_stream_w","j","scalefac_band","l","sfBandIndex","PSFB21","size","start","psfb21","s","PSFB12","psfb12","sideinfo_len","error_protection","k","pefirbuf","apply_preset","LAME_DEFAULT_QUALITY","maskingadjust","maskingadjust_short","experimentalY","sfb21_extra","iteration_loop","VBRNewIterationLoop","VBROldIterationLoop","vbrmode","ABRIterationLoop","tune","tune_value_a","useAdjust","aaSensitivityP","pow","short_block_allowed","STEREO","short_block_coupled","exp_nspsytune","NSATTACKTHRE","NSATTACKTHRE_S","slot_lag","frac_SpF","iteration_init","psymodel_init","update_inbuffer_size","nsamples","in_buffer_0","in_buffer_nsamples","in_buffer_1","lame_encode_flush","mp3buffer","mp3bufferPos","mp3buffer_size","buffer","imp3","mp3count","mp3buffer_size_remaining","end_padding","frames_left","samples_to_encode","mf_needed","calcNeeded","bunch","frame_num","lame_encode_buffer","flush_bitstream","copy_buffer","id3tag_write_v1","buffer_l","buffer_r","mp3buf","mp3bufPos","mp3buf_size","in_buffer","lame_encode_buffer_sample","BLKSIZE","FFTOFFSET","MFSIZE","mp3size","ch","mp3out","mfbuf","NEQ","scale_left","scale_right","in_bufferPos","in_buffer_ptr","n_in","n_out","inOut","InOut","fill_buffer","AnalyzeSamples","GAIN_ANALYSIS_ERROR","buf_size","lame_encode_frame","inbuf_l","inbuf_r","lame_encode_mp3_frame","NumUsed","num_used","gcd","blackman","fcn","wcn","x2","bkwn","sin","fill_buffer_resample","outbuf","outbufPos","desired_len","inbuf","len","bpc","BPC","intratio","floor","filter_l","BLACKSIZE","fill_buffer_resample_init","inbuf_old","blackfilt","itime","sum","offset","time0","joff","xvalue","j2","y","n_shift","io","numUsed","module","exports"],"sources":["D:/代码/vscodeProjects/AiEducation/vue_aieducation/node_modules/lamejs/src/js/Lame.js"],"sourcesContent":["var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar new_short_n = common.new_short_n;\nvar assert = common.assert;\n\nvar PsyModel = require('./PsyModel.js');\nvar LameGlobalFlags = require('./LameGlobalFlags.js');\nvar LameInternalFlags = require('./LameInternalFlags.js');\nvar ATH = require('./ATH.js');\nvar ReplayGain = require('./ReplayGain.js');\nvar CBRNewIterationLoop = require('./CBRNewIterationLoop.js');\nvar BitStream = require('./BitStream.js');\nvar Tables = require('./Tables.js');\nvar Encoder = require('./Encoder.js');\n\nfunction Lame() {\n    var self = this;\n    var LAME_MAXALBUMART = (128 * 1024);\n\n    Lame.V9 = 410;\n    Lame.V8 = 420;\n    Lame.V7 = 430;\n    Lame.V6 = 440;\n    Lame.V5 = 450;\n    Lame.V4 = 460;\n    Lame.V3 = 470;\n    Lame.V2 = 480;\n    Lame.V1 = 490;\n    Lame.V0 = 500;\n\n    /* still there for compatibility */\n\n    Lame.R3MIX = 1000;\n    Lame.STANDARD = 1001;\n    Lame.EXTREME = 1002;\n    Lame.INSANE = 1003;\n    Lame.STANDARD_FAST = 1004;\n    Lame.EXTREME_FAST = 1005;\n    Lame.MEDIUM = 1006;\n    Lame.MEDIUM_FAST = 1007;\n\n    /**\n     * maximum size of mp3buffer needed if you encode at most 1152 samples for\n     * each call to lame_encode_buffer. see lame_encode_buffer() below\n     * (LAME_MAXMP3BUFFER is now obsolete)\n     */\n    var LAME_MAXMP3BUFFER = (16384 + LAME_MAXALBUMART);\n    Lame.LAME_MAXMP3BUFFER = LAME_MAXMP3BUFFER;\n\n    var ga;\n    var bs;\n    var p;\n    var qupvt;\n    var qu;\n    var psy = new PsyModel();\n    var vbr;\n    var ver;\n    var id3;\n    var mpglib;\n    this.enc = new Encoder();\n\n    this.setModules = function (_ga, _bs, _p, _qupvt, _qu, _vbr, _ver, _id3, _mpglib) {\n        ga = _ga;\n        bs = _bs;\n        p = _p;\n        qupvt = _qupvt;\n        qu = _qu;\n        vbr = _vbr;\n        ver = _ver;\n        id3 = _id3;\n        mpglib = _mpglib;\n        this.enc.setModules(bs, psy, qupvt, vbr);\n    }\n\n    /**\n     * PSY Model related stuff\n     */\n    function PSY() {\n        /**\n         * The dbQ stuff.\n         */\n        this.mask_adjust = 0.;\n        /**\n         * The dbQ stuff.\n         */\n        this.mask_adjust_short = 0.;\n        /* at transition from one scalefactor band to next */\n        /**\n         * Band weight long scalefactor bands.\n         */\n        this.bo_l_weight = new_float(Encoder.SBMAX_l);\n        /**\n         * Band weight short scalefactor bands.\n         */\n        this.bo_s_weight = new_float(Encoder.SBMAX_s);\n    }\n\n    function LowPassHighPass() {\n        this.lowerlimit = 0.;\n    }\n\n    function BandPass(bitrate, lPass) {\n        this.lowpass = lPass;\n    }\n\n    var LAME_ID = 0xFFF88E3B;\n\n    function lame_init_old(gfp) {\n        var gfc;\n\n        gfp.class_id = LAME_ID;\n\n        gfc = gfp.internal_flags = new LameInternalFlags();\n\n        /* Global flags. set defaults here for non-zero values */\n        /* see lame.h for description */\n        /*\n         * set integer values to -1 to mean that LAME will compute the best\n         * value, UNLESS the calling program as set it (and the value is no\n         * longer -1)\n         */\n\n        gfp.mode = MPEGMode.NOT_SET;\n        gfp.original = 1;\n        gfp.in_samplerate = 44100;\n        gfp.num_channels = 2;\n        gfp.num_samples = -1;\n\n        gfp.bWriteVbrTag = true;\n        gfp.quality = -1;\n        gfp.short_blocks = null;\n        gfc.subblock_gain = -1;\n\n        gfp.lowpassfreq = 0;\n        gfp.highpassfreq = 0;\n        gfp.lowpasswidth = -1;\n        gfp.highpasswidth = -1;\n\n        gfp.VBR = VbrMode.vbr_off;\n        gfp.VBR_q = 4;\n        gfp.ATHcurve = -1;\n        gfp.VBR_mean_bitrate_kbps = 128;\n        gfp.VBR_min_bitrate_kbps = 0;\n        gfp.VBR_max_bitrate_kbps = 0;\n        gfp.VBR_hard_min = 0;\n        gfc.VBR_min_bitrate = 1;\n        /* not 0 ????? */\n        gfc.VBR_max_bitrate = 13;\n        /* not 14 ????? */\n\n        gfp.quant_comp = -1;\n        gfp.quant_comp_short = -1;\n\n        gfp.msfix = -1;\n\n        gfc.resample_ratio = 1;\n\n        gfc.OldValue[0] = 180;\n        gfc.OldValue[1] = 180;\n        gfc.CurrentStep[0] = 4;\n        gfc.CurrentStep[1] = 4;\n        gfc.masking_lower = 1;\n        gfc.nsPsy.attackthre = -1;\n        gfc.nsPsy.attackthre_s = -1;\n\n        gfp.scale = -1;\n\n        gfp.athaa_type = -1;\n        gfp.ATHtype = -1;\n        /* default = -1 = set in lame_init_params */\n        gfp.athaa_loudapprox = -1;\n        /* 1 = flat loudness approx. (total energy) */\n        /* 2 = equal loudness curve */\n        gfp.athaa_sensitivity = 0.0;\n        /* no offset */\n        gfp.useTemporal = null;\n        gfp.interChRatio = -1;\n\n        /*\n         * The reason for int mf_samples_to_encode = ENCDELAY + POSTDELAY;\n         * ENCDELAY = internal encoder delay. And then we have to add\n         * POSTDELAY=288 because of the 50% MDCT overlap. A 576 MDCT granule\n         * decodes to 1152 samples. To synthesize the 576 samples centered under\n         * this granule we need the previous granule for the first 288 samples\n         * (no problem), and the next granule for the next 288 samples (not\n         * possible if this is last granule). So we need to pad with 288 samples\n         * to make sure we can encode the 576 samples we are interested in.\n         */\n        gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\n        gfp.encoder_padding = 0;\n        gfc.mf_size = Encoder.ENCDELAY - Encoder.MDCTDELAY;\n        /*\n         * we pad input with this many 0's\n         */\n\n        gfp.findReplayGain = false;\n        gfp.decode_on_the_fly = false;\n\n        gfc.decode_on_the_fly = false;\n        gfc.findReplayGain = false;\n        gfc.findPeakSample = false;\n\n        gfc.RadioGain = 0;\n        gfc.AudiophileGain = 0;\n        gfc.noclipGainChange = 0;\n        gfc.noclipScale = -1.0;\n\n        gfp.preset = 0;\n\n        gfp.write_id3tag_automatic = true;\n        return 0;\n    }\n\n    this.lame_init = function () {\n        var gfp = new LameGlobalFlags();\n\n        var ret = lame_init_old(gfp);\n        if (ret != 0) {\n            return null;\n        }\n\n        gfp.lame_allocated_gfp = 1;\n        return gfp;\n    }\n\n    function filter_coef(x) {\n        if (x > 1.0)\n            return 0.0;\n        if (x <= 0.0)\n            return 1.0;\n\n        return Math.cos(Math.PI / 2 * x);\n    }\n\n    this.nearestBitrateFullIndex = function (bitrate) {\n        /* borrowed from DM abr presets */\n\n        var full_bitrate_table = [8, 16, 24, 32, 40, 48, 56, 64, 80,\n            96, 112, 128, 160, 192, 224, 256, 320];\n\n        var lower_range = 0, lower_range_kbps = 0, upper_range = 0, upper_range_kbps = 0;\n\n        /* We assume specified bitrate will be 320kbps */\n        upper_range_kbps = full_bitrate_table[16];\n        upper_range = 16;\n        lower_range_kbps = full_bitrate_table[16];\n        lower_range = 16;\n\n        /*\n         * Determine which significant bitrates the value specified falls\n         * between, if loop ends without breaking then we were correct above\n         * that the value was 320\n         */\n        for (var b = 0; b < 16; b++) {\n            if ((Math.max(bitrate, full_bitrate_table[b + 1])) != bitrate) {\n                upper_range_kbps = full_bitrate_table[b + 1];\n                upper_range = b + 1;\n                lower_range_kbps = full_bitrate_table[b];\n                lower_range = (b);\n                break;\n                /* We found upper range */\n            }\n        }\n\n        /* Determine which range the value specified is closer to */\n        if ((upper_range_kbps - bitrate) > (bitrate - lower_range_kbps)) {\n            return lower_range;\n        }\n        return upper_range;\n    }\n\n    function optimum_samplefreq(lowpassfreq, input_samplefreq) {\n        /*\n         * Rules:\n         *\n         * - if possible, sfb21 should NOT be used\n         */\n        var suggested_samplefreq = 44100;\n\n        if (input_samplefreq >= 48000)\n            suggested_samplefreq = 48000;\n        else if (input_samplefreq >= 44100)\n            suggested_samplefreq = 44100;\n        else if (input_samplefreq >= 32000)\n            suggested_samplefreq = 32000;\n        else if (input_samplefreq >= 24000)\n            suggested_samplefreq = 24000;\n        else if (input_samplefreq >= 22050)\n            suggested_samplefreq = 22050;\n        else if (input_samplefreq >= 16000)\n            suggested_samplefreq = 16000;\n        else if (input_samplefreq >= 12000)\n            suggested_samplefreq = 12000;\n        else if (input_samplefreq >= 11025)\n            suggested_samplefreq = 11025;\n        else if (input_samplefreq >= 8000)\n            suggested_samplefreq = 8000;\n\n        if (lowpassfreq == -1)\n            return suggested_samplefreq;\n\n        if (lowpassfreq <= 15960)\n            suggested_samplefreq = 44100;\n        if (lowpassfreq <= 15250)\n            suggested_samplefreq = 32000;\n        if (lowpassfreq <= 11220)\n            suggested_samplefreq = 24000;\n        if (lowpassfreq <= 9970)\n            suggested_samplefreq = 22050;\n        if (lowpassfreq <= 7230)\n            suggested_samplefreq = 16000;\n        if (lowpassfreq <= 5420)\n            suggested_samplefreq = 12000;\n        if (lowpassfreq <= 4510)\n            suggested_samplefreq = 11025;\n        if (lowpassfreq <= 3970)\n            suggested_samplefreq = 8000;\n\n        if (input_samplefreq < suggested_samplefreq) {\n            /*\n             * choose a valid MPEG sample frequency above the input sample\n             * frequency to avoid SFB21/12 bitrate bloat rh 061115\n             */\n            if (input_samplefreq > 44100) {\n                return 48000;\n            }\n            if (input_samplefreq > 32000) {\n                return 44100;\n            }\n            if (input_samplefreq > 24000) {\n                return 32000;\n            }\n            if (input_samplefreq > 22050) {\n                return 24000;\n            }\n            if (input_samplefreq > 16000) {\n                return 22050;\n            }\n            if (input_samplefreq > 12000) {\n                return 16000;\n            }\n            if (input_samplefreq > 11025) {\n                return 12000;\n            }\n            if (input_samplefreq > 8000) {\n                return 11025;\n            }\n            return 8000;\n        }\n        return suggested_samplefreq;\n    }\n\n    /**\n     * convert samp freq in Hz to index\n     */\n    function SmpFrqIndex(sample_freq, gpf) {\n        switch (sample_freq) {\n            case 44100:\n                gpf.version = 1;\n                return 0;\n            case 48000:\n                gpf.version = 1;\n                return 1;\n            case 32000:\n                gpf.version = 1;\n                return 2;\n            case 22050:\n                gpf.version = 0;\n                return 0;\n            case 24000:\n                gpf.version = 0;\n                return 1;\n            case 16000:\n                gpf.version = 0;\n                return 2;\n            case 11025:\n                gpf.version = 0;\n                return 0;\n            case 12000:\n                gpf.version = 0;\n                return 1;\n            case 8000:\n                gpf.version = 0;\n                return 2;\n            default:\n                gpf.version = 0;\n                return -1;\n        }\n    }\n\n    /**\n     * @param bRate\n     *            legal rates from 8 to 320\n     */\n    function FindNearestBitrate(bRate, version, samplerate) {\n        /* MPEG-1 or MPEG-2 LSF */\n        if (samplerate < 16000)\n            version = 2;\n\n        var bitrate = Tables.bitrate_table[version][1];\n\n        for (var i = 2; i <= 14; i++) {\n            if (Tables.bitrate_table[version][i] > 0) {\n                if (Math.abs(Tables.bitrate_table[version][i] - bRate) < Math\n                        .abs(bitrate - bRate))\n                    bitrate = Tables.bitrate_table[version][i];\n            }\n        }\n        return bitrate;\n    }\n\n    /**\n     * @param bRate\n     *            legal rates from 32 to 448 kbps\n     * @param version\n     *            MPEG-1 or MPEG-2/2.5 LSF\n     */\n    function BitrateIndex(bRate, version, samplerate) {\n        /* convert bitrate in kbps to index */\n        if (samplerate < 16000)\n            version = 2;\n        for (var i = 0; i <= 14; i++) {\n            if (Tables.bitrate_table[version][i] > 0) {\n                if (Tables.bitrate_table[version][i] == bRate) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    function optimum_bandwidth(lh, bitrate) {\n        /**\n         * <PRE>\n         *  Input:\n         *      bitrate     total bitrate in kbps\n         *\n         *   Output:\n         *      lowerlimit: best lowpass frequency limit for input filter in Hz\n         *      upperlimit: best highpass frequency limit for input filter in Hz\n         * </PRE>\n         */\n        var freq_map = [new BandPass(8, 2000),\n            new BandPass(16, 3700), new BandPass(24, 3900),\n            new BandPass(32, 5500), new BandPass(40, 7000),\n            new BandPass(48, 7500), new BandPass(56, 10000),\n            new BandPass(64, 11000), new BandPass(80, 13500),\n            new BandPass(96, 15100), new BandPass(112, 15600),\n            new BandPass(128, 17000), new BandPass(160, 17500),\n            new BandPass(192, 18600), new BandPass(224, 19400),\n            new BandPass(256, 19700), new BandPass(320, 20500)];\n\n        var table_index = self.nearestBitrateFullIndex(bitrate);\n        lh.lowerlimit = freq_map[table_index].lowpass;\n    }\n\n    function lame_init_params_ppflt(gfp) {\n        var gfc = gfp.internal_flags;\n        /***************************************************************/\n        /* compute info needed for polyphase filter (filter type==0, default) */\n        /***************************************************************/\n\n        var lowpass_band = 32;\n        var highpass_band = -1;\n\n        if (gfc.lowpass1 > 0) {\n            var minband = 999;\n            for (var band = 0; band <= 31; band++) {\n                var freq = (band / 31.0);\n                /* this band and above will be zeroed: */\n                if (freq >= gfc.lowpass2) {\n                    lowpass_band = Math.min(lowpass_band, band);\n                }\n                if (gfc.lowpass1 < freq && freq < gfc.lowpass2) {\n                    minband = Math.min(minband, band);\n                }\n            }\n\n            /*\n             * compute the *actual* transition band implemented by the polyphase\n             * filter\n             */\n            if (minband == 999) {\n                gfc.lowpass1 = (lowpass_band - .75) / 31.0;\n            } else {\n                gfc.lowpass1 = (minband - .75) / 31.0;\n            }\n            gfc.lowpass2 = lowpass_band / 31.0;\n        }\n\n        /*\n         * make sure highpass filter is within 90% of what the effective\n         * highpass frequency will be\n         */\n        if (gfc.highpass2 > 0) {\n            if (gfc.highpass2 < .9 * (.75 / 31.0)) {\n                gfc.highpass1 = 0;\n                gfc.highpass2 = 0;\n                System.err.println(\"Warning: highpass filter disabled.  \"\n                    + \"highpass frequency too small\\n\");\n            }\n        }\n\n        if (gfc.highpass2 > 0) {\n            var maxband = -1;\n            for (var band = 0; band <= 31; band++) {\n                var freq = band / 31.0;\n                /* this band and below will be zereod */\n                if (freq <= gfc.highpass1) {\n                    highpass_band = Math.max(highpass_band, band);\n                }\n                if (gfc.highpass1 < freq && freq < gfc.highpass2) {\n                    maxband = Math.max(maxband, band);\n                }\n            }\n            /*\n             * compute the *actual* transition band implemented by the polyphase\n             * filter\n             */\n            gfc.highpass1 = highpass_band / 31.0;\n            if (maxband == -1) {\n                gfc.highpass2 = (highpass_band + .75) / 31.0;\n            } else {\n                gfc.highpass2 = (maxband + .75) / 31.0;\n            }\n        }\n\n        for (var band = 0; band < 32; band++) {\n            var fc1, fc2;\n            var freq = band / 31.0;\n            if (gfc.highpass2 > gfc.highpass1) {\n                fc1 = filter_coef((gfc.highpass2 - freq)\n                    / (gfc.highpass2 - gfc.highpass1 + 1e-20));\n            } else {\n                fc1 = 1.0;\n            }\n            if (gfc.lowpass2 > gfc.lowpass1) {\n                fc2 = filter_coef((freq - gfc.lowpass1)\n                    / (gfc.lowpass2 - gfc.lowpass1 + 1e-20));\n            } else {\n                fc2 = 1.0;\n            }\n            gfc.amp_filter[band] = (fc1 * fc2);\n        }\n    }\n\n    function lame_init_qval(gfp) {\n        var gfc = gfp.internal_flags;\n\n        switch (gfp.quality) {\n            default:\n            case 9: /* no psymodel, no noise shaping */\n                gfc.psymodel = 0;\n                gfc.noise_shaping = 0;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 8:\n                gfp.quality = 7;\n            //$FALL-THROUGH$\n            case 7:\n                /*\n                 * use psymodel (for short block and m/s switching), but no noise\n                 * shapping\n                 */\n                gfc.psymodel = 1;\n                gfc.noise_shaping = 0;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 6:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 5:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 4:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 3:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 1;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 2:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 1;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                /* inner loop */\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 1:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 2;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 0:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 2;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                /*\n                 * type 2 disabled because of it slowness, in favor of full outer\n                 * loop search\n                 */\n                gfc.full_outer_loop = 0;\n                /*\n                 * full outer loop search disabled because of audible distortions it\n                 * may generate rh 060629\n                 */\n                break;\n        }\n\n    }\n\n    function lame_init_bitstream(gfp) {\n        var gfc = gfp.internal_flags;\n        gfp.frameNum = 0;\n\n        if (gfp.write_id3tag_automatic) {\n            id3.id3tag_write_v2(gfp);\n        }\n        /* initialize histogram data optionally used by frontend */\n\n        gfc.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\n        gfc.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\n\n        gfc.PeakSample = 0.0;\n\n        /* Write initial VBR Header to bitstream and init VBR data */\n        if (gfp.bWriteVbrTag)\n            vbr.InitVbrTag(gfp);\n    }\n\n    /********************************************************************\n     * initialize internal params based on data in gf (globalflags struct filled\n     * in by calling program)\n     *\n     * OUTLINE:\n     *\n     * We first have some complex code to determine bitrate, output samplerate\n     * and mode. It is complicated by the fact that we allow the user to set\n     * some or all of these parameters, and need to determine best possible\n     * values for the rest of them:\n     *\n     * 1. set some CPU related flags 2. check if we are mono.mono, stereo.mono\n     * or stereo.stereo 3. compute bitrate and output samplerate: user may have\n     * set compression ratio user may have set a bitrate user may have set a\n     * output samplerate 4. set some options which depend on output samplerate\n     * 5. compute the actual compression ratio 6. set mode based on compression\n     * ratio\n     *\n     * The remaining code is much simpler - it just sets options based on the\n     * mode & compression ratio:\n     *\n     * set allow_diff_short based on mode select lowpass filter based on\n     * compression ratio & mode set the bitrate index, and min/max bitrates for\n     * VBR modes disable VBR tag if it is not appropriate initialize the\n     * bitstream initialize scalefac_band data set sideinfo_len (based on\n     * channels, CRC, out_samplerate) write an id3v2 tag into the bitstream\n     * write VBR tag into the bitstream set mpeg1/2 flag estimate the number of\n     * frames (based on a lot of data)\n     *\n     * now we set more flags: nspsytune: see code VBR modes see code CBR/ABR see\n     * code\n     *\n     * Finally, we set the algorithm flags based on the gfp.quality value\n     * lame_init_qval(gfp);\n     *\n     ********************************************************************/\n    this.lame_init_params = function (gfp) {\n        var gfc = gfp.internal_flags;\n\n        gfc.Class_ID = 0;\n        if (gfc.ATH == null)\n            gfc.ATH = new ATH();\n        if (gfc.PSY == null)\n            gfc.PSY = new PSY();\n        if (gfc.rgdata == null)\n            gfc.rgdata = new ReplayGain();\n\n        gfc.channels_in = gfp.num_channels;\n        if (gfc.channels_in == 1)\n            gfp.mode = MPEGMode.MONO;\n        gfc.channels_out = (gfp.mode == MPEGMode.MONO) ? 1 : 2;\n        gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n        if (gfp.mode == MPEGMode.MONO)\n            gfp.force_ms = false;\n        /*\n         * don't allow forced mid/side stereo for mono output\n         */\n\n        if (gfp.VBR == VbrMode.vbr_off && gfp.VBR_mean_bitrate_kbps != 128\n            && gfp.brate == 0)\n            gfp.brate = gfp.VBR_mean_bitrate_kbps;\n\n        if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_mtrh\n            || gfp.VBR == VbrMode.vbr_mt) {\n            /* these modes can handle free format condition */\n        } else {\n            gfp.free_format = false;\n            /* mode can't be mixed with free format */\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off && gfp.brate == 0) {\n            /* no bitrate or compression ratio specified, use 11.025 */\n            if (BitStream.EQ(gfp.compression_ratio, 0))\n                gfp.compression_ratio = 11.025;\n            /*\n             * rate to compress a CD down to exactly 128000 bps\n             */\n        }\n\n        /* find bitrate if user specify a compression ratio */\n        if (gfp.VBR == VbrMode.vbr_off && gfp.compression_ratio > 0) {\n\n            if (gfp.out_samplerate == 0)\n                gfp.out_samplerate = map2MP3Frequency((int)(0.97 * gfp.in_samplerate));\n            /*\n             * round up with a margin of 3 %\n             */\n\n            /*\n             * choose a bitrate for the output samplerate which achieves\n             * specified compression ratio\n             */\n            gfp.brate = 0 | (gfp.out_samplerate * 16 * gfc.channels_out / (1.e3 * gfp.compression_ratio));\n\n            /* we need the version for the bitrate table look up */\n            gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\n\n            if (!gfp.free_format) /*\n             * for non Free Format find the nearest allowed\n             * bitrate\n             */\n                gfp.brate = FindNearestBitrate(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n        }\n\n        if (gfp.out_samplerate != 0) {\n            if (gfp.out_samplerate < 16000) {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    8);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    64);\n            } else if (gfp.out_samplerate < 32000) {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    8);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    160);\n            } else {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    32);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    320);\n            }\n        }\n\n        /****************************************************************/\n        /* if a filter has not been enabled, see if we should add one: */\n        /****************************************************************/\n        if (gfp.lowpassfreq == 0) {\n            var lowpass = 16000.;\n\n            switch (gfp.VBR) {\n                case VbrMode.vbr_off:\n                {\n                    var lh = new LowPassHighPass();\n                    optimum_bandwidth(lh, gfp.brate);\n                    lowpass = lh.lowerlimit;\n                    break;\n                }\n                case VbrMode.vbr_abr:\n                {\n                    var lh = new LowPassHighPass();\n                    optimum_bandwidth(lh, gfp.VBR_mean_bitrate_kbps);\n                    lowpass = lh.lowerlimit;\n                    break;\n                }\n                case VbrMode.vbr_rh:\n                {\n                    var x = [19500, 19000, 18600, 18000, 17500, 16000,\n                        15600, 14900, 12500, 10000, 3950];\n                    if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\n                        var a = x[gfp.VBR_q], b = x[gfp.VBR_q + 1], m = gfp.VBR_q_frac;\n                        lowpass = linear_int(a, b, m);\n                    } else {\n                        lowpass = 19500;\n                    }\n                    break;\n                }\n                default:\n                {\n                    var x = [19500, 19000, 18500, 18000, 17500, 16500,\n                        15500, 14500, 12500, 9500, 3950];\n                    if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\n                        var a = x[gfp.VBR_q], b = x[gfp.VBR_q + 1], m = gfp.VBR_q_frac;\n                        lowpass = linear_int(a, b, m);\n                    } else {\n                        lowpass = 19500;\n                    }\n                }\n            }\n            if (gfp.mode == MPEGMode.MONO\n                && (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr))\n                lowpass *= 1.5;\n\n            gfp.lowpassfreq = lowpass | 0;\n        }\n\n        if (gfp.out_samplerate == 0) {\n            if (2 * gfp.lowpassfreq > gfp.in_samplerate) {\n                gfp.lowpassfreq = gfp.in_samplerate / 2;\n            }\n            gfp.out_samplerate = optimum_samplefreq(gfp.lowpassfreq | 0,\n                gfp.in_samplerate);\n        }\n\n        gfp.lowpassfreq = Math.min(20500, gfp.lowpassfreq);\n        gfp.lowpassfreq = Math.min(gfp.out_samplerate / 2, gfp.lowpassfreq);\n\n        if (gfp.VBR == VbrMode.vbr_off) {\n            gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                / (1.e3 * gfp.brate);\n        }\n        if (gfp.VBR == VbrMode.vbr_abr) {\n            gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                / (1.e3 * gfp.VBR_mean_bitrate_kbps);\n        }\n\n        /*\n         * do not compute ReplayGain values and do not find the peak sample if\n         * we can't store them\n         */\n        if (!gfp.bWriteVbrTag) {\n            gfp.findReplayGain = false;\n            gfp.decode_on_the_fly = false;\n            gfc.findPeakSample = false;\n        }\n        gfc.findReplayGain = gfp.findReplayGain;\n        gfc.decode_on_the_fly = gfp.decode_on_the_fly;\n\n        if (gfc.decode_on_the_fly)\n            gfc.findPeakSample = true;\n\n        if (gfc.findReplayGain) {\n            if (ga.InitGainAnalysis(gfc.rgdata, gfp.out_samplerate) == GainAnalysis.INIT_GAIN_ANALYSIS_ERROR) {\n                gfp.internal_flags = null;\n                return -6;\n            }\n        }\n\n        if (gfc.decode_on_the_fly && !gfp.decode_only) {\n            if (gfc.hip != null) {\n                mpglib.hip_decode_exit(gfc.hip);\n            }\n            gfc.hip = mpglib.hip_decode_init();\n        }\n\n        gfc.mode_gr = gfp.out_samplerate <= 24000 ? 1 : 2;\n        /*\n         * Number of granules per frame\n         */\n        gfp.framesize = 576 * gfc.mode_gr;\n        gfp.encoder_delay = Encoder.ENCDELAY;\n\n        gfc.resample_ratio = gfp.in_samplerate / gfp.out_samplerate;\n\n        /**\n         * <PRE>\n         *  sample freq       bitrate     compression ratio\n         *     [kHz]      [kbps/channel]   for 16 bit input\n         *     44.1            56               12.6\n         *     44.1            64               11.025\n         *     44.1            80                8.82\n         *     22.05           24               14.7\n         *     22.05           32               11.025\n         *     22.05           40                8.82\n         *     16              16               16.0\n         *     16              24               10.667\n         * </PRE>\n         */\n        /**\n         * <PRE>\n         *  For VBR, take a guess at the compression_ratio.\n         *  For example:\n         *\n         *    VBR_q    compression     like\n         *     -        4.4         320 kbps/44 kHz\n         *   0...1      5.5         256 kbps/44 kHz\n         *     2        7.3         192 kbps/44 kHz\n         *     4        8.8         160 kbps/44 kHz\n         *     6       11           128 kbps/44 kHz\n         *     9       14.7          96 kbps\n         *\n         *  for lower bitrates, downsample with --resample\n         * </PRE>\n         */\n        switch (gfp.VBR) {\n            case VbrMode.vbr_mt:\n            case VbrMode.vbr_rh:\n            case VbrMode.vbr_mtrh:\n            {\n                /* numbers are a bit strange, but they determine the lowpass value */\n                var cmp = [5.7, 6.5, 7.3, 8.2, 10, 11.9, 13, 14,\n                    15, 16.5];\n                gfp.compression_ratio = cmp[gfp.VBR_q];\n            }\n                break;\n            case VbrMode.vbr_abr:\n                gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                    / (1.e3 * gfp.VBR_mean_bitrate_kbps);\n                break;\n            default:\n                gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                    / (1.e3 * gfp.brate);\n                break;\n        }\n\n        /*\n         * mode = -1 (not set by user) or mode = MONO (because of only 1 input\n         * channel). If mode has not been set, then select J-STEREO\n         */\n        if (gfp.mode == MPEGMode.NOT_SET) {\n            gfp.mode = MPEGMode.JOINT_STEREO;\n        }\n\n        /* apply user driven high pass filter */\n        if (gfp.highpassfreq > 0) {\n            gfc.highpass1 = 2. * gfp.highpassfreq;\n\n            if (gfp.highpasswidth >= 0)\n                gfc.highpass2 = 2. * (gfp.highpassfreq + gfp.highpasswidth);\n            else\n            /* 0% above on default */\n                gfc.highpass2 = (1 + 0.00) * 2. * gfp.highpassfreq;\n\n            gfc.highpass1 /= gfp.out_samplerate;\n            gfc.highpass2 /= gfp.out_samplerate;\n        } else {\n            gfc.highpass1 = 0;\n            gfc.highpass2 = 0;\n        }\n        /* apply user driven low pass filter */\n        if (gfp.lowpassfreq > 0) {\n            gfc.lowpass2 = 2. * gfp.lowpassfreq;\n            if (gfp.lowpasswidth >= 0) {\n                gfc.lowpass1 = 2. * (gfp.lowpassfreq - gfp.lowpasswidth);\n                if (gfc.lowpass1 < 0) /* has to be >= 0 */\n                    gfc.lowpass1 = 0;\n            } else { /* 0% below on default */\n                gfc.lowpass1 = (1 - 0.00) * 2. * gfp.lowpassfreq;\n            }\n            gfc.lowpass1 /= gfp.out_samplerate;\n            gfc.lowpass2 /= gfp.out_samplerate;\n        } else {\n            gfc.lowpass1 = 0;\n            gfc.lowpass2 = 0;\n        }\n\n        /**********************************************************************/\n        /* compute info needed for polyphase filter (filter type==0, default) */\n        /**********************************************************************/\n        lame_init_params_ppflt(gfp);\n        /*******************************************************\n         * samplerate and bitrate index\n         *******************************************************/\n        gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\n        if (gfc.samplerate_index < 0) {\n            gfp.internal_flags = null;\n            return -1;\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off) {\n            if (gfp.free_format) {\n                gfc.bitrate_index = 0;\n            } else {\n                gfp.brate = FindNearestBitrate(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n                gfc.bitrate_index = BitrateIndex(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n                if (gfc.bitrate_index <= 0) {\n                    gfp.internal_flags = null;\n                    return -1;\n                }\n            }\n        } else {\n            gfc.bitrate_index = 1;\n        }\n\n        /* for CBR, we will write an \"info\" tag. */\n\n        if (gfp.analysis)\n            gfp.bWriteVbrTag = false;\n\n        /* some file options not allowed if output is: not specified or stdout */\n        if (gfc.pinfo != null)\n            gfp.bWriteVbrTag = false;\n        /* disable Xing VBR tag */\n\n        bs.init_bit_stream_w(gfc);\n\n        var j = gfc.samplerate_index + (3 * gfp.version) + 6\n            * (gfp.out_samplerate < 16000 ? 1 : 0);\n        for (var i = 0; i < Encoder.SBMAX_l + 1; i++)\n            gfc.scalefac_band.l[i] = qupvt.sfBandIndex[j].l[i];\n\n        for (var i = 0; i < Encoder.PSFB21 + 1; i++) {\n            var size = (gfc.scalefac_band.l[22] - gfc.scalefac_band.l[21])\n                / Encoder.PSFB21;\n            var start = gfc.scalefac_band.l[21] + i * size;\n            gfc.scalefac_band.psfb21[i] = start;\n        }\n        gfc.scalefac_band.psfb21[Encoder.PSFB21] = 576;\n\n        for (var i = 0; i < Encoder.SBMAX_s + 1; i++)\n            gfc.scalefac_band.s[i] = qupvt.sfBandIndex[j].s[i];\n\n        for (var i = 0; i < Encoder.PSFB12 + 1; i++) {\n            var size = (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12])\n                / Encoder.PSFB12;\n            var start = gfc.scalefac_band.s[12] + i * size;\n            gfc.scalefac_band.psfb12[i] = start;\n        }\n        gfc.scalefac_band.psfb12[Encoder.PSFB12] = 192;\n        /* determine the mean bitrate for main data */\n        if (gfp.version == 1) /* MPEG 1 */\n            gfc.sideinfo_len = (gfc.channels_out == 1) ? 4 + 17 : 4 + 32;\n        else\n        /* MPEG 2 */\n            gfc.sideinfo_len = (gfc.channels_out == 1) ? 4 + 9 : 4 + 17;\n\n        if (gfp.error_protection)\n            gfc.sideinfo_len += 2;\n\n        lame_init_bitstream(gfp);\n\n        gfc.Class_ID = LAME_ID;\n\n        {\n            var k;\n\n            for (k = 0; k < 19; k++)\n                gfc.nsPsy.pefirbuf[k] = 700 * gfc.mode_gr * gfc.channels_out;\n\n            if (gfp.ATHtype == -1)\n                gfp.ATHtype = 4;\n        }\n        assert(gfp.VBR_q <= 9);\n        assert(gfp.VBR_q >= 0);\n\n        switch (gfp.VBR) {\n\n            case VbrMode.vbr_mt:\n                gfp.VBR = VbrMode.vbr_mtrh;\n            //$FALL-THROUGH$\n            case VbrMode.vbr_mtrh:\n            {\n                if (gfp.useTemporal == null) {\n                    gfp.useTemporal = false;\n                    /* off by default for this VBR mode */\n                }\n\n                p.apply_preset(gfp, 500 - (gfp.VBR_q * 10), 0);\n                /**\n                 * <PRE>\n                 *   The newer VBR code supports only a limited\n                 *     subset of quality levels:\n                 *     9-5=5 are the same, uses x^3/4 quantization\n                 *   4-0=0 are the same  5 plus best huffman divide code\n                 * </PRE>\n                 */\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n                if (gfp.quality < 5)\n                    gfp.quality = 0;\n                if (gfp.quality > 5)\n                    gfp.quality = 5;\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                /*\n                 * sfb21 extra only with MPEG-1 at higher sampling rates\n                 */\n                if (gfp.experimentalY)\n                    gfc.sfb21_extra = false;\n                else\n                    gfc.sfb21_extra = (gfp.out_samplerate > 44000);\n\n                gfc.iteration_loop = new VBRNewIterationLoop(qu);\n                break;\n\n            }\n            case VbrMode.vbr_rh:\n            {\n\n                p.apply_preset(gfp, 500 - (gfp.VBR_q * 10), 0);\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                /*\n                 * sfb21 extra only with MPEG-1 at higher sampling rates\n                 */\n                if (gfp.experimentalY)\n                    gfc.sfb21_extra = false;\n                else\n                    gfc.sfb21_extra = (gfp.out_samplerate > 44000);\n\n                /*\n                 * VBR needs at least the output of GPSYCHO, so we have to garantee\n                 * that by setting a minimum quality level, actually level 6 does\n                 * it. down to level 6\n                 */\n                if (gfp.quality > 6)\n                    gfp.quality = 6;\n\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n\n                gfc.iteration_loop = new VBROldIterationLoop(qu);\n                break;\n            }\n\n            default: /* cbr/abr */\n            {\n                var vbrmode;\n\n                /*\n                 * no sfb21 extra with CBR code\n                 */\n                gfc.sfb21_extra = false;\n\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n\n                vbrmode = gfp.VBR;\n                if (vbrmode == VbrMode.vbr_off)\n                    gfp.VBR_mean_bitrate_kbps = gfp.brate;\n                /* second, set parameters depending on bitrate */\n                p.apply_preset(gfp, gfp.VBR_mean_bitrate_kbps, 0);\n                gfp.VBR = vbrmode;\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                if (vbrmode == VbrMode.vbr_off) {\n                    gfc.iteration_loop = new CBRNewIterationLoop(qu);\n                } else {\n                    gfc.iteration_loop = new ABRIterationLoop(qu);\n                }\n                break;\n            }\n        }\n        assert(gfp.scale >= 0);\n        /* initialize default values common for all modes */\n\n        if (gfp.VBR != VbrMode.vbr_off) { /* choose a min/max bitrate for VBR */\n            /* if the user didn't specify VBR_max_bitrate: */\n            gfc.VBR_min_bitrate = 1;\n            /*\n             * default: allow 8 kbps (MPEG-2) or 32 kbps (MPEG-1)\n             */\n            gfc.VBR_max_bitrate = 14;\n            /*\n             * default: allow 160 kbps (MPEG-2) or 320 kbps (MPEG-1)\n             */\n            if (gfp.out_samplerate < 16000)\n                gfc.VBR_max_bitrate = 8;\n            /* default: allow 64 kbps (MPEG-2.5) */\n            if (gfp.VBR_min_bitrate_kbps != 0) {\n                gfp.VBR_min_bitrate_kbps = FindNearestBitrate(\n                    gfp.VBR_min_bitrate_kbps, gfp.version,\n                    gfp.out_samplerate);\n                gfc.VBR_min_bitrate = BitrateIndex(gfp.VBR_min_bitrate_kbps,\n                    gfp.version, gfp.out_samplerate);\n                if (gfc.VBR_min_bitrate < 0)\n                    return -1;\n            }\n            if (gfp.VBR_max_bitrate_kbps != 0) {\n                gfp.VBR_max_bitrate_kbps = FindNearestBitrate(\n                    gfp.VBR_max_bitrate_kbps, gfp.version,\n                    gfp.out_samplerate);\n                gfc.VBR_max_bitrate = BitrateIndex(gfp.VBR_max_bitrate_kbps,\n                    gfp.version, gfp.out_samplerate);\n                if (gfc.VBR_max_bitrate < 0)\n                    return -1;\n            }\n            gfp.VBR_min_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate];\n            gfp.VBR_max_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate];\n            gfp.VBR_mean_bitrate_kbps = Math.min(\n                Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate],\n                gfp.VBR_mean_bitrate_kbps);\n            gfp.VBR_mean_bitrate_kbps = Math.max(\n                Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate],\n                gfp.VBR_mean_bitrate_kbps);\n        }\n\n        /* just another daily changing developer switch */\n        if (gfp.tune) {\n            gfc.PSY.mask_adjust += gfp.tune_value_a;\n            gfc.PSY.mask_adjust_short += gfp.tune_value_a;\n        }\n\n        /* initialize internal qval settings */\n        lame_init_qval(gfp);\n        assert(gfp.scale >= 0);\n        /*\n         * automatic ATH adjustment on\n         */\n        if (gfp.athaa_type < 0)\n            gfc.ATH.useAdjust = 3;\n        else\n            gfc.ATH.useAdjust = gfp.athaa_type;\n\n        /* initialize internal adaptive ATH settings -jd */\n        gfc.ATH.aaSensitivityP = Math.pow(10.0, gfp.athaa_sensitivity\n            / -10.0);\n\n        if (gfp.short_blocks == null) {\n            gfp.short_blocks = ShortBlock.short_block_allowed;\n        }\n\n        /*\n         * Note Jan/2003: Many hardware decoders cannot handle short blocks in\n         * regular stereo mode unless they are coupled (same type in both\n         * channels) it is a rare event (1 frame per min. or so) that LAME would\n         * use uncoupled short blocks, so lets turn them off until we decide how\n         * to handle this. No other encoders allow uncoupled short blocks, even\n         * though it is in the standard.\n         */\n        /*\n         * rh 20040217: coupling makes no sense for mono and dual-mono streams\n         */\n        if (gfp.short_blocks == ShortBlock.short_block_allowed\n            && (gfp.mode == MPEGMode.JOINT_STEREO || gfp.mode == MPEGMode.STEREO)) {\n            gfp.short_blocks = ShortBlock.short_block_coupled;\n        }\n\n        if (gfp.quant_comp < 0)\n            gfp.quant_comp = 1;\n        if (gfp.quant_comp_short < 0)\n            gfp.quant_comp_short = 0;\n\n        if (gfp.msfix < 0)\n            gfp.msfix = 0;\n\n        /* select psychoacoustic model */\n        gfp.exp_nspsytune = gfp.exp_nspsytune | 1;\n\n        if (gfp.internal_flags.nsPsy.attackthre < 0)\n            gfp.internal_flags.nsPsy.attackthre = PsyModel.NSATTACKTHRE;\n        if (gfp.internal_flags.nsPsy.attackthre_s < 0)\n            gfp.internal_flags.nsPsy.attackthre_s = PsyModel.NSATTACKTHRE_S;\n\n        assert(gfp.scale >= 0);\n\n        if (gfp.scale < 0)\n            gfp.scale = 1;\n\n        if (gfp.ATHtype < 0)\n            gfp.ATHtype = 4;\n\n        if (gfp.ATHcurve < 0)\n            gfp.ATHcurve = 4;\n\n        if (gfp.athaa_loudapprox < 0)\n            gfp.athaa_loudapprox = 2;\n\n        if (gfp.interChRatio < 0)\n            gfp.interChRatio = 0;\n\n        if (gfp.useTemporal == null)\n            gfp.useTemporal = true;\n        /* on by default */\n\n        /*\n         * padding method as described in\n         * \"MPEG-Layer3 / Bitstream Syntax and Decoding\" by Martin Sieler, Ralph\n         * Sperschneider\n         *\n         * note: there is no padding for the very first frame\n         *\n         * Robert Hegemann 2000-06-22\n         */\n        gfc.slot_lag = gfc.frac_SpF = 0;\n        if (gfp.VBR == VbrMode.vbr_off)\n            gfc.slot_lag = gfc.frac_SpF = (((gfp.version + 1) * 72000 * gfp.brate) % gfp.out_samplerate) | 0;\n\n        qupvt.iteration_init(gfp);\n        psy.psymodel_init(gfp);\n        assert(gfp.scale >= 0);\n        return 0;\n    }\n\n    function update_inbuffer_size(gfc, nsamples) {\n        if (gfc.in_buffer_0 == null || gfc.in_buffer_nsamples < nsamples) {\n            gfc.in_buffer_0 = new_float(nsamples);\n            gfc.in_buffer_1 = new_float(nsamples);\n            gfc.in_buffer_nsamples = nsamples;\n        }\n    }\n\n    this.lame_encode_flush = function (gfp, mp3buffer, mp3bufferPos, mp3buffer_size) {\n        var gfc = gfp.internal_flags;\n        var buffer = new_short_n([2, 1152]);\n        var imp3 = 0, mp3count, mp3buffer_size_remaining;\n\n        /*\n         * we always add POSTDELAY=288 padding to make sure granule with real\n         * data can be complety decoded (because of 50% overlap with next\n         * granule\n         */\n        var end_padding;\n        var frames_left;\n        var samples_to_encode = gfc.mf_samples_to_encode - Encoder.POSTDELAY;\n        var mf_needed = calcNeeded(gfp);\n\n        /* Was flush already called? */\n        if (gfc.mf_samples_to_encode < 1) {\n            return 0;\n        }\n        mp3count = 0;\n\n        if (gfp.in_samplerate != gfp.out_samplerate) {\n            /*\n             * delay due to resampling; needs to be fixed, if resampling code\n             * gets changed\n             */\n            samples_to_encode += 16. * gfp.out_samplerate / gfp.in_samplerate;\n        }\n        end_padding = gfp.framesize - (samples_to_encode % gfp.framesize);\n        if (end_padding < 576)\n            end_padding += gfp.framesize;\n        gfp.encoder_padding = end_padding;\n\n        frames_left = (samples_to_encode + end_padding) / gfp.framesize;\n\n        /*\n         * send in a frame of 0 padding until all internal sample buffers are\n         * flushed\n         */\n        while (frames_left > 0 && imp3 >= 0) {\n            var bunch = mf_needed - gfc.mf_size;\n            var frame_num = gfp.frameNum;\n\n            bunch *= gfp.in_samplerate;\n            bunch /= gfp.out_samplerate;\n            if (bunch > 1152)\n                bunch = 1152;\n            if (bunch < 1)\n                bunch = 1;\n\n            mp3buffer_size_remaining = mp3buffer_size - mp3count;\n\n            /* if user specifed buffer size = 0, dont check size */\n            if (mp3buffer_size == 0)\n                mp3buffer_size_remaining = 0;\n\n            imp3 = this.lame_encode_buffer(gfp, buffer[0], buffer[1], bunch,\n                mp3buffer, mp3bufferPos, mp3buffer_size_remaining);\n\n            mp3bufferPos += imp3;\n            mp3count += imp3;\n            frames_left -= (frame_num != gfp.frameNum) ? 1 : 0;\n        }\n        /*\n         * Set gfc.mf_samples_to_encode to 0, so we may detect and break loops\n         * calling it more than once in a row.\n         */\n        gfc.mf_samples_to_encode = 0;\n\n        if (imp3 < 0) {\n            /* some type of fatal error */\n            return imp3;\n        }\n\n        mp3buffer_size_remaining = mp3buffer_size - mp3count;\n        /* if user specifed buffer size = 0, dont check size */\n        if (mp3buffer_size == 0)\n            mp3buffer_size_remaining = 0;\n\n        /* mp3 related stuff. bit buffer might still contain some mp3 data */\n        bs.flush_bitstream(gfp);\n        imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos,\n            mp3buffer_size_remaining, 1);\n        if (imp3 < 0) {\n            /* some type of fatal error */\n            return imp3;\n        }\n        mp3bufferPos += imp3;\n        mp3count += imp3;\n        mp3buffer_size_remaining = mp3buffer_size - mp3count;\n        /* if user specifed buffer size = 0, dont check size */\n        if (mp3buffer_size == 0)\n            mp3buffer_size_remaining = 0;\n\n        if (gfp.write_id3tag_automatic) {\n            /* write a id3 tag to the bitstream */\n            id3.id3tag_write_v1(gfp);\n\n            imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos,\n                mp3buffer_size_remaining, 0);\n\n            if (imp3 < 0) {\n                return imp3;\n            }\n            mp3count += imp3;\n        }\n        return mp3count;\n    };\n\n    this.lame_encode_buffer = function (gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n        var gfc = gfp.internal_flags;\n        var in_buffer = [null, null];\n\n        if (gfc.Class_ID != LAME_ID)\n            return -3;\n\n        if (nsamples == 0)\n            return 0;\n\n        update_inbuffer_size(gfc, nsamples);\n\n        in_buffer[0] = gfc.in_buffer_0;\n        in_buffer[1] = gfc.in_buffer_1;\n\n        /* make a copy of input buffer, changing type to sample_t */\n        for (var i = 0; i < nsamples; i++) {\n            in_buffer[0][i] = buffer_l[i];\n            if (gfc.channels_in > 1)\n                in_buffer[1][i] = buffer_r[i];\n        }\n\n        return lame_encode_buffer_sample(gfp, in_buffer[0], in_buffer[1],\n            nsamples, mp3buf, mp3bufPos, mp3buf_size);\n    }\n\n    function calcNeeded(gfp) {\n        var mf_needed = Encoder.BLKSIZE + gfp.framesize - Encoder.FFTOFFSET;\n        /*\n         * amount needed for FFT\n         */\n        mf_needed = Math.max(mf_needed, 512 + gfp.framesize - 32);\n        assert(LameInternalFlags.MFSIZE >= mf_needed);\n\n        return mf_needed;\n    }\n\n    function lame_encode_buffer_sample(gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n        var gfc = gfp.internal_flags;\n        var mp3size = 0, ret, i, ch, mf_needed;\n        var mp3out;\n        var mfbuf = [null, null];\n        var in_buffer = [null, null];\n\n        if (gfc.Class_ID != LAME_ID)\n            return -3;\n\n        if (nsamples == 0)\n            return 0;\n\n        /* copy out any tags that may have been written into bitstream */\n        mp3out = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 0);\n        if (mp3out < 0)\n            return mp3out;\n        /* not enough buffer space */\n        mp3bufPos += mp3out;\n        mp3size += mp3out;\n\n        in_buffer[0] = buffer_l;\n        in_buffer[1] = buffer_r;\n\n        /* Apply user defined re-scaling */\n\n        /* user selected scaling of the samples */\n        if (BitStream.NEQ(gfp.scale, 0) && BitStream.NEQ(gfp.scale, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] *= gfp.scale;\n                if (gfc.channels_out == 2)\n                    in_buffer[1][i] *= gfp.scale;\n            }\n        }\n\n        /* user selected scaling of the channel 0 (left) samples */\n        if (BitStream.NEQ(gfp.scale_left, 0)\n            && BitStream.NEQ(gfp.scale_left, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] *= gfp.scale_left;\n            }\n        }\n\n        /* user selected scaling of the channel 1 (right) samples */\n        if (BitStream.NEQ(gfp.scale_right, 0)\n            && BitStream.NEQ(gfp.scale_right, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[1][i] *= gfp.scale_right;\n            }\n        }\n\n        /* Downsample to Mono if 2 channels in and 1 channel out */\n        if (gfp.num_channels == 2 && gfc.channels_out == 1) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] = 0.5 * ( in_buffer[0][i] + in_buffer[1][i]);\n                in_buffer[1][i] = 0.0;\n            }\n        }\n\n        mf_needed = calcNeeded(gfp);\n\n        mfbuf[0] = gfc.mfbuf[0];\n        mfbuf[1] = gfc.mfbuf[1];\n\n        var in_bufferPos = 0;\n        while (nsamples > 0) {\n            var in_buffer_ptr = [null, null];\n            var n_in = 0;\n            /* number of input samples processed with fill_buffer */\n            var n_out = 0;\n            /* number of samples output with fill_buffer */\n            /* n_in <> n_out if we are resampling */\n\n            in_buffer_ptr[0] = in_buffer[0];\n            in_buffer_ptr[1] = in_buffer[1];\n            /* copy in new samples into mfbuf, with resampling */\n            var inOut = new InOut();\n            fill_buffer(gfp, mfbuf, in_buffer_ptr, in_bufferPos, nsamples,\n                inOut);\n            n_in = inOut.n_in;\n            n_out = inOut.n_out;\n\n            /* compute ReplayGain of resampled input if requested */\n            if (gfc.findReplayGain && !gfc.decode_on_the_fly)\n                if (ga.AnalyzeSamples(gfc.rgdata, mfbuf[0], gfc.mf_size,\n                        mfbuf[1], gfc.mf_size, n_out, gfc.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR)\n                    return -6;\n\n            /* update in_buffer counters */\n            nsamples -= n_in;\n            in_bufferPos += n_in;\n            if (gfc.channels_out == 2)\n                ;// in_bufferPos += n_in;\n\n            /* update mfbuf[] counters */\n            gfc.mf_size += n_out;\n            assert(gfc.mf_size <= LameInternalFlags.MFSIZE);\n\n            /*\n             * lame_encode_flush may have set gfc.mf_sample_to_encode to 0 so we\n             * have to reinitialize it here when that happened.\n             */\n            if (gfc.mf_samples_to_encode < 1) {\n                gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\n            }\n            gfc.mf_samples_to_encode += n_out;\n\n            if (gfc.mf_size >= mf_needed) {\n                /* encode the frame. */\n                /* mp3buf = pointer to current location in buffer */\n                /* mp3buf_size = size of original mp3 output buffer */\n                /* = 0 if we should not worry about the */\n                /* buffer size because calling program is */\n                /* to lazy to compute it */\n                /* mp3size = size of data written to buffer so far */\n                /* mp3buf_size-mp3size = amount of space avalable */\n\n                var buf_size = mp3buf_size - mp3size;\n                if (mp3buf_size == 0)\n                    buf_size = 0;\n\n                ret = lame_encode_frame(gfp, mfbuf[0], mfbuf[1], mp3buf,\n                    mp3bufPos, buf_size);\n\n                if (ret < 0)\n                    return ret;\n                mp3bufPos += ret;\n                mp3size += ret;\n\n                /* shift out old samples */\n                gfc.mf_size -= gfp.framesize;\n                gfc.mf_samples_to_encode -= gfp.framesize;\n                for (ch = 0; ch < gfc.channels_out; ch++)\n                    for (i = 0; i < gfc.mf_size; i++)\n                        mfbuf[ch][i] = mfbuf[ch][i + gfp.framesize];\n            }\n        }\n        assert(nsamples == 0);\n\n        return mp3size;\n    }\n\n    function lame_encode_frame(gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\n        var ret = self.enc.lame_encode_mp3_frame(gfp, inbuf_l, inbuf_r, mp3buf,\n            mp3bufPos, mp3buf_size);\n        gfp.frameNum++;\n        return ret;\n    }\n\n    function InOut() {\n        this.n_in = 0;\n        this.n_out = 0;\n    }\n\n\n    function NumUsed() {\n        this.num_used = 0;\n    }\n\n    /**\n     * Greatest common divisor.\n     * <p>\n     * Joint work of Euclid and M. Hendry\n     */\n    function gcd(i, j) {\n        return j != 0 ? gcd(j, i % j) : i;\n    }\n\n    /**\n     * Resampling via FIR filter, blackman window.\n     */\n    function blackman(x, fcn, l) {\n        /*\n         * This algorithm from: SIGNAL PROCESSING ALGORITHMS IN FORTRAN AND C\n         * S.D. Stearns and R.A. David, Prentice-Hall, 1992\n         */\n        var wcn = (Math.PI * fcn);\n\n        x /= l;\n        if (x < 0)\n            x = 0;\n        if (x > 1)\n            x = 1;\n        var x2 = x - .5;\n\n        var bkwn = 0.42 - 0.5 * Math.cos(2 * x * Math.PI) + 0.08 * Math.cos(4 * x * Math.PI);\n        if (Math.abs(x2) < 1e-9)\n            return (wcn / Math.PI);\n        else\n            return (bkwn * Math.sin(l * wcn * x2) / (Math.PI * l * x2));\n    }\n\n    function fill_buffer_resample(gfp, outbuf, outbufPos, desired_len, inbuf, in_bufferPos, len, num_used, ch) {\n        var gfc = gfp.internal_flags;\n        var i, j = 0, k;\n        /* number of convolution functions to pre-compute */\n        var bpc = gfp.out_samplerate\n            / gcd(gfp.out_samplerate, gfp.in_samplerate);\n        if (bpc > LameInternalFlags.BPC)\n            bpc = LameInternalFlags.BPC;\n\n        var intratio = (Math.abs(gfc.resample_ratio\n            - Math.floor(.5 + gfc.resample_ratio)) < .0001) ? 1 : 0;\n        var fcn = 1.00 / gfc.resample_ratio;\n        if (fcn > 1.00)\n            fcn = 1.00;\n        var filter_l = 31;\n        if (0 == filter_l % 2)\n            --filter_l;\n        /* must be odd */\n        filter_l += intratio;\n        /* unless resample_ratio=int, it must be even */\n\n        var BLACKSIZE = filter_l + 1;\n        /* size of data needed for FIR */\n\n        if (gfc.fill_buffer_resample_init == 0) {\n            gfc.inbuf_old[0] = new_float(BLACKSIZE);\n            gfc.inbuf_old[1] = new_float(BLACKSIZE);\n            for (i = 0; i <= 2 * bpc; ++i)\n                gfc.blackfilt[i] = new_float(BLACKSIZE);\n\n            gfc.itime[0] = 0;\n            gfc.itime[1] = 0;\n\n            /* precompute blackman filter coefficients */\n            for (j = 0; j <= 2 * bpc; j++) {\n                var sum = 0.;\n                var offset = (j - bpc) / (2. * bpc);\n                for (i = 0; i <= filter_l; i++)\n                    sum += gfc.blackfilt[j][i] = blackman(i - offset, fcn,\n                        filter_l);\n                for (i = 0; i <= filter_l; i++)\n                    gfc.blackfilt[j][i] /= sum;\n            }\n            gfc.fill_buffer_resample_init = 1;\n        }\n\n        var inbuf_old = gfc.inbuf_old[ch];\n\n        /* time of j'th element in inbuf = itime + j/ifreq; */\n        /* time of k'th element in outbuf = j/ofreq */\n        for (k = 0; k < desired_len; k++) {\n            var time0;\n            var joff;\n\n            time0 = k * gfc.resample_ratio;\n            /* time of k'th output sample */\n            j = 0 | Math.floor(time0 - gfc.itime[ch]);\n\n            /* check if we need more input data */\n            if ((filter_l + j - filter_l / 2) >= len)\n                break;\n\n            /* blackman filter. by default, window centered at j+.5(filter_l%2) */\n            /* but we want a window centered at time0. */\n            var offset = (time0 - gfc.itime[ch] - (j + .5 * (filter_l % 2)));\n            assert(Math.abs(offset) <= .501);\n\n            /* find the closest precomputed window for this offset: */\n            joff = 0 | Math.floor((offset * 2 * bpc) + bpc + .5);\n            var xvalue = 0.;\n            for (i = 0; i <= filter_l; ++i) {\n\t\t/* force integer index */\n                var j2 = 0 | (i + j - filter_l / 2); \n                var y;\n                assert(j2 < len);\n                assert(j2 + BLACKSIZE >= 0);\n                y = (j2 < 0) ? inbuf_old[BLACKSIZE + j2] : inbuf[in_bufferPos\n                + j2];\n                xvalue += y * gfc.blackfilt[joff][i];\n            }\n            outbuf[outbufPos + k] = xvalue;\n        }\n\n        /* k = number of samples added to outbuf */\n        /* last k sample used data from [j-filter_l/2,j+filter_l-filter_l/2] */\n\n        /* how many samples of input data were used: */\n        num_used.num_used = Math.min(len, filter_l + j - filter_l / 2);\n\n        /*\n         * adjust our input time counter. Incriment by the number of samples\n         * used, then normalize so that next output sample is at time 0, next\n         * input buffer is at time itime[ch]\n         */\n        gfc.itime[ch] += num_used.num_used - k * gfc.resample_ratio;\n\n        /* save the last BLACKSIZE samples into the inbuf_old buffer */\n        if (num_used.num_used >= BLACKSIZE) {\n            for (i = 0; i < BLACKSIZE; i++)\n                inbuf_old[i] = inbuf[in_bufferPos + num_used.num_used + i\n                - BLACKSIZE];\n        } else {\n            /* shift in num_used.num_used samples into inbuf_old */\n            var n_shift = BLACKSIZE - num_used.num_used;\n            /*\n             * number of samples to\n             * shift\n             */\n\n            /*\n             * shift n_shift samples by num_used.num_used, to make room for the\n             * num_used new samples\n             */\n            for (i = 0; i < n_shift; ++i)\n                inbuf_old[i] = inbuf_old[i + num_used.num_used];\n\n            /* shift in the num_used.num_used samples */\n            for (j = 0; i < BLACKSIZE; ++i, ++j)\n                inbuf_old[i] = inbuf[in_bufferPos + j];\n\n            assert(j == num_used.num_used);\n        }\n        return k;\n        /* return the number samples created at the new samplerate */\n    }\n\n    function fill_buffer(gfp, mfbuf, in_buffer, in_bufferPos, nsamples, io) {\n        var gfc = gfp.internal_flags;\n\n        /* copy in new samples into mfbuf, with resampling if necessary */\n        if ((gfc.resample_ratio < .9999) || (gfc.resample_ratio > 1.0001)) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                var numUsed = new NumUsed();\n                io.n_out = fill_buffer_resample(gfp, mfbuf[ch], gfc.mf_size,\n                    gfp.framesize, in_buffer[ch], in_bufferPos, nsamples,\n                    numUsed, ch);\n                io.n_in = numUsed.num_used;\n            }\n        } else {\n            io.n_out = Math.min(gfp.framesize, nsamples);\n            io.n_in = io.n_out;\n            for (var i = 0; i < io.n_out; ++i) {\n                mfbuf[0][gfc.mf_size + i] = in_buffer[0][in_bufferPos + i];\n                if (gfc.channels_out == 2)\n                    mfbuf[1][gfc.mf_size + i] = in_buffer[1][in_bufferPos + i];\n            }\n        }\n    }\n\n}\n\nmodule.exports = Lame;\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;AACnC,IAAIC,MAAM,GAAGF,MAAM,CAACE,MAAM;AAC1B,IAAIC,OAAO,GAAGH,MAAM,CAACG,OAAO;AAC5B,IAAIC,KAAK,GAAGJ,MAAM,CAACI,KAAK;AACxB,IAAIC,UAAU,GAAGL,MAAM,CAACK,UAAU;AAClC,IAAIC,IAAI,GAAGN,MAAM,CAACM,IAAI;AACtB,IAAIC,MAAM,GAAGP,MAAM,CAACO,MAAM;AAC1B,IAAIC,WAAW,GAAGR,MAAM,CAACQ,WAAW;AACpC,IAAIC,QAAQ,GAAGT,MAAM,CAACS,QAAQ;AAC9B,IAAIC,UAAU,GAAGV,MAAM,CAACU,UAAU;AAClC,IAAIC,SAAS,GAAGX,MAAM,CAACW,SAAS;AAChC,IAAIC,WAAW,GAAGZ,MAAM,CAACY,WAAW;AACpC,IAAIC,OAAO,GAAGb,MAAM,CAACa,OAAO;AAC5B,IAAIC,SAAS,GAAGd,MAAM,CAACc,SAAS;AAChC,IAAIC,WAAW,GAAGf,MAAM,CAACe,WAAW;AACpC,IAAIC,MAAM,GAAGhB,MAAM,CAACgB,MAAM;AAE1B,IAAIC,QAAQ,GAAGhB,OAAO,CAAC,eAAe,CAAC;AACvC,IAAIiB,eAAe,GAAGjB,OAAO,CAAC,sBAAsB,CAAC;AACrD,IAAIkB,iBAAiB,GAAGlB,OAAO,CAAC,wBAAwB,CAAC;AACzD,IAAImB,GAAG,GAAGnB,OAAO,CAAC,UAAU,CAAC;AAC7B,IAAIoB,UAAU,GAAGpB,OAAO,CAAC,iBAAiB,CAAC;AAC3C,IAAIqB,mBAAmB,GAAGrB,OAAO,CAAC,0BAA0B,CAAC;AAC7D,IAAIsB,SAAS,GAAGtB,OAAO,CAAC,gBAAgB,CAAC;AACzC,IAAIuB,MAAM,GAAGvB,OAAO,CAAC,aAAa,CAAC;AACnC,IAAIwB,OAAO,GAAGxB,OAAO,CAAC,cAAc,CAAC;AAErC,SAASyB,IAAIA,CAAA,EAAG;EACZ,IAAIC,IAAI,GAAG,IAAI;EACf,IAAIC,gBAAgB,GAAI,GAAG,GAAG,IAAK;EAEnCF,IAAI,CAACG,EAAE,GAAG,GAAG;EACbH,IAAI,CAACI,EAAE,GAAG,GAAG;EACbJ,IAAI,CAACK,EAAE,GAAG,GAAG;EACbL,IAAI,CAACM,EAAE,GAAG,GAAG;EACbN,IAAI,CAACO,EAAE,GAAG,GAAG;EACbP,IAAI,CAACQ,EAAE,GAAG,GAAG;EACbR,IAAI,CAACS,EAAE,GAAG,GAAG;EACbT,IAAI,CAACU,EAAE,GAAG,GAAG;EACbV,IAAI,CAACW,EAAE,GAAG,GAAG;EACbX,IAAI,CAACY,EAAE,GAAG,GAAG;;EAEb;;EAEAZ,IAAI,CAACa,KAAK,GAAG,IAAI;EACjBb,IAAI,CAACc,QAAQ,GAAG,IAAI;EACpBd,IAAI,CAACe,OAAO,GAAG,IAAI;EACnBf,IAAI,CAACgB,MAAM,GAAG,IAAI;EAClBhB,IAAI,CAACiB,aAAa,GAAG,IAAI;EACzBjB,IAAI,CAACkB,YAAY,GAAG,IAAI;EACxBlB,IAAI,CAACmB,MAAM,GAAG,IAAI;EAClBnB,IAAI,CAACoB,WAAW,GAAG,IAAI;;EAEvB;AACJ;AACA;AACA;AACA;EACI,IAAIC,iBAAiB,GAAI,KAAK,GAAGnB,gBAAiB;EAClDF,IAAI,CAACqB,iBAAiB,GAAGA,iBAAiB;EAE1C,IAAIC,EAAE;EACN,IAAIC,EAAE;EACN,IAAIC,CAAC;EACL,IAAIC,KAAK;EACT,IAAIC,EAAE;EACN,IAAIC,GAAG,GAAG,IAAIpC,QAAQ,CAAC,CAAC;EACxB,IAAIqC,GAAG;EACP,IAAIC,GAAG;EACP,IAAIC,GAAG;EACP,IAAIC,MAAM;EACV,IAAI,CAACC,GAAG,GAAG,IAAIjC,OAAO,CAAC,CAAC;EAExB,IAAI,CAACkC,UAAU,GAAG,UAAUC,GAAG,EAAEC,GAAG,EAAEC,EAAE,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAE;IAC9EpB,EAAE,GAAGY,GAAG;IACRX,EAAE,GAAGY,GAAG;IACRX,CAAC,GAAGY,EAAE;IACNX,KAAK,GAAGY,MAAM;IACdX,EAAE,GAAGY,GAAG;IACRV,GAAG,GAAGW,IAAI;IACVV,GAAG,GAAGW,IAAI;IACVV,GAAG,GAAGW,IAAI;IACVV,MAAM,GAAGW,OAAO;IAChB,IAAI,CAACV,GAAG,CAACC,UAAU,CAACV,EAAE,EAAEI,GAAG,EAAEF,KAAK,EAAEG,GAAG,CAAC;EAC5C,CAAC;;EAED;AACJ;AACA;EACI,SAASe,GAAGA,CAAA,EAAG;IACX;AACR;AACA;IACQ,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB;AACR;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG,EAAE;IAC3B;IACA;AACR;AACA;IACQ,IAAI,CAACC,WAAW,GAAG7D,SAAS,CAACc,OAAO,CAACgD,OAAO,CAAC;IAC7C;AACR;AACA;IACQ,IAAI,CAACC,WAAW,GAAG/D,SAAS,CAACc,OAAO,CAACkD,OAAO,CAAC;EACjD;EAEA,SAASC,eAAeA,CAAA,EAAG;IACvB,IAAI,CAACC,UAAU,GAAG,EAAE;EACxB;EAEA,SAASC,QAAQA,CAACC,OAAO,EAAEC,KAAK,EAAE;IAC9B,IAAI,CAACC,OAAO,GAAGD,KAAK;EACxB;EAEA,IAAIE,OAAO,GAAG,UAAU;EAExB,SAASC,aAAaA,CAACC,GAAG,EAAE;IACxB,IAAIC,GAAG;IAEPD,GAAG,CAACE,QAAQ,GAAGJ,OAAO;IAEtBG,GAAG,GAAGD,GAAG,CAACG,cAAc,GAAG,IAAIpE,iBAAiB,CAAC,CAAC;;IAElD;IACA;IACA;AACR;AACA;AACA;AACA;;IAEQiE,GAAG,CAACI,IAAI,GAAGC,QAAQ,CAACC,OAAO;IAC3BN,GAAG,CAACO,QAAQ,GAAG,CAAC;IAChBP,GAAG,CAACQ,aAAa,GAAG,KAAK;IACzBR,GAAG,CAACS,YAAY,GAAG,CAAC;IACpBT,GAAG,CAACU,WAAW,GAAG,CAAC,CAAC;IAEpBV,GAAG,CAACW,YAAY,GAAG,IAAI;IACvBX,GAAG,CAACY,OAAO,GAAG,CAAC,CAAC;IAChBZ,GAAG,CAACa,YAAY,GAAG,IAAI;IACvBZ,GAAG,CAACa,aAAa,GAAG,CAAC,CAAC;IAEtBd,GAAG,CAACe,WAAW,GAAG,CAAC;IACnBf,GAAG,CAACgB,YAAY,GAAG,CAAC;IACpBhB,GAAG,CAACiB,YAAY,GAAG,CAAC,CAAC;IACrBjB,GAAG,CAACkB,aAAa,GAAG,CAAC,CAAC;IAEtBlB,GAAG,CAACmB,GAAG,GAAGpG,OAAO,CAACqG,OAAO;IACzBpB,GAAG,CAACqB,KAAK,GAAG,CAAC;IACbrB,GAAG,CAACsB,QAAQ,GAAG,CAAC,CAAC;IACjBtB,GAAG,CAACuB,qBAAqB,GAAG,GAAG;IAC/BvB,GAAG,CAACwB,oBAAoB,GAAG,CAAC;IAC5BxB,GAAG,CAACyB,oBAAoB,GAAG,CAAC;IAC5BzB,GAAG,CAAC0B,YAAY,GAAG,CAAC;IACpBzB,GAAG,CAAC0B,eAAe,GAAG,CAAC;IACvB;IACA1B,GAAG,CAAC2B,eAAe,GAAG,EAAE;IACxB;;IAEA5B,GAAG,CAAC6B,UAAU,GAAG,CAAC,CAAC;IACnB7B,GAAG,CAAC8B,gBAAgB,GAAG,CAAC,CAAC;IAEzB9B,GAAG,CAAC+B,KAAK,GAAG,CAAC,CAAC;IAEd9B,GAAG,CAAC+B,cAAc,GAAG,CAAC;IAEtB/B,GAAG,CAACgC,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG;IACrBhC,GAAG,CAACgC,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG;IACrBhC,GAAG,CAACiC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC;IACtBjC,GAAG,CAACiC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC;IACtBjC,GAAG,CAACkC,aAAa,GAAG,CAAC;IACrBlC,GAAG,CAACmC,KAAK,CAACC,UAAU,GAAG,CAAC,CAAC;IACzBpC,GAAG,CAACmC,KAAK,CAACE,YAAY,GAAG,CAAC,CAAC;IAE3BtC,GAAG,CAACuC,KAAK,GAAG,CAAC,CAAC;IAEdvC,GAAG,CAACwC,UAAU,GAAG,CAAC,CAAC;IACnBxC,GAAG,CAACyC,OAAO,GAAG,CAAC,CAAC;IAChB;IACAzC,GAAG,CAAC0C,gBAAgB,GAAG,CAAC,CAAC;IACzB;IACA;IACA1C,GAAG,CAAC2C,iBAAiB,GAAG,GAAG;IAC3B;IACA3C,GAAG,CAAC4C,WAAW,GAAG,IAAI;IACtB5C,GAAG,CAAC6C,YAAY,GAAG,CAAC,CAAC;;IAErB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ5C,GAAG,CAAC6C,oBAAoB,GAAGzG,OAAO,CAAC0G,QAAQ,GAAG1G,OAAO,CAAC2G,SAAS;IAC/DhD,GAAG,CAACiD,eAAe,GAAG,CAAC;IACvBhD,GAAG,CAACiD,OAAO,GAAG7G,OAAO,CAAC0G,QAAQ,GAAG1G,OAAO,CAAC8G,SAAS;IAClD;AACR;AACA;;IAEQnD,GAAG,CAACoD,cAAc,GAAG,KAAK;IAC1BpD,GAAG,CAACqD,iBAAiB,GAAG,KAAK;IAE7BpD,GAAG,CAACoD,iBAAiB,GAAG,KAAK;IAC7BpD,GAAG,CAACmD,cAAc,GAAG,KAAK;IAC1BnD,GAAG,CAACqD,cAAc,GAAG,KAAK;IAE1BrD,GAAG,CAACsD,SAAS,GAAG,CAAC;IACjBtD,GAAG,CAACuD,cAAc,GAAG,CAAC;IACtBvD,GAAG,CAACwD,gBAAgB,GAAG,CAAC;IACxBxD,GAAG,CAACyD,WAAW,GAAG,CAAC,GAAG;IAEtB1D,GAAG,CAAC2D,MAAM,GAAG,CAAC;IAEd3D,GAAG,CAAC4D,sBAAsB,GAAG,IAAI;IACjC,OAAO,CAAC;EACZ;EAEA,IAAI,CAACC,SAAS,GAAG,YAAY;IACzB,IAAI7D,GAAG,GAAG,IAAIlE,eAAe,CAAC,CAAC;IAE/B,IAAIgI,GAAG,GAAG/D,aAAa,CAACC,GAAG,CAAC;IAC5B,IAAI8D,GAAG,IAAI,CAAC,EAAE;MACV,OAAO,IAAI;IACf;IAEA9D,GAAG,CAAC+D,kBAAkB,GAAG,CAAC;IAC1B,OAAO/D,GAAG;EACd,CAAC;EAED,SAASgE,WAAWA,CAACC,CAAC,EAAE;IACpB,IAAIA,CAAC,GAAG,GAAG,EACP,OAAO,GAAG;IACd,IAAIA,CAAC,IAAI,GAAG,EACR,OAAO,GAAG;IAEd,OAAOC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,EAAE,GAAG,CAAC,GAAGH,CAAC,CAAC;EACpC;EAEA,IAAI,CAACI,uBAAuB,GAAG,UAAU1E,OAAO,EAAE;IAC9C;;IAEA,IAAI2E,kBAAkB,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACvD,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAE1C,IAAIC,WAAW,GAAG,CAAC;MAAEC,gBAAgB,GAAG,CAAC;MAAEC,WAAW,GAAG,CAAC;MAAEC,gBAAgB,GAAG,CAAC;;IAEhF;IACAA,gBAAgB,GAAGJ,kBAAkB,CAAC,EAAE,CAAC;IACzCG,WAAW,GAAG,EAAE;IAChBD,gBAAgB,GAAGF,kBAAkB,CAAC,EAAE,CAAC;IACzCC,WAAW,GAAG,EAAE;;IAEhB;AACR;AACA;AACA;AACA;IACQ,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MACzB,IAAKT,IAAI,CAACU,GAAG,CAACjF,OAAO,EAAE2E,kBAAkB,CAACK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAKhF,OAAO,EAAE;QAC3D+E,gBAAgB,GAAGJ,kBAAkB,CAACK,CAAC,GAAG,CAAC,CAAC;QAC5CF,WAAW,GAAGE,CAAC,GAAG,CAAC;QACnBH,gBAAgB,GAAGF,kBAAkB,CAACK,CAAC,CAAC;QACxCJ,WAAW,GAAII,CAAE;QACjB;QACA;MACJ;IACJ;;IAEA;IACA,IAAKD,gBAAgB,GAAG/E,OAAO,GAAKA,OAAO,GAAG6E,gBAAiB,EAAE;MAC7D,OAAOD,WAAW;IACtB;IACA,OAAOE,WAAW;EACtB,CAAC;EAED,SAASI,kBAAkBA,CAAC9D,WAAW,EAAE+D,gBAAgB,EAAE;IACvD;AACR;AACA;AACA;AACA;IACQ,IAAIC,oBAAoB,GAAG,KAAK;IAEhC,IAAID,gBAAgB,IAAI,KAAK,EACzBC,oBAAoB,GAAG,KAAK,CAAC,KAC5B,IAAID,gBAAgB,IAAI,KAAK,EAC9BC,oBAAoB,GAAG,KAAK,CAAC,KAC5B,IAAID,gBAAgB,IAAI,KAAK,EAC9BC,oBAAoB,GAAG,KAAK,CAAC,KAC5B,IAAID,gBAAgB,IAAI,KAAK,EAC9BC,oBAAoB,GAAG,KAAK,CAAC,KAC5B,IAAID,gBAAgB,IAAI,KAAK,EAC9BC,oBAAoB,GAAG,KAAK,CAAC,KAC5B,IAAID,gBAAgB,IAAI,KAAK,EAC9BC,oBAAoB,GAAG,KAAK,CAAC,KAC5B,IAAID,gBAAgB,IAAI,KAAK,EAC9BC,oBAAoB,GAAG,KAAK,CAAC,KAC5B,IAAID,gBAAgB,IAAI,KAAK,EAC9BC,oBAAoB,GAAG,KAAK,CAAC,KAC5B,IAAID,gBAAgB,IAAI,IAAI,EAC7BC,oBAAoB,GAAG,IAAI;IAE/B,IAAIhE,WAAW,IAAI,CAAC,CAAC,EACjB,OAAOgE,oBAAoB;IAE/B,IAAIhE,WAAW,IAAI,KAAK,EACpBgE,oBAAoB,GAAG,KAAK;IAChC,IAAIhE,WAAW,IAAI,KAAK,EACpBgE,oBAAoB,GAAG,KAAK;IAChC,IAAIhE,WAAW,IAAI,KAAK,EACpBgE,oBAAoB,GAAG,KAAK;IAChC,IAAIhE,WAAW,IAAI,IAAI,EACnBgE,oBAAoB,GAAG,KAAK;IAChC,IAAIhE,WAAW,IAAI,IAAI,EACnBgE,oBAAoB,GAAG,KAAK;IAChC,IAAIhE,WAAW,IAAI,IAAI,EACnBgE,oBAAoB,GAAG,KAAK;IAChC,IAAIhE,WAAW,IAAI,IAAI,EACnBgE,oBAAoB,GAAG,KAAK;IAChC,IAAIhE,WAAW,IAAI,IAAI,EACnBgE,oBAAoB,GAAG,IAAI;IAE/B,IAAID,gBAAgB,GAAGC,oBAAoB,EAAE;MACzC;AACZ;AACA;AACA;MACY,IAAID,gBAAgB,GAAG,KAAK,EAAE;QAC1B,OAAO,KAAK;MAChB;MACA,IAAIA,gBAAgB,GAAG,KAAK,EAAE;QAC1B,OAAO,KAAK;MAChB;MACA,IAAIA,gBAAgB,GAAG,KAAK,EAAE;QAC1B,OAAO,KAAK;MAChB;MACA,IAAIA,gBAAgB,GAAG,KAAK,EAAE;QAC1B,OAAO,KAAK;MAChB;MACA,IAAIA,gBAAgB,GAAG,KAAK,EAAE;QAC1B,OAAO,KAAK;MAChB;MACA,IAAIA,gBAAgB,GAAG,KAAK,EAAE;QAC1B,OAAO,KAAK;MAChB;MACA,IAAIA,gBAAgB,GAAG,KAAK,EAAE;QAC1B,OAAO,KAAK;MAChB;MACA,IAAIA,gBAAgB,GAAG,IAAI,EAAE;QACzB,OAAO,KAAK;MAChB;MACA,OAAO,IAAI;IACf;IACA,OAAOC,oBAAoB;EAC/B;;EAEA;AACJ;AACA;EACI,SAASC,WAAWA,CAACC,WAAW,EAAEC,GAAG,EAAE;IACnC,QAAQD,WAAW;MACf,KAAK,KAAK;QACNC,GAAG,CAACC,OAAO,GAAG,CAAC;QACf,OAAO,CAAC;MACZ,KAAK,KAAK;QACND,GAAG,CAACC,OAAO,GAAG,CAAC;QACf,OAAO,CAAC;MACZ,KAAK,KAAK;QACND,GAAG,CAACC,OAAO,GAAG,CAAC;QACf,OAAO,CAAC;MACZ,KAAK,KAAK;QACND,GAAG,CAACC,OAAO,GAAG,CAAC;QACf,OAAO,CAAC;MACZ,KAAK,KAAK;QACND,GAAG,CAACC,OAAO,GAAG,CAAC;QACf,OAAO,CAAC;MACZ,KAAK,KAAK;QACND,GAAG,CAACC,OAAO,GAAG,CAAC;QACf,OAAO,CAAC;MACZ,KAAK,KAAK;QACND,GAAG,CAACC,OAAO,GAAG,CAAC;QACf,OAAO,CAAC;MACZ,KAAK,KAAK;QACND,GAAG,CAACC,OAAO,GAAG,CAAC;QACf,OAAO,CAAC;MACZ,KAAK,IAAI;QACLD,GAAG,CAACC,OAAO,GAAG,CAAC;QACf,OAAO,CAAC;MACZ;QACID,GAAG,CAACC,OAAO,GAAG,CAAC;QACf,OAAO,CAAC,CAAC;IACjB;EACJ;;EAEA;AACJ;AACA;AACA;EACI,SAASC,kBAAkBA,CAACC,KAAK,EAAEF,OAAO,EAAEG,UAAU,EAAE;IACpD;IACA,IAAIA,UAAU,GAAG,KAAK,EAClBH,OAAO,GAAG,CAAC;IAEf,IAAIxF,OAAO,GAAGvD,MAAM,CAACmJ,aAAa,CAACJ,OAAO,CAAC,CAAC,CAAC,CAAC;IAE9C,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC1B,IAAIpJ,MAAM,CAACmJ,aAAa,CAACJ,OAAO,CAAC,CAACK,CAAC,CAAC,GAAG,CAAC,EAAE;QACtC,IAAItB,IAAI,CAACuB,GAAG,CAACrJ,MAAM,CAACmJ,aAAa,CAACJ,OAAO,CAAC,CAACK,CAAC,CAAC,GAAGH,KAAK,CAAC,GAAGnB,IAAI,CACpDuB,GAAG,CAAC9F,OAAO,GAAG0F,KAAK,CAAC,EACzB1F,OAAO,GAAGvD,MAAM,CAACmJ,aAAa,CAACJ,OAAO,CAAC,CAACK,CAAC,CAAC;MAClD;IACJ;IACA,OAAO7F,OAAO;EAClB;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,SAAS+F,YAAYA,CAACL,KAAK,EAAEF,OAAO,EAAEG,UAAU,EAAE;IAC9C;IACA,IAAIA,UAAU,GAAG,KAAK,EAClBH,OAAO,GAAG,CAAC;IACf,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC1B,IAAIpJ,MAAM,CAACmJ,aAAa,CAACJ,OAAO,CAAC,CAACK,CAAC,CAAC,GAAG,CAAC,EAAE;QACtC,IAAIpJ,MAAM,CAACmJ,aAAa,CAACJ,OAAO,CAAC,CAACK,CAAC,CAAC,IAAIH,KAAK,EAAE;UAC3C,OAAOG,CAAC;QACZ;MACJ;IACJ;IACA,OAAO,CAAC,CAAC;EACb;EAEA,SAASG,iBAAiBA,CAACC,EAAE,EAAEjG,OAAO,EAAE;IACpC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAIkG,QAAQ,GAAG,CAAC,IAAInG,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,EACjC,IAAIA,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,IAAIA,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,EAC9C,IAAIA,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,IAAIA,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,EAC9C,IAAIA,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,IAAIA,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC,EAC/C,IAAIA,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,IAAIA,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC,EAChD,IAAIA,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,IAAIA,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,EACjD,IAAIA,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,IAAIA,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,EAClD,IAAIA,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,IAAIA,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,EAClD,IAAIA,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,IAAIA,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAEvD,IAAIoG,WAAW,GAAGvJ,IAAI,CAAC8H,uBAAuB,CAAC1E,OAAO,CAAC;IACvDiG,EAAE,CAACnG,UAAU,GAAGoG,QAAQ,CAACC,WAAW,CAAC,CAACjG,OAAO;EACjD;EAEA,SAASkG,sBAAsBA,CAAC/F,GAAG,EAAE;IACjC,IAAIC,GAAG,GAAGD,GAAG,CAACG,cAAc;IAC5B;IACA;IACA;;IAEA,IAAI6F,YAAY,GAAG,EAAE;IACrB,IAAIC,aAAa,GAAG,CAAC,CAAC;IAEtB,IAAIhG,GAAG,CAACiG,QAAQ,GAAG,CAAC,EAAE;MAClB,IAAIC,OAAO,GAAG,GAAG;MACjB,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,IAAI,EAAE,EAAEA,IAAI,EAAE,EAAE;QACnC,IAAIC,IAAI,GAAID,IAAI,GAAG,IAAK;QACxB;QACA,IAAIC,IAAI,IAAIpG,GAAG,CAACqG,QAAQ,EAAE;UACtBN,YAAY,GAAG9B,IAAI,CAACqC,GAAG,CAACP,YAAY,EAAEI,IAAI,CAAC;QAC/C;QACA,IAAInG,GAAG,CAACiG,QAAQ,GAAGG,IAAI,IAAIA,IAAI,GAAGpG,GAAG,CAACqG,QAAQ,EAAE;UAC5CH,OAAO,GAAGjC,IAAI,CAACqC,GAAG,CAACJ,OAAO,EAAEC,IAAI,CAAC;QACrC;MACJ;;MAEA;AACZ;AACA;AACA;MACY,IAAID,OAAO,IAAI,GAAG,EAAE;QAChBlG,GAAG,CAACiG,QAAQ,GAAG,CAACF,YAAY,GAAG,GAAG,IAAI,IAAI;MAC9C,CAAC,MAAM;QACH/F,GAAG,CAACiG,QAAQ,GAAG,CAACC,OAAO,GAAG,GAAG,IAAI,IAAI;MACzC;MACAlG,GAAG,CAACqG,QAAQ,GAAGN,YAAY,GAAG,IAAI;IACtC;;IAEA;AACR;AACA;AACA;IACQ,IAAI/F,GAAG,CAACuG,SAAS,GAAG,CAAC,EAAE;MACnB,IAAIvG,GAAG,CAACuG,SAAS,GAAG,EAAE,IAAI,GAAG,GAAG,IAAI,CAAC,EAAE;QACnCvG,GAAG,CAACwG,SAAS,GAAG,CAAC;QACjBxG,GAAG,CAACuG,SAAS,GAAG,CAAC;QACjB1L,MAAM,CAAC4L,GAAG,CAACC,OAAO,CAAC,sCAAsC,GACnD,gCAAgC,CAAC;MAC3C;IACJ;IAEA,IAAI1G,GAAG,CAACuG,SAAS,GAAG,CAAC,EAAE;MACnB,IAAII,OAAO,GAAG,CAAC,CAAC;MAChB,KAAK,IAAIR,IAAI,GAAG,CAAC,EAAEA,IAAI,IAAI,EAAE,EAAEA,IAAI,EAAE,EAAE;QACnC,IAAIC,IAAI,GAAGD,IAAI,GAAG,IAAI;QACtB;QACA,IAAIC,IAAI,IAAIpG,GAAG,CAACwG,SAAS,EAAE;UACvBR,aAAa,GAAG/B,IAAI,CAACU,GAAG,CAACqB,aAAa,EAAEG,IAAI,CAAC;QACjD;QACA,IAAInG,GAAG,CAACwG,SAAS,GAAGJ,IAAI,IAAIA,IAAI,GAAGpG,GAAG,CAACuG,SAAS,EAAE;UAC9CI,OAAO,GAAG1C,IAAI,CAACU,GAAG,CAACgC,OAAO,EAAER,IAAI,CAAC;QACrC;MACJ;MACA;AACZ;AACA;AACA;MACYnG,GAAG,CAACwG,SAAS,GAAGR,aAAa,GAAG,IAAI;MACpC,IAAIW,OAAO,IAAI,CAAC,CAAC,EAAE;QACf3G,GAAG,CAACuG,SAAS,GAAG,CAACP,aAAa,GAAG,GAAG,IAAI,IAAI;MAChD,CAAC,MAAM;QACHhG,GAAG,CAACuG,SAAS,GAAG,CAACI,OAAO,GAAG,GAAG,IAAI,IAAI;MAC1C;IACJ;IAEA,KAAK,IAAIR,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAG,EAAE,EAAEA,IAAI,EAAE,EAAE;MAClC,IAAIS,GAAG,EAAEC,GAAG;MACZ,IAAIT,IAAI,GAAGD,IAAI,GAAG,IAAI;MACtB,IAAInG,GAAG,CAACuG,SAAS,GAAGvG,GAAG,CAACwG,SAAS,EAAE;QAC/BI,GAAG,GAAG7C,WAAW,CAAC,CAAC/D,GAAG,CAACuG,SAAS,GAAGH,IAAI,KAChCpG,GAAG,CAACuG,SAAS,GAAGvG,GAAG,CAACwG,SAAS,GAAG,KAAK,CAAC,CAAC;MAClD,CAAC,MAAM;QACHI,GAAG,GAAG,GAAG;MACb;MACA,IAAI5G,GAAG,CAACqG,QAAQ,GAAGrG,GAAG,CAACiG,QAAQ,EAAE;QAC7BY,GAAG,GAAG9C,WAAW,CAAC,CAACqC,IAAI,GAAGpG,GAAG,CAACiG,QAAQ,KAC/BjG,GAAG,CAACqG,QAAQ,GAAGrG,GAAG,CAACiG,QAAQ,GAAG,KAAK,CAAC,CAAC;MAChD,CAAC,MAAM;QACHY,GAAG,GAAG,GAAG;MACb;MACA7G,GAAG,CAAC8G,UAAU,CAACX,IAAI,CAAC,GAAIS,GAAG,GAAGC,GAAI;IACtC;EACJ;EAEA,SAASE,cAAcA,CAAChH,GAAG,EAAE;IACzB,IAAIC,GAAG,GAAGD,GAAG,CAACG,cAAc;IAE5B,QAAQH,GAAG,CAACY,OAAO;MACf;MACA,KAAK,CAAC;QAAE;QACJX,GAAG,CAACgH,QAAQ,GAAG,CAAC;QAChBhH,GAAG,CAACiH,aAAa,GAAG,CAAC;QACrBjH,GAAG,CAACkH,iBAAiB,GAAG,CAAC;QACzBlH,GAAG,CAACmH,kBAAkB,GAAG,CAAC;QAC1BnH,GAAG,CAACoH,gBAAgB,GAAG,CAAC;QACxBpH,GAAG,CAACqH,eAAe,GAAG,CAAC;QACvB;MAEJ,KAAK,CAAC;QACFtH,GAAG,CAACY,OAAO,GAAG,CAAC;MACnB;MACA,KAAK,CAAC;QACF;AAChB;AACA;AACA;QACgBX,GAAG,CAACgH,QAAQ,GAAG,CAAC;QAChBhH,GAAG,CAACiH,aAAa,GAAG,CAAC;QACrBjH,GAAG,CAACkH,iBAAiB,GAAG,CAAC;QACzBlH,GAAG,CAACmH,kBAAkB,GAAG,CAAC;QAC1BnH,GAAG,CAACoH,gBAAgB,GAAG,CAAC;QACxBpH,GAAG,CAACqH,eAAe,GAAG,CAAC;QACvB;MAEJ,KAAK,CAAC;QACFrH,GAAG,CAACgH,QAAQ,GAAG,CAAC;QAChB,IAAIhH,GAAG,CAACiH,aAAa,IAAI,CAAC,EACtBjH,GAAG,CAACiH,aAAa,GAAG,CAAC;QACzBjH,GAAG,CAACkH,iBAAiB,GAAG,CAAC;QACzBlH,GAAG,CAACmH,kBAAkB,GAAG,CAAC;QAC1B,IAAInH,GAAG,CAACa,aAAa,IAAI,CAAC,CAAC,EACvBb,GAAG,CAACa,aAAa,GAAG,CAAC;QACzBb,GAAG,CAACoH,gBAAgB,GAAG,CAAC;QACxBpH,GAAG,CAACqH,eAAe,GAAG,CAAC;QACvB;MAEJ,KAAK,CAAC;QACFrH,GAAG,CAACgH,QAAQ,GAAG,CAAC;QAChB,IAAIhH,GAAG,CAACiH,aAAa,IAAI,CAAC,EACtBjH,GAAG,CAACiH,aAAa,GAAG,CAAC;QACzBjH,GAAG,CAACkH,iBAAiB,GAAG,CAAC;QACzBlH,GAAG,CAACmH,kBAAkB,GAAG,CAAC;QAC1B,IAAInH,GAAG,CAACa,aAAa,IAAI,CAAC,CAAC,EACvBb,GAAG,CAACa,aAAa,GAAG,CAAC;QACzBb,GAAG,CAACoH,gBAAgB,GAAG,CAAC;QACxBpH,GAAG,CAACqH,eAAe,GAAG,CAAC;QACvB;MAEJ,KAAK,CAAC;QACFrH,GAAG,CAACgH,QAAQ,GAAG,CAAC;QAChB,IAAIhH,GAAG,CAACiH,aAAa,IAAI,CAAC,EACtBjH,GAAG,CAACiH,aAAa,GAAG,CAAC;QACzBjH,GAAG,CAACkH,iBAAiB,GAAG,CAAC;QACzBlH,GAAG,CAACmH,kBAAkB,GAAG,CAAC;QAC1B,IAAInH,GAAG,CAACa,aAAa,IAAI,CAAC,CAAC,EACvBb,GAAG,CAACa,aAAa,GAAG,CAAC;QACzBb,GAAG,CAACoH,gBAAgB,GAAG,CAAC;QACxBpH,GAAG,CAACqH,eAAe,GAAG,CAAC;QACvB;MAEJ,KAAK,CAAC;QACFrH,GAAG,CAACgH,QAAQ,GAAG,CAAC;QAChB,IAAIhH,GAAG,CAACiH,aAAa,IAAI,CAAC,EACtBjH,GAAG,CAACiH,aAAa,GAAG,CAAC;QACzBjH,GAAG,CAACkH,iBAAiB,GAAG,CAAC;QACzBlH,GAAG,CAACmH,kBAAkB,GAAG,CAAC;QAC1B,IAAInH,GAAG,CAACa,aAAa,IAAI,CAAC,CAAC,EACvBb,GAAG,CAACa,aAAa,GAAG,CAAC;QACzBb,GAAG,CAACoH,gBAAgB,GAAG,CAAC;QACxBpH,GAAG,CAACqH,eAAe,GAAG,CAAC;QACvB;MAEJ,KAAK,CAAC;QACFrH,GAAG,CAACgH,QAAQ,GAAG,CAAC;QAChB,IAAIhH,GAAG,CAACiH,aAAa,IAAI,CAAC,EACtBjH,GAAG,CAACiH,aAAa,GAAG,CAAC;QACzB,IAAIjH,GAAG,CAACsH,eAAe,IAAI,CAAC,EACxBtH,GAAG,CAACsH,eAAe,GAAG,CAAC;QAC3BtH,GAAG,CAACkH,iBAAiB,GAAG,CAAC;QACzBlH,GAAG,CAACmH,kBAAkB,GAAG,CAAC;QAC1B,IAAInH,GAAG,CAACa,aAAa,IAAI,CAAC,CAAC,EACvBb,GAAG,CAACa,aAAa,GAAG,CAAC;QACzBb,GAAG,CAACoH,gBAAgB,GAAG,CAAC;QACxB;QACApH,GAAG,CAACqH,eAAe,GAAG,CAAC;QACvB;MAEJ,KAAK,CAAC;QACFrH,GAAG,CAACgH,QAAQ,GAAG,CAAC;QAChB,IAAIhH,GAAG,CAACiH,aAAa,IAAI,CAAC,EACtBjH,GAAG,CAACiH,aAAa,GAAG,CAAC;QACzB,IAAIjH,GAAG,CAACsH,eAAe,IAAI,CAAC,EACxBtH,GAAG,CAACsH,eAAe,GAAG,CAAC;QAC3BtH,GAAG,CAACkH,iBAAiB,GAAG,CAAC;QACzBlH,GAAG,CAACmH,kBAAkB,GAAG,CAAC;QAC1B,IAAInH,GAAG,CAACa,aAAa,IAAI,CAAC,CAAC,EACvBb,GAAG,CAACa,aAAa,GAAG,CAAC;QACzBb,GAAG,CAACoH,gBAAgB,GAAG,CAAC;QACxBpH,GAAG,CAACqH,eAAe,GAAG,CAAC;QACvB;MAEJ,KAAK,CAAC;QACFrH,GAAG,CAACgH,QAAQ,GAAG,CAAC;QAChB,IAAIhH,GAAG,CAACiH,aAAa,IAAI,CAAC,EACtBjH,GAAG,CAACiH,aAAa,GAAG,CAAC;QACzB,IAAIjH,GAAG,CAACsH,eAAe,IAAI,CAAC,EACxBtH,GAAG,CAACsH,eAAe,GAAG,CAAC;QAC3BtH,GAAG,CAACkH,iBAAiB,GAAG,CAAC;QACzBlH,GAAG,CAACmH,kBAAkB,GAAG,CAAC;QAC1B,IAAInH,GAAG,CAACa,aAAa,IAAI,CAAC,CAAC,EACvBb,GAAG,CAACa,aAAa,GAAG,CAAC;QACzBb,GAAG,CAACoH,gBAAgB,GAAG,CAAC;QACxB;AAChB;AACA;AACA;QACgBpH,GAAG,CAACqH,eAAe,GAAG,CAAC;QACvB;AAChB;AACA;AACA;QACgB;IACR;EAEJ;EAEA,SAASE,mBAAmBA,CAACxH,GAAG,EAAE;IAC9B,IAAIC,GAAG,GAAGD,GAAG,CAACG,cAAc;IAC5BH,GAAG,CAACyH,QAAQ,GAAG,CAAC;IAEhB,IAAIzH,GAAG,CAAC4D,sBAAsB,EAAE;MAC5BxF,GAAG,CAACsJ,eAAe,CAAC1H,GAAG,CAAC;IAC5B;IACA;;IAEAC,GAAG,CAAC0H,uBAAuB,GAAGjM,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACpDuE,GAAG,CAAC2H,sBAAsB,GAAGlM,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAEvDuE,GAAG,CAAC4H,UAAU,GAAG,GAAG;;IAEpB;IACA,IAAI7H,GAAG,CAACW,YAAY,EAChBzC,GAAG,CAAC4J,UAAU,CAAC9H,GAAG,CAAC;EAC3B;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAI,CAAC+H,gBAAgB,GAAG,UAAU/H,GAAG,EAAE;IACnC,IAAIC,GAAG,GAAGD,GAAG,CAACG,cAAc;IAE5BF,GAAG,CAAC+H,QAAQ,GAAG,CAAC;IAChB,IAAI/H,GAAG,CAACjE,GAAG,IAAI,IAAI,EACfiE,GAAG,CAACjE,GAAG,GAAG,IAAIA,GAAG,CAAC,CAAC;IACvB,IAAIiE,GAAG,CAAChB,GAAG,IAAI,IAAI,EACfgB,GAAG,CAAChB,GAAG,GAAG,IAAIA,GAAG,CAAC,CAAC;IACvB,IAAIgB,GAAG,CAACgI,MAAM,IAAI,IAAI,EAClBhI,GAAG,CAACgI,MAAM,GAAG,IAAIhM,UAAU,CAAC,CAAC;IAEjCgE,GAAG,CAACiI,WAAW,GAAGlI,GAAG,CAACS,YAAY;IAClC,IAAIR,GAAG,CAACiI,WAAW,IAAI,CAAC,EACpBlI,GAAG,CAACI,IAAI,GAAGC,QAAQ,CAAC8H,IAAI;IAC5BlI,GAAG,CAACmI,YAAY,GAAIpI,GAAG,CAACI,IAAI,IAAIC,QAAQ,CAAC8H,IAAI,GAAI,CAAC,GAAG,CAAC;IACtDlI,GAAG,CAACoI,QAAQ,GAAGhM,OAAO,CAACiM,YAAY;IACnC,IAAItI,GAAG,CAACI,IAAI,IAAIC,QAAQ,CAAC8H,IAAI,EACzBnI,GAAG,CAACuI,QAAQ,GAAG,KAAK;IACxB;AACR;AACA;;IAEQ,IAAIvI,GAAG,CAACmB,GAAG,IAAIpG,OAAO,CAACqG,OAAO,IAAIpB,GAAG,CAACuB,qBAAqB,IAAI,GAAG,IAC3DvB,GAAG,CAACwI,KAAK,IAAI,CAAC,EACjBxI,GAAG,CAACwI,KAAK,GAAGxI,GAAG,CAACuB,qBAAqB;IAEzC,IAAIvB,GAAG,CAACmB,GAAG,IAAIpG,OAAO,CAACqG,OAAO,IAAIpB,GAAG,CAACmB,GAAG,IAAIpG,OAAO,CAAC0N,QAAQ,IACtDzI,GAAG,CAACmB,GAAG,IAAIpG,OAAO,CAAC2N,MAAM,EAAE;MAC9B;IAAA,CACH,MAAM;MACH1I,GAAG,CAAC2I,WAAW,GAAG,KAAK;MACvB;IACJ;IAEA,IAAI3I,GAAG,CAACmB,GAAG,IAAIpG,OAAO,CAACqG,OAAO,IAAIpB,GAAG,CAACwI,KAAK,IAAI,CAAC,EAAE;MAC9C;MACA,IAAIrM,SAAS,CAACyM,EAAE,CAAC5I,GAAG,CAAC6I,iBAAiB,EAAE,CAAC,CAAC,EACtC7I,GAAG,CAAC6I,iBAAiB,GAAG,MAAM;MAClC;AACZ;AACA;IACQ;;IAEA;IACA,IAAI7I,GAAG,CAACmB,GAAG,IAAIpG,OAAO,CAACqG,OAAO,IAAIpB,GAAG,CAAC6I,iBAAiB,GAAG,CAAC,EAAE;MAEzD,IAAI7I,GAAG,CAAC8I,cAAc,IAAI,CAAC,EACvB9I,GAAG,CAAC8I,cAAc,GAAGC,gBAAgB,CAAEC,GAAG,CAAE,IAAI,GAAGhJ,GAAG,CAACQ,aAAa,CAAC,CAAC;MAC1E;AACZ;AACA;;MAEY;AACZ;AACA;AACA;MACYR,GAAG,CAACwI,KAAK,GAAG,CAAC,GAAIxI,GAAG,CAAC8I,cAAc,GAAG,EAAE,GAAG7I,GAAG,CAACmI,YAAY,IAAI,IAAI,GAAGpI,GAAG,CAAC6I,iBAAiB,CAAE;;MAE7F;MACA5I,GAAG,CAACgJ,gBAAgB,GAAGjE,WAAW,CAAChF,GAAG,CAAC8I,cAAc,EAAE9I,GAAG,CAAC;MAE3D,IAAI,CAACA,GAAG,CAAC2I,WAAW;QAAE;AAClC;AACA;AACA;QACgB3I,GAAG,CAACwI,KAAK,GAAGpD,kBAAkB,CAACpF,GAAG,CAACwI,KAAK,EAAExI,GAAG,CAACmF,OAAO,EACjDnF,GAAG,CAAC8I,cAAc,CAAC;IAC/B;IAEA,IAAI9I,GAAG,CAAC8I,cAAc,IAAI,CAAC,EAAE;MACzB,IAAI9I,GAAG,CAAC8I,cAAc,GAAG,KAAK,EAAE;QAC5B9I,GAAG,CAACuB,qBAAqB,GAAG2C,IAAI,CAACU,GAAG,CAAC5E,GAAG,CAACuB,qBAAqB,EAC1D,CAAC,CAAC;QACNvB,GAAG,CAACuB,qBAAqB,GAAG2C,IAAI,CAACqC,GAAG,CAACvG,GAAG,CAACuB,qBAAqB,EAC1D,EAAE,CAAC;MACX,CAAC,MAAM,IAAIvB,GAAG,CAAC8I,cAAc,GAAG,KAAK,EAAE;QACnC9I,GAAG,CAACuB,qBAAqB,GAAG2C,IAAI,CAACU,GAAG,CAAC5E,GAAG,CAACuB,qBAAqB,EAC1D,CAAC,CAAC;QACNvB,GAAG,CAACuB,qBAAqB,GAAG2C,IAAI,CAACqC,GAAG,CAACvG,GAAG,CAACuB,qBAAqB,EAC1D,GAAG,CAAC;MACZ,CAAC,MAAM;QACHvB,GAAG,CAACuB,qBAAqB,GAAG2C,IAAI,CAACU,GAAG,CAAC5E,GAAG,CAACuB,qBAAqB,EAC1D,EAAE,CAAC;QACPvB,GAAG,CAACuB,qBAAqB,GAAG2C,IAAI,CAACqC,GAAG,CAACvG,GAAG,CAACuB,qBAAqB,EAC1D,GAAG,CAAC;MACZ;IACJ;;IAEA;IACA;IACA;IACA,IAAIvB,GAAG,CAACe,WAAW,IAAI,CAAC,EAAE;MACtB,IAAIlB,OAAO,GAAG,MAAM;MAEpB,QAAQG,GAAG,CAACmB,GAAG;QACX,KAAKpG,OAAO,CAACqG,OAAO;UACpB;YACI,IAAIwE,EAAE,GAAG,IAAIpG,eAAe,CAAC,CAAC;YAC9BmG,iBAAiB,CAACC,EAAE,EAAE5F,GAAG,CAACwI,KAAK,CAAC;YAChC3I,OAAO,GAAG+F,EAAE,CAACnG,UAAU;YACvB;UACJ;QACA,KAAK1E,OAAO,CAACmO,OAAO;UACpB;YACI,IAAItD,EAAE,GAAG,IAAIpG,eAAe,CAAC,CAAC;YAC9BmG,iBAAiB,CAACC,EAAE,EAAE5F,GAAG,CAACuB,qBAAqB,CAAC;YAChD1B,OAAO,GAAG+F,EAAE,CAACnG,UAAU;YACvB;UACJ;QACA,KAAK1E,OAAO,CAACoO,MAAM;UACnB;YACI,IAAIlF,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAC7C,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC;YACrC,IAAI,CAAC,IAAIjE,GAAG,CAACqB,KAAK,IAAIrB,GAAG,CAACqB,KAAK,IAAI,CAAC,EAAE;cAClC,IAAI+H,CAAC,GAAGnF,CAAC,CAACjE,GAAG,CAACqB,KAAK,CAAC;gBAAEsD,CAAC,GAAGV,CAAC,CAACjE,GAAG,CAACqB,KAAK,GAAG,CAAC,CAAC;gBAAEgI,CAAC,GAAGrJ,GAAG,CAACsJ,UAAU;cAC9DzJ,OAAO,GAAG0J,UAAU,CAACH,CAAC,EAAEzE,CAAC,EAAE0E,CAAC,CAAC;YACjC,CAAC,MAAM;cACHxJ,OAAO,GAAG,KAAK;YACnB;YACA;UACJ;QACA;UACA;YACI,IAAIoE,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAC7C,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;YACpC,IAAI,CAAC,IAAIjE,GAAG,CAACqB,KAAK,IAAIrB,GAAG,CAACqB,KAAK,IAAI,CAAC,EAAE;cAClC,IAAI+H,CAAC,GAAGnF,CAAC,CAACjE,GAAG,CAACqB,KAAK,CAAC;gBAAEsD,CAAC,GAAGV,CAAC,CAACjE,GAAG,CAACqB,KAAK,GAAG,CAAC,CAAC;gBAAEgI,CAAC,GAAGrJ,GAAG,CAACsJ,UAAU;cAC9DzJ,OAAO,GAAG0J,UAAU,CAACH,CAAC,EAAEzE,CAAC,EAAE0E,CAAC,CAAC;YACjC,CAAC,MAAM;cACHxJ,OAAO,GAAG,KAAK;YACnB;UACJ;MACJ;MACA,IAAIG,GAAG,CAACI,IAAI,IAAIC,QAAQ,CAAC8H,IAAI,KACrBnI,GAAG,CAACmB,GAAG,IAAIpG,OAAO,CAACqG,OAAO,IAAIpB,GAAG,CAACmB,GAAG,IAAIpG,OAAO,CAACmO,OAAO,CAAC,EAC7DrJ,OAAO,IAAI,GAAG;MAElBG,GAAG,CAACe,WAAW,GAAGlB,OAAO,GAAG,CAAC;IACjC;IAEA,IAAIG,GAAG,CAAC8I,cAAc,IAAI,CAAC,EAAE;MACzB,IAAI,CAAC,GAAG9I,GAAG,CAACe,WAAW,GAAGf,GAAG,CAACQ,aAAa,EAAE;QACzCR,GAAG,CAACe,WAAW,GAAGf,GAAG,CAACQ,aAAa,GAAG,CAAC;MAC3C;MACAR,GAAG,CAAC8I,cAAc,GAAGjE,kBAAkB,CAAC7E,GAAG,CAACe,WAAW,GAAG,CAAC,EACvDf,GAAG,CAACQ,aAAa,CAAC;IAC1B;IAEAR,GAAG,CAACe,WAAW,GAAGmD,IAAI,CAACqC,GAAG,CAAC,KAAK,EAAEvG,GAAG,CAACe,WAAW,CAAC;IAClDf,GAAG,CAACe,WAAW,GAAGmD,IAAI,CAACqC,GAAG,CAACvG,GAAG,CAAC8I,cAAc,GAAG,CAAC,EAAE9I,GAAG,CAACe,WAAW,CAAC;IAEnE,IAAIf,GAAG,CAACmB,GAAG,IAAIpG,OAAO,CAACqG,OAAO,EAAE;MAC5BpB,GAAG,CAAC6I,iBAAiB,GAAG7I,GAAG,CAAC8I,cAAc,GAAG,EAAE,GAAG7I,GAAG,CAACmI,YAAY,IAC3D,IAAI,GAAGpI,GAAG,CAACwI,KAAK,CAAC;IAC5B;IACA,IAAIxI,GAAG,CAACmB,GAAG,IAAIpG,OAAO,CAACmO,OAAO,EAAE;MAC5BlJ,GAAG,CAAC6I,iBAAiB,GAAG7I,GAAG,CAAC8I,cAAc,GAAG,EAAE,GAAG7I,GAAG,CAACmI,YAAY,IAC3D,IAAI,GAAGpI,GAAG,CAACuB,qBAAqB,CAAC;IAC5C;;IAEA;AACR;AACA;AACA;IACQ,IAAI,CAACvB,GAAG,CAACW,YAAY,EAAE;MACnBX,GAAG,CAACoD,cAAc,GAAG,KAAK;MAC1BpD,GAAG,CAACqD,iBAAiB,GAAG,KAAK;MAC7BpD,GAAG,CAACqD,cAAc,GAAG,KAAK;IAC9B;IACArD,GAAG,CAACmD,cAAc,GAAGpD,GAAG,CAACoD,cAAc;IACvCnD,GAAG,CAACoD,iBAAiB,GAAGrD,GAAG,CAACqD,iBAAiB;IAE7C,IAAIpD,GAAG,CAACoD,iBAAiB,EACrBpD,GAAG,CAACqD,cAAc,GAAG,IAAI;IAE7B,IAAIrD,GAAG,CAACmD,cAAc,EAAE;MACpB,IAAIxF,EAAE,CAAC4L,gBAAgB,CAACvJ,GAAG,CAACgI,MAAM,EAAEjI,GAAG,CAAC8I,cAAc,CAAC,IAAIW,YAAY,CAACC,wBAAwB,EAAE;QAC9F1J,GAAG,CAACG,cAAc,GAAG,IAAI;QACzB,OAAO,CAAC,CAAC;MACb;IACJ;IAEA,IAAIF,GAAG,CAACoD,iBAAiB,IAAI,CAACrD,GAAG,CAAC2J,WAAW,EAAE;MAC3C,IAAI1J,GAAG,CAAC2J,GAAG,IAAI,IAAI,EAAE;QACjBvL,MAAM,CAACwL,eAAe,CAAC5J,GAAG,CAAC2J,GAAG,CAAC;MACnC;MACA3J,GAAG,CAAC2J,GAAG,GAAGvL,MAAM,CAACyL,eAAe,CAAC,CAAC;IACtC;IAEA7J,GAAG,CAAC8J,OAAO,GAAG/J,GAAG,CAAC8I,cAAc,IAAI,KAAK,GAAG,CAAC,GAAG,CAAC;IACjD;AACR;AACA;IACQ9I,GAAG,CAACgK,SAAS,GAAG,GAAG,GAAG/J,GAAG,CAAC8J,OAAO;IACjC/J,GAAG,CAACiK,aAAa,GAAG5N,OAAO,CAAC0G,QAAQ;IAEpC9C,GAAG,CAAC+B,cAAc,GAAGhC,GAAG,CAACQ,aAAa,GAAGR,GAAG,CAAC8I,cAAc;;IAE3D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,QAAQ9I,GAAG,CAACmB,GAAG;MACX,KAAKpG,OAAO,CAAC2N,MAAM;MACnB,KAAK3N,OAAO,CAACoO,MAAM;MACnB,KAAKpO,OAAO,CAAC0N,QAAQ;QACrB;UACI;UACA,IAAIyB,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAC3C,EAAE,EAAE,IAAI,CAAC;UACblK,GAAG,CAAC6I,iBAAiB,GAAGqB,GAAG,CAAClK,GAAG,CAACqB,KAAK,CAAC;QAC1C;QACI;MACJ,KAAKtG,OAAO,CAACmO,OAAO;QAChBlJ,GAAG,CAAC6I,iBAAiB,GAAG7I,GAAG,CAAC8I,cAAc,GAAG,EAAE,GAAG7I,GAAG,CAACmI,YAAY,IAC3D,IAAI,GAAGpI,GAAG,CAACuB,qBAAqB,CAAC;QACxC;MACJ;QACIvB,GAAG,CAAC6I,iBAAiB,GAAG7I,GAAG,CAAC8I,cAAc,GAAG,EAAE,GAAG7I,GAAG,CAACmI,YAAY,IAC3D,IAAI,GAAGpI,GAAG,CAACwI,KAAK,CAAC;QACxB;IACR;;IAEA;AACR;AACA;AACA;IACQ,IAAIxI,GAAG,CAACI,IAAI,IAAIC,QAAQ,CAACC,OAAO,EAAE;MAC9BN,GAAG,CAACI,IAAI,GAAGC,QAAQ,CAAC8J,YAAY;IACpC;;IAEA;IACA,IAAInK,GAAG,CAACgB,YAAY,GAAG,CAAC,EAAE;MACtBf,GAAG,CAACwG,SAAS,GAAG,EAAE,GAAGzG,GAAG,CAACgB,YAAY;MAErC,IAAIhB,GAAG,CAACkB,aAAa,IAAI,CAAC,EACtBjB,GAAG,CAACuG,SAAS,GAAG,EAAE,IAAIxG,GAAG,CAACgB,YAAY,GAAGhB,GAAG,CAACkB,aAAa,CAAC,CAAC,KAEhE;QACIjB,GAAG,CAACuG,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,IAAI,EAAE,GAAGxG,GAAG,CAACgB,YAAY;MAEtDf,GAAG,CAACwG,SAAS,IAAIzG,GAAG,CAAC8I,cAAc;MACnC7I,GAAG,CAACuG,SAAS,IAAIxG,GAAG,CAAC8I,cAAc;IACvC,CAAC,MAAM;MACH7I,GAAG,CAACwG,SAAS,GAAG,CAAC;MACjBxG,GAAG,CAACuG,SAAS,GAAG,CAAC;IACrB;IACA;IACA,IAAIxG,GAAG,CAACe,WAAW,GAAG,CAAC,EAAE;MACrBd,GAAG,CAACqG,QAAQ,GAAG,EAAE,GAAGtG,GAAG,CAACe,WAAW;MACnC,IAAIf,GAAG,CAACiB,YAAY,IAAI,CAAC,EAAE;QACvBhB,GAAG,CAACiG,QAAQ,GAAG,EAAE,IAAIlG,GAAG,CAACe,WAAW,GAAGf,GAAG,CAACiB,YAAY,CAAC;QACxD,IAAIhB,GAAG,CAACiG,QAAQ,GAAG,CAAC,EAAE;UAClBjG,GAAG,CAACiG,QAAQ,GAAG,CAAC;MACxB,CAAC,MAAM;QAAE;QACLjG,GAAG,CAACiG,QAAQ,GAAG,CAAC,CAAC,GAAG,IAAI,IAAI,EAAE,GAAGlG,GAAG,CAACe,WAAW;MACpD;MACAd,GAAG,CAACiG,QAAQ,IAAIlG,GAAG,CAAC8I,cAAc;MAClC7I,GAAG,CAACqG,QAAQ,IAAItG,GAAG,CAAC8I,cAAc;IACtC,CAAC,MAAM;MACH7I,GAAG,CAACiG,QAAQ,GAAG,CAAC;MAChBjG,GAAG,CAACqG,QAAQ,GAAG,CAAC;IACpB;;IAEA;IACA;IACA;IACAP,sBAAsB,CAAC/F,GAAG,CAAC;IAC3B;AACR;AACA;IACQC,GAAG,CAACgJ,gBAAgB,GAAGjE,WAAW,CAAChF,GAAG,CAAC8I,cAAc,EAAE9I,GAAG,CAAC;IAC3D,IAAIC,GAAG,CAACgJ,gBAAgB,GAAG,CAAC,EAAE;MAC1BjJ,GAAG,CAACG,cAAc,GAAG,IAAI;MACzB,OAAO,CAAC,CAAC;IACb;IAEA,IAAIH,GAAG,CAACmB,GAAG,IAAIpG,OAAO,CAACqG,OAAO,EAAE;MAC5B,IAAIpB,GAAG,CAAC2I,WAAW,EAAE;QACjB1I,GAAG,CAACmK,aAAa,GAAG,CAAC;MACzB,CAAC,MAAM;QACHpK,GAAG,CAACwI,KAAK,GAAGpD,kBAAkB,CAACpF,GAAG,CAACwI,KAAK,EAAExI,GAAG,CAACmF,OAAO,EACjDnF,GAAG,CAAC8I,cAAc,CAAC;QACvB7I,GAAG,CAACmK,aAAa,GAAG1E,YAAY,CAAC1F,GAAG,CAACwI,KAAK,EAAExI,GAAG,CAACmF,OAAO,EACnDnF,GAAG,CAAC8I,cAAc,CAAC;QACvB,IAAI7I,GAAG,CAACmK,aAAa,IAAI,CAAC,EAAE;UACxBpK,GAAG,CAACG,cAAc,GAAG,IAAI;UACzB,OAAO,CAAC,CAAC;QACb;MACJ;IACJ,CAAC,MAAM;MACHF,GAAG,CAACmK,aAAa,GAAG,CAAC;IACzB;;IAEA;;IAEA,IAAIpK,GAAG,CAACqK,QAAQ,EACZrK,GAAG,CAACW,YAAY,GAAG,KAAK;;IAE5B;IACA,IAAIV,GAAG,CAACqK,KAAK,IAAI,IAAI,EACjBtK,GAAG,CAACW,YAAY,GAAG,KAAK;IAC5B;;IAEA9C,EAAE,CAAC0M,iBAAiB,CAACtK,GAAG,CAAC;IAEzB,IAAIuK,CAAC,GAAGvK,GAAG,CAACgJ,gBAAgB,GAAI,CAAC,GAAGjJ,GAAG,CAACmF,OAAQ,GAAG,CAAC,IAC7CnF,GAAG,CAAC8I,cAAc,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;IAC1C,KAAK,IAAItD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnJ,OAAO,CAACgD,OAAO,GAAG,CAAC,EAAEmG,CAAC,EAAE,EACxCvF,GAAG,CAACwK,aAAa,CAACC,CAAC,CAAClF,CAAC,CAAC,GAAGzH,KAAK,CAAC4M,WAAW,CAACH,CAAC,CAAC,CAACE,CAAC,CAAClF,CAAC,CAAC;IAEtD,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnJ,OAAO,CAACuO,MAAM,GAAG,CAAC,EAAEpF,CAAC,EAAE,EAAE;MACzC,IAAIqF,IAAI,GAAG,CAAC5K,GAAG,CAACwK,aAAa,CAACC,CAAC,CAAC,EAAE,CAAC,GAAGzK,GAAG,CAACwK,aAAa,CAACC,CAAC,CAAC,EAAE,CAAC,IACvDrO,OAAO,CAACuO,MAAM;MACpB,IAAIE,KAAK,GAAG7K,GAAG,CAACwK,aAAa,CAACC,CAAC,CAAC,EAAE,CAAC,GAAGlF,CAAC,GAAGqF,IAAI;MAC9C5K,GAAG,CAACwK,aAAa,CAACM,MAAM,CAACvF,CAAC,CAAC,GAAGsF,KAAK;IACvC;IACA7K,GAAG,CAACwK,aAAa,CAACM,MAAM,CAAC1O,OAAO,CAACuO,MAAM,CAAC,GAAG,GAAG;IAE9C,KAAK,IAAIpF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnJ,OAAO,CAACkD,OAAO,GAAG,CAAC,EAAEiG,CAAC,EAAE,EACxCvF,GAAG,CAACwK,aAAa,CAACO,CAAC,CAACxF,CAAC,CAAC,GAAGzH,KAAK,CAAC4M,WAAW,CAACH,CAAC,CAAC,CAACQ,CAAC,CAACxF,CAAC,CAAC;IAEtD,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnJ,OAAO,CAAC4O,MAAM,GAAG,CAAC,EAAEzF,CAAC,EAAE,EAAE;MACzC,IAAIqF,IAAI,GAAG,CAAC5K,GAAG,CAACwK,aAAa,CAACO,CAAC,CAAC,EAAE,CAAC,GAAG/K,GAAG,CAACwK,aAAa,CAACO,CAAC,CAAC,EAAE,CAAC,IACvD3O,OAAO,CAAC4O,MAAM;MACpB,IAAIH,KAAK,GAAG7K,GAAG,CAACwK,aAAa,CAACO,CAAC,CAAC,EAAE,CAAC,GAAGxF,CAAC,GAAGqF,IAAI;MAC9C5K,GAAG,CAACwK,aAAa,CAACS,MAAM,CAAC1F,CAAC,CAAC,GAAGsF,KAAK;IACvC;IACA7K,GAAG,CAACwK,aAAa,CAACS,MAAM,CAAC7O,OAAO,CAAC4O,MAAM,CAAC,GAAG,GAAG;IAC9C;IACA,IAAIjL,GAAG,CAACmF,OAAO,IAAI,CAAC,EAAE;MAClBlF,GAAG,CAACkL,YAAY,GAAIlL,GAAG,CAACmI,YAAY,IAAI,CAAC,GAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,KAEjE;MACInI,GAAG,CAACkL,YAAY,GAAIlL,GAAG,CAACmI,YAAY,IAAI,CAAC,GAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE;IAE/D,IAAIpI,GAAG,CAACoL,gBAAgB,EACpBnL,GAAG,CAACkL,YAAY,IAAI,CAAC;IAEzB3D,mBAAmB,CAACxH,GAAG,CAAC;IAExBC,GAAG,CAAC+H,QAAQ,GAAGlI,OAAO;IAEtB;MACI,IAAIuL,CAAC;MAEL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EACnBpL,GAAG,CAACmC,KAAK,CAACkJ,QAAQ,CAACD,CAAC,CAAC,GAAG,GAAG,GAAGpL,GAAG,CAAC8J,OAAO,GAAG9J,GAAG,CAACmI,YAAY;MAEhE,IAAIpI,GAAG,CAACyC,OAAO,IAAI,CAAC,CAAC,EACjBzC,GAAG,CAACyC,OAAO,GAAG,CAAC;IACvB;IACA7G,MAAM,CAACoE,GAAG,CAACqB,KAAK,IAAI,CAAC,CAAC;IACtBzF,MAAM,CAACoE,GAAG,CAACqB,KAAK,IAAI,CAAC,CAAC;IAEtB,QAAQrB,GAAG,CAACmB,GAAG;MAEX,KAAKpG,OAAO,CAAC2N,MAAM;QACf1I,GAAG,CAACmB,GAAG,GAAGpG,OAAO,CAAC0N,QAAQ;MAC9B;MACA,KAAK1N,OAAO,CAAC0N,QAAQ;QACrB;UACI,IAAIzI,GAAG,CAAC4C,WAAW,IAAI,IAAI,EAAE;YACzB5C,GAAG,CAAC4C,WAAW,GAAG,KAAK;YACvB;UACJ;UAEA9E,CAAC,CAACyN,YAAY,CAACvL,GAAG,EAAE,GAAG,GAAIA,GAAG,CAACqB,KAAK,GAAG,EAAG,EAAE,CAAC,CAAC;UAC9C;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;UACgB,IAAIrB,GAAG,CAACY,OAAO,GAAG,CAAC,EACfZ,GAAG,CAACY,OAAO,GAAG4K,oBAAoB;UACtC,IAAIxL,GAAG,CAACY,OAAO,GAAG,CAAC,EACfZ,GAAG,CAACY,OAAO,GAAG,CAAC;UACnB,IAAIZ,GAAG,CAACY,OAAO,GAAG,CAAC,EACfZ,GAAG,CAACY,OAAO,GAAG,CAAC;UAEnBX,GAAG,CAAChB,GAAG,CAACC,WAAW,GAAGc,GAAG,CAACyL,aAAa;UACvCxL,GAAG,CAAChB,GAAG,CAACE,iBAAiB,GAAGa,GAAG,CAAC0L,mBAAmB;;UAEnD;AAChB;AACA;UACgB,IAAI1L,GAAG,CAAC2L,aAAa,EACjB1L,GAAG,CAAC2L,WAAW,GAAG,KAAK,CAAC,KAExB3L,GAAG,CAAC2L,WAAW,GAAI5L,GAAG,CAAC8I,cAAc,GAAG,KAAM;UAElD7I,GAAG,CAAC4L,cAAc,GAAG,IAAIC,mBAAmB,CAAC9N,EAAE,CAAC;UAChD;QAEJ;MACA,KAAKjD,OAAO,CAACoO,MAAM;QACnB;UAEIrL,CAAC,CAACyN,YAAY,CAACvL,GAAG,EAAE,GAAG,GAAIA,GAAG,CAACqB,KAAK,GAAG,EAAG,EAAE,CAAC,CAAC;UAE9CpB,GAAG,CAAChB,GAAG,CAACC,WAAW,GAAGc,GAAG,CAACyL,aAAa;UACvCxL,GAAG,CAAChB,GAAG,CAACE,iBAAiB,GAAGa,GAAG,CAAC0L,mBAAmB;;UAEnD;AAChB;AACA;UACgB,IAAI1L,GAAG,CAAC2L,aAAa,EACjB1L,GAAG,CAAC2L,WAAW,GAAG,KAAK,CAAC,KAExB3L,GAAG,CAAC2L,WAAW,GAAI5L,GAAG,CAAC8I,cAAc,GAAG,KAAM;;UAElD;AAChB;AACA;AACA;AACA;UACgB,IAAI9I,GAAG,CAACY,OAAO,GAAG,CAAC,EACfZ,GAAG,CAACY,OAAO,GAAG,CAAC;UAEnB,IAAIZ,GAAG,CAACY,OAAO,GAAG,CAAC,EACfZ,GAAG,CAACY,OAAO,GAAG4K,oBAAoB;UAEtCvL,GAAG,CAAC4L,cAAc,GAAG,IAAIE,mBAAmB,CAAC/N,EAAE,CAAC;UAChD;QACJ;MAEA;QAAS;QACT;UACI,IAAIgO,OAAO;;UAEX;AAChB;AACA;UACgB/L,GAAG,CAAC2L,WAAW,GAAG,KAAK;UAEvB,IAAI5L,GAAG,CAACY,OAAO,GAAG,CAAC,EACfZ,GAAG,CAACY,OAAO,GAAG4K,oBAAoB;UAEtCQ,OAAO,GAAGhM,GAAG,CAACmB,GAAG;UACjB,IAAI6K,OAAO,IAAIjR,OAAO,CAACqG,OAAO,EAC1BpB,GAAG,CAACuB,qBAAqB,GAAGvB,GAAG,CAACwI,KAAK;UACzC;UACA1K,CAAC,CAACyN,YAAY,CAACvL,GAAG,EAAEA,GAAG,CAACuB,qBAAqB,EAAE,CAAC,CAAC;UACjDvB,GAAG,CAACmB,GAAG,GAAG6K,OAAO;UAEjB/L,GAAG,CAAChB,GAAG,CAACC,WAAW,GAAGc,GAAG,CAACyL,aAAa;UACvCxL,GAAG,CAAChB,GAAG,CAACE,iBAAiB,GAAGa,GAAG,CAAC0L,mBAAmB;UAEnD,IAAIM,OAAO,IAAIjR,OAAO,CAACqG,OAAO,EAAE;YAC5BnB,GAAG,CAAC4L,cAAc,GAAG,IAAI3P,mBAAmB,CAAC8B,EAAE,CAAC;UACpD,CAAC,MAAM;YACHiC,GAAG,CAAC4L,cAAc,GAAG,IAAII,gBAAgB,CAACjO,EAAE,CAAC;UACjD;UACA;QACJ;IACJ;IACApC,MAAM,CAACoE,GAAG,CAACuC,KAAK,IAAI,CAAC,CAAC;IACtB;;IAEA,IAAIvC,GAAG,CAACmB,GAAG,IAAIpG,OAAO,CAACqG,OAAO,EAAE;MAAE;MAC9B;MACAnB,GAAG,CAAC0B,eAAe,GAAG,CAAC;MACvB;AACZ;AACA;MACY1B,GAAG,CAAC2B,eAAe,GAAG,EAAE;MACxB;AACZ;AACA;MACY,IAAI5B,GAAG,CAAC8I,cAAc,GAAG,KAAK,EAC1B7I,GAAG,CAAC2B,eAAe,GAAG,CAAC;MAC3B;MACA,IAAI5B,GAAG,CAACwB,oBAAoB,IAAI,CAAC,EAAE;QAC/BxB,GAAG,CAACwB,oBAAoB,GAAG4D,kBAAkB,CACzCpF,GAAG,CAACwB,oBAAoB,EAAExB,GAAG,CAACmF,OAAO,EACrCnF,GAAG,CAAC8I,cAAc,CAAC;QACvB7I,GAAG,CAAC0B,eAAe,GAAG+D,YAAY,CAAC1F,GAAG,CAACwB,oBAAoB,EACvDxB,GAAG,CAACmF,OAAO,EAAEnF,GAAG,CAAC8I,cAAc,CAAC;QACpC,IAAI7I,GAAG,CAAC0B,eAAe,GAAG,CAAC,EACvB,OAAO,CAAC,CAAC;MACjB;MACA,IAAI3B,GAAG,CAACyB,oBAAoB,IAAI,CAAC,EAAE;QAC/BzB,GAAG,CAACyB,oBAAoB,GAAG2D,kBAAkB,CACzCpF,GAAG,CAACyB,oBAAoB,EAAEzB,GAAG,CAACmF,OAAO,EACrCnF,GAAG,CAAC8I,cAAc,CAAC;QACvB7I,GAAG,CAAC2B,eAAe,GAAG8D,YAAY,CAAC1F,GAAG,CAACyB,oBAAoB,EACvDzB,GAAG,CAACmF,OAAO,EAAEnF,GAAG,CAAC8I,cAAc,CAAC;QACpC,IAAI7I,GAAG,CAAC2B,eAAe,GAAG,CAAC,EACvB,OAAO,CAAC,CAAC;MACjB;MACA5B,GAAG,CAACwB,oBAAoB,GAAGpF,MAAM,CAACmJ,aAAa,CAACvF,GAAG,CAACmF,OAAO,CAAC,CAAClF,GAAG,CAAC0B,eAAe,CAAC;MACjF3B,GAAG,CAACyB,oBAAoB,GAAGrF,MAAM,CAACmJ,aAAa,CAACvF,GAAG,CAACmF,OAAO,CAAC,CAAClF,GAAG,CAAC2B,eAAe,CAAC;MACjF5B,GAAG,CAACuB,qBAAqB,GAAG2C,IAAI,CAACqC,GAAG,CAChCnK,MAAM,CAACmJ,aAAa,CAACvF,GAAG,CAACmF,OAAO,CAAC,CAAClF,GAAG,CAAC2B,eAAe,CAAC,EACtD5B,GAAG,CAACuB,qBAAqB,CAAC;MAC9BvB,GAAG,CAACuB,qBAAqB,GAAG2C,IAAI,CAACU,GAAG,CAChCxI,MAAM,CAACmJ,aAAa,CAACvF,GAAG,CAACmF,OAAO,CAAC,CAAClF,GAAG,CAAC0B,eAAe,CAAC,EACtD3B,GAAG,CAACuB,qBAAqB,CAAC;IAClC;;IAEA;IACA,IAAIvB,GAAG,CAACkM,IAAI,EAAE;MACVjM,GAAG,CAAChB,GAAG,CAACC,WAAW,IAAIc,GAAG,CAACmM,YAAY;MACvClM,GAAG,CAAChB,GAAG,CAACE,iBAAiB,IAAIa,GAAG,CAACmM,YAAY;IACjD;;IAEA;IACAnF,cAAc,CAAChH,GAAG,CAAC;IACnBpE,MAAM,CAACoE,GAAG,CAACuC,KAAK,IAAI,CAAC,CAAC;IACtB;AACR;AACA;IACQ,IAAIvC,GAAG,CAACwC,UAAU,GAAG,CAAC,EAClBvC,GAAG,CAACjE,GAAG,CAACoQ,SAAS,GAAG,CAAC,CAAC,KAEtBnM,GAAG,CAACjE,GAAG,CAACoQ,SAAS,GAAGpM,GAAG,CAACwC,UAAU;;IAEtC;IACAvC,GAAG,CAACjE,GAAG,CAACqQ,cAAc,GAAGnI,IAAI,CAACoI,GAAG,CAAC,IAAI,EAAEtM,GAAG,CAAC2C,iBAAiB,GACvD,CAAC,IAAI,CAAC;IAEZ,IAAI3C,GAAG,CAACa,YAAY,IAAI,IAAI,EAAE;MAC1Bb,GAAG,CAACa,YAAY,GAAG5F,UAAU,CAACsR,mBAAmB;IACrD;;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ;AACR;AACA;IACQ,IAAIvM,GAAG,CAACa,YAAY,IAAI5F,UAAU,CAACsR,mBAAmB,KAC9CvM,GAAG,CAACI,IAAI,IAAIC,QAAQ,CAAC8J,YAAY,IAAInK,GAAG,CAACI,IAAI,IAAIC,QAAQ,CAACmM,MAAM,CAAC,EAAE;MACvExM,GAAG,CAACa,YAAY,GAAG5F,UAAU,CAACwR,mBAAmB;IACrD;IAEA,IAAIzM,GAAG,CAAC6B,UAAU,GAAG,CAAC,EAClB7B,GAAG,CAAC6B,UAAU,GAAG,CAAC;IACtB,IAAI7B,GAAG,CAAC8B,gBAAgB,GAAG,CAAC,EACxB9B,GAAG,CAAC8B,gBAAgB,GAAG,CAAC;IAE5B,IAAI9B,GAAG,CAAC+B,KAAK,GAAG,CAAC,EACb/B,GAAG,CAAC+B,KAAK,GAAG,CAAC;;IAEjB;IACA/B,GAAG,CAAC0M,aAAa,GAAG1M,GAAG,CAAC0M,aAAa,GAAG,CAAC;IAEzC,IAAI1M,GAAG,CAACG,cAAc,CAACiC,KAAK,CAACC,UAAU,GAAG,CAAC,EACvCrC,GAAG,CAACG,cAAc,CAACiC,KAAK,CAACC,UAAU,GAAGxG,QAAQ,CAAC8Q,YAAY;IAC/D,IAAI3M,GAAG,CAACG,cAAc,CAACiC,KAAK,CAACE,YAAY,GAAG,CAAC,EACzCtC,GAAG,CAACG,cAAc,CAACiC,KAAK,CAACE,YAAY,GAAGzG,QAAQ,CAAC+Q,cAAc;IAEnEhR,MAAM,CAACoE,GAAG,CAACuC,KAAK,IAAI,CAAC,CAAC;IAEtB,IAAIvC,GAAG,CAACuC,KAAK,GAAG,CAAC,EACbvC,GAAG,CAACuC,KAAK,GAAG,CAAC;IAEjB,IAAIvC,GAAG,CAACyC,OAAO,GAAG,CAAC,EACfzC,GAAG,CAACyC,OAAO,GAAG,CAAC;IAEnB,IAAIzC,GAAG,CAACsB,QAAQ,GAAG,CAAC,EAChBtB,GAAG,CAACsB,QAAQ,GAAG,CAAC;IAEpB,IAAItB,GAAG,CAAC0C,gBAAgB,GAAG,CAAC,EACxB1C,GAAG,CAAC0C,gBAAgB,GAAG,CAAC;IAE5B,IAAI1C,GAAG,CAAC6C,YAAY,GAAG,CAAC,EACpB7C,GAAG,CAAC6C,YAAY,GAAG,CAAC;IAExB,IAAI7C,GAAG,CAAC4C,WAAW,IAAI,IAAI,EACvB5C,GAAG,CAAC4C,WAAW,GAAG,IAAI;IAC1B;;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ3C,GAAG,CAAC4M,QAAQ,GAAG5M,GAAG,CAAC6M,QAAQ,GAAG,CAAC;IAC/B,IAAI9M,GAAG,CAACmB,GAAG,IAAIpG,OAAO,CAACqG,OAAO,EAC1BnB,GAAG,CAAC4M,QAAQ,GAAG5M,GAAG,CAAC6M,QAAQ,GAAK,CAAC9M,GAAG,CAACmF,OAAO,GAAG,CAAC,IAAI,KAAK,GAAGnF,GAAG,CAACwI,KAAK,GAAIxI,GAAG,CAAC8I,cAAc,GAAI,CAAC;IAEpG/K,KAAK,CAACgP,cAAc,CAAC/M,GAAG,CAAC;IACzB/B,GAAG,CAAC+O,aAAa,CAAChN,GAAG,CAAC;IACtBpE,MAAM,CAACoE,GAAG,CAACuC,KAAK,IAAI,CAAC,CAAC;IACtB,OAAO,CAAC;EACZ,CAAC;EAED,SAAS0K,oBAAoBA,CAAChN,GAAG,EAAEiN,QAAQ,EAAE;IACzC,IAAIjN,GAAG,CAACkN,WAAW,IAAI,IAAI,IAAIlN,GAAG,CAACmN,kBAAkB,GAAGF,QAAQ,EAAE;MAC9DjN,GAAG,CAACkN,WAAW,GAAG5R,SAAS,CAAC2R,QAAQ,CAAC;MACrCjN,GAAG,CAACoN,WAAW,GAAG9R,SAAS,CAAC2R,QAAQ,CAAC;MACrCjN,GAAG,CAACmN,kBAAkB,GAAGF,QAAQ;IACrC;EACJ;EAEA,IAAI,CAACI,iBAAiB,GAAG,UAAUtN,GAAG,EAAEuN,SAAS,EAAEC,YAAY,EAAEC,cAAc,EAAE;IAC7E,IAAIxN,GAAG,GAAGD,GAAG,CAACG,cAAc;IAC5B,IAAIuN,MAAM,GAAG/R,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IACnC,IAAIgS,IAAI,GAAG,CAAC;MAAEC,QAAQ;MAAEC,wBAAwB;;IAEhD;AACR;AACA;AACA;AACA;IACQ,IAAIC,WAAW;IACf,IAAIC,WAAW;IACf,IAAIC,iBAAiB,GAAG/N,GAAG,CAAC6C,oBAAoB,GAAGzG,OAAO,CAAC2G,SAAS;IACpE,IAAIiL,SAAS,GAAGC,UAAU,CAAClO,GAAG,CAAC;;IAE/B;IACA,IAAIC,GAAG,CAAC6C,oBAAoB,GAAG,CAAC,EAAE;MAC9B,OAAO,CAAC;IACZ;IACA8K,QAAQ,GAAG,CAAC;IAEZ,IAAI5N,GAAG,CAACQ,aAAa,IAAIR,GAAG,CAAC8I,cAAc,EAAE;MACzC;AACZ;AACA;AACA;MACYkF,iBAAiB,IAAI,GAAG,GAAGhO,GAAG,CAAC8I,cAAc,GAAG9I,GAAG,CAACQ,aAAa;IACrE;IACAsN,WAAW,GAAG9N,GAAG,CAACgK,SAAS,GAAIgE,iBAAiB,GAAGhO,GAAG,CAACgK,SAAU;IACjE,IAAI8D,WAAW,GAAG,GAAG,EACjBA,WAAW,IAAI9N,GAAG,CAACgK,SAAS;IAChChK,GAAG,CAACiD,eAAe,GAAG6K,WAAW;IAEjCC,WAAW,GAAG,CAACC,iBAAiB,GAAGF,WAAW,IAAI9N,GAAG,CAACgK,SAAS;;IAE/D;AACR;AACA;AACA;IACQ,OAAO+D,WAAW,GAAG,CAAC,IAAIJ,IAAI,IAAI,CAAC,EAAE;MACjC,IAAIQ,KAAK,GAAGF,SAAS,GAAGhO,GAAG,CAACiD,OAAO;MACnC,IAAIkL,SAAS,GAAGpO,GAAG,CAACyH,QAAQ;MAE5B0G,KAAK,IAAInO,GAAG,CAACQ,aAAa;MAC1B2N,KAAK,IAAInO,GAAG,CAAC8I,cAAc;MAC3B,IAAIqF,KAAK,GAAG,IAAI,EACZA,KAAK,GAAG,IAAI;MAChB,IAAIA,KAAK,GAAG,CAAC,EACTA,KAAK,GAAG,CAAC;MAEbN,wBAAwB,GAAGJ,cAAc,GAAGG,QAAQ;;MAEpD;MACA,IAAIH,cAAc,IAAI,CAAC,EACnBI,wBAAwB,GAAG,CAAC;MAEhCF,IAAI,GAAG,IAAI,CAACU,kBAAkB,CAACrO,GAAG,EAAE0N,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAES,KAAK,EAC3DZ,SAAS,EAAEC,YAAY,EAAEK,wBAAwB,CAAC;MAEtDL,YAAY,IAAIG,IAAI;MACpBC,QAAQ,IAAID,IAAI;MAChBI,WAAW,IAAKK,SAAS,IAAIpO,GAAG,CAACyH,QAAQ,GAAI,CAAC,GAAG,CAAC;IACtD;IACA;AACR;AACA;AACA;IACQxH,GAAG,CAAC6C,oBAAoB,GAAG,CAAC;IAE5B,IAAI6K,IAAI,GAAG,CAAC,EAAE;MACV;MACA,OAAOA,IAAI;IACf;IAEAE,wBAAwB,GAAGJ,cAAc,GAAGG,QAAQ;IACpD;IACA,IAAIH,cAAc,IAAI,CAAC,EACnBI,wBAAwB,GAAG,CAAC;;IAEhC;IACAhQ,EAAE,CAACyQ,eAAe,CAACtO,GAAG,CAAC;IACvB2N,IAAI,GAAG9P,EAAE,CAAC0Q,WAAW,CAACtO,GAAG,EAAEsN,SAAS,EAAEC,YAAY,EAC9CK,wBAAwB,EAAE,CAAC,CAAC;IAChC,IAAIF,IAAI,GAAG,CAAC,EAAE;MACV;MACA,OAAOA,IAAI;IACf;IACAH,YAAY,IAAIG,IAAI;IACpBC,QAAQ,IAAID,IAAI;IAChBE,wBAAwB,GAAGJ,cAAc,GAAGG,QAAQ;IACpD;IACA,IAAIH,cAAc,IAAI,CAAC,EACnBI,wBAAwB,GAAG,CAAC;IAEhC,IAAI7N,GAAG,CAAC4D,sBAAsB,EAAE;MAC5B;MACAxF,GAAG,CAACoQ,eAAe,CAACxO,GAAG,CAAC;MAExB2N,IAAI,GAAG9P,EAAE,CAAC0Q,WAAW,CAACtO,GAAG,EAAEsN,SAAS,EAAEC,YAAY,EAC9CK,wBAAwB,EAAE,CAAC,CAAC;MAEhC,IAAIF,IAAI,GAAG,CAAC,EAAE;QACV,OAAOA,IAAI;MACf;MACAC,QAAQ,IAAID,IAAI;IACpB;IACA,OAAOC,QAAQ;EACnB,CAAC;EAED,IAAI,CAACS,kBAAkB,GAAG,UAAUrO,GAAG,EAAEyO,QAAQ,EAAEC,QAAQ,EAAExB,QAAQ,EAAEyB,MAAM,EAAEC,SAAS,EAAEC,WAAW,EAAE;IACnG,IAAI5O,GAAG,GAAGD,GAAG,CAACG,cAAc;IAC5B,IAAI2O,SAAS,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC;IAE5B,IAAI7O,GAAG,CAAC+H,QAAQ,IAAIlI,OAAO,EACvB,OAAO,CAAC,CAAC;IAEb,IAAIoN,QAAQ,IAAI,CAAC,EACb,OAAO,CAAC;IAEZD,oBAAoB,CAAChN,GAAG,EAAEiN,QAAQ,CAAC;IAEnC4B,SAAS,CAAC,CAAC,CAAC,GAAG7O,GAAG,CAACkN,WAAW;IAC9B2B,SAAS,CAAC,CAAC,CAAC,GAAG7O,GAAG,CAACoN,WAAW;;IAE9B;IACA,KAAK,IAAI7H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0H,QAAQ,EAAE1H,CAAC,EAAE,EAAE;MAC/BsJ,SAAS,CAAC,CAAC,CAAC,CAACtJ,CAAC,CAAC,GAAGiJ,QAAQ,CAACjJ,CAAC,CAAC;MAC7B,IAAIvF,GAAG,CAACiI,WAAW,GAAG,CAAC,EACnB4G,SAAS,CAAC,CAAC,CAAC,CAACtJ,CAAC,CAAC,GAAGkJ,QAAQ,CAAClJ,CAAC,CAAC;IACrC;IAEA,OAAOuJ,yBAAyB,CAAC/O,GAAG,EAAE8O,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,EAC5D5B,QAAQ,EAAEyB,MAAM,EAAEC,SAAS,EAAEC,WAAW,CAAC;EACjD,CAAC;EAED,SAASX,UAAUA,CAAClO,GAAG,EAAE;IACrB,IAAIiO,SAAS,GAAG5R,OAAO,CAAC2S,OAAO,GAAGhP,GAAG,CAACgK,SAAS,GAAG3N,OAAO,CAAC4S,SAAS;IACnE;AACR;AACA;IACQhB,SAAS,GAAG/J,IAAI,CAACU,GAAG,CAACqJ,SAAS,EAAE,GAAG,GAAGjO,GAAG,CAACgK,SAAS,GAAG,EAAE,CAAC;IACzDpO,MAAM,CAACG,iBAAiB,CAACmT,MAAM,IAAIjB,SAAS,CAAC;IAE7C,OAAOA,SAAS;EACpB;EAEA,SAASc,yBAAyBA,CAAC/O,GAAG,EAAEyO,QAAQ,EAAEC,QAAQ,EAAExB,QAAQ,EAAEyB,MAAM,EAAEC,SAAS,EAAEC,WAAW,EAAE;IAClG,IAAI5O,GAAG,GAAGD,GAAG,CAACG,cAAc;IAC5B,IAAIgP,OAAO,GAAG,CAAC;MAAErL,GAAG;MAAE0B,CAAC;MAAE4J,EAAE;MAAEnB,SAAS;IACtC,IAAIoB,MAAM;IACV,IAAIC,KAAK,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC;IACxB,IAAIR,SAAS,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC;IAE5B,IAAI7O,GAAG,CAAC+H,QAAQ,IAAIlI,OAAO,EACvB,OAAO,CAAC,CAAC;IAEb,IAAIoN,QAAQ,IAAI,CAAC,EACb,OAAO,CAAC;;IAEZ;IACAmC,MAAM,GAAGxR,EAAE,CAAC0Q,WAAW,CAACtO,GAAG,EAAE0O,MAAM,EAAEC,SAAS,EAAEC,WAAW,EAAE,CAAC,CAAC;IAC/D,IAAIQ,MAAM,GAAG,CAAC,EACV,OAAOA,MAAM;IACjB;IACAT,SAAS,IAAIS,MAAM;IACnBF,OAAO,IAAIE,MAAM;IAEjBP,SAAS,CAAC,CAAC,CAAC,GAAGL,QAAQ;IACvBK,SAAS,CAAC,CAAC,CAAC,GAAGJ,QAAQ;;IAEvB;;IAEA;IACA,IAAIvS,SAAS,CAACoT,GAAG,CAACvP,GAAG,CAACuC,KAAK,EAAE,CAAC,CAAC,IAAIpG,SAAS,CAACoT,GAAG,CAACvP,GAAG,CAACuC,KAAK,EAAE,GAAG,CAAC,EAAE;MAC9D,KAAKiD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0H,QAAQ,EAAE,EAAE1H,CAAC,EAAE;QAC3BsJ,SAAS,CAAC,CAAC,CAAC,CAACtJ,CAAC,CAAC,IAAIxF,GAAG,CAACuC,KAAK;QAC5B,IAAItC,GAAG,CAACmI,YAAY,IAAI,CAAC,EACrB0G,SAAS,CAAC,CAAC,CAAC,CAACtJ,CAAC,CAAC,IAAIxF,GAAG,CAACuC,KAAK;MACpC;IACJ;;IAEA;IACA,IAAIpG,SAAS,CAACoT,GAAG,CAACvP,GAAG,CAACwP,UAAU,EAAE,CAAC,CAAC,IAC7BrT,SAAS,CAACoT,GAAG,CAACvP,GAAG,CAACwP,UAAU,EAAE,GAAG,CAAC,EAAE;MACvC,KAAKhK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0H,QAAQ,EAAE,EAAE1H,CAAC,EAAE;QAC3BsJ,SAAS,CAAC,CAAC,CAAC,CAACtJ,CAAC,CAAC,IAAIxF,GAAG,CAACwP,UAAU;MACrC;IACJ;;IAEA;IACA,IAAIrT,SAAS,CAACoT,GAAG,CAACvP,GAAG,CAACyP,WAAW,EAAE,CAAC,CAAC,IAC9BtT,SAAS,CAACoT,GAAG,CAACvP,GAAG,CAACyP,WAAW,EAAE,GAAG,CAAC,EAAE;MACxC,KAAKjK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0H,QAAQ,EAAE,EAAE1H,CAAC,EAAE;QAC3BsJ,SAAS,CAAC,CAAC,CAAC,CAACtJ,CAAC,CAAC,IAAIxF,GAAG,CAACyP,WAAW;MACtC;IACJ;;IAEA;IACA,IAAIzP,GAAG,CAACS,YAAY,IAAI,CAAC,IAAIR,GAAG,CAACmI,YAAY,IAAI,CAAC,EAAE;MAChD,KAAK5C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0H,QAAQ,EAAE,EAAE1H,CAAC,EAAE;QAC3BsJ,SAAS,CAAC,CAAC,CAAC,CAACtJ,CAAC,CAAC,GAAG,GAAG,IAAKsJ,SAAS,CAAC,CAAC,CAAC,CAACtJ,CAAC,CAAC,GAAGsJ,SAAS,CAAC,CAAC,CAAC,CAACtJ,CAAC,CAAC,CAAC;QAC5DsJ,SAAS,CAAC,CAAC,CAAC,CAACtJ,CAAC,CAAC,GAAG,GAAG;MACzB;IACJ;IAEAyI,SAAS,GAAGC,UAAU,CAAClO,GAAG,CAAC;IAE3BsP,KAAK,CAAC,CAAC,CAAC,GAAGrP,GAAG,CAACqP,KAAK,CAAC,CAAC,CAAC;IACvBA,KAAK,CAAC,CAAC,CAAC,GAAGrP,GAAG,CAACqP,KAAK,CAAC,CAAC,CAAC;IAEvB,IAAII,YAAY,GAAG,CAAC;IACpB,OAAOxC,QAAQ,GAAG,CAAC,EAAE;MACjB,IAAIyC,aAAa,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC;MAChC,IAAIC,IAAI,GAAG,CAAC;MACZ;MACA,IAAIC,KAAK,GAAG,CAAC;MACb;MACA;;MAEAF,aAAa,CAAC,CAAC,CAAC,GAAGb,SAAS,CAAC,CAAC,CAAC;MAC/Ba,aAAa,CAAC,CAAC,CAAC,GAAGb,SAAS,CAAC,CAAC,CAAC;MAC/B;MACA,IAAIgB,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC;MACvBC,WAAW,CAAChQ,GAAG,EAAEsP,KAAK,EAAEK,aAAa,EAAED,YAAY,EAAExC,QAAQ,EACzD4C,KAAK,CAAC;MACVF,IAAI,GAAGE,KAAK,CAACF,IAAI;MACjBC,KAAK,GAAGC,KAAK,CAACD,KAAK;;MAEnB;MACA,IAAI5P,GAAG,CAACmD,cAAc,IAAI,CAACnD,GAAG,CAACoD,iBAAiB,EAC5C,IAAIzF,EAAE,CAACqS,cAAc,CAAChQ,GAAG,CAACgI,MAAM,EAAEqH,KAAK,CAAC,CAAC,CAAC,EAAErP,GAAG,CAACiD,OAAO,EAC/CoM,KAAK,CAAC,CAAC,CAAC,EAAErP,GAAG,CAACiD,OAAO,EAAE2M,KAAK,EAAE5P,GAAG,CAACmI,YAAY,CAAC,IAAIqB,YAAY,CAACyG,mBAAmB,EACvF,OAAO,CAAC,CAAC;;MAEjB;MACAhD,QAAQ,IAAI0C,IAAI;MAChBF,YAAY,IAAIE,IAAI;MACpB,IAAI3P,GAAG,CAACmI,YAAY,IAAI,CAAC,EACrB,CAAC;;MAEL;MACAnI,GAAG,CAACiD,OAAO,IAAI2M,KAAK;MACpBjU,MAAM,CAACqE,GAAG,CAACiD,OAAO,IAAInH,iBAAiB,CAACmT,MAAM,CAAC;;MAE/C;AACZ;AACA;AACA;MACY,IAAIjP,GAAG,CAAC6C,oBAAoB,GAAG,CAAC,EAAE;QAC9B7C,GAAG,CAAC6C,oBAAoB,GAAGzG,OAAO,CAAC0G,QAAQ,GAAG1G,OAAO,CAAC2G,SAAS;MACnE;MACA/C,GAAG,CAAC6C,oBAAoB,IAAI+M,KAAK;MAEjC,IAAI5P,GAAG,CAACiD,OAAO,IAAI+K,SAAS,EAAE;QAC1B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA,IAAIkC,QAAQ,GAAGtB,WAAW,GAAGM,OAAO;QACpC,IAAIN,WAAW,IAAI,CAAC,EAChBsB,QAAQ,GAAG,CAAC;QAEhBrM,GAAG,GAAGsM,iBAAiB,CAACpQ,GAAG,EAAEsP,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,EAAEX,MAAM,EACnDC,SAAS,EAAEuB,QAAQ,CAAC;QAExB,IAAIrM,GAAG,GAAG,CAAC,EACP,OAAOA,GAAG;QACd8K,SAAS,IAAI9K,GAAG;QAChBqL,OAAO,IAAIrL,GAAG;;QAEd;QACA7D,GAAG,CAACiD,OAAO,IAAIlD,GAAG,CAACgK,SAAS;QAC5B/J,GAAG,CAAC6C,oBAAoB,IAAI9C,GAAG,CAACgK,SAAS;QACzC,KAAKoF,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGnP,GAAG,CAACmI,YAAY,EAAEgH,EAAE,EAAE,EACpC,KAAK5J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvF,GAAG,CAACiD,OAAO,EAAEsC,CAAC,EAAE,EAC5B8J,KAAK,CAACF,EAAE,CAAC,CAAC5J,CAAC,CAAC,GAAG8J,KAAK,CAACF,EAAE,CAAC,CAAC5J,CAAC,GAAGxF,GAAG,CAACgK,SAAS,CAAC;MACvD;IACJ;IACApO,MAAM,CAACsR,QAAQ,IAAI,CAAC,CAAC;IAErB,OAAOiC,OAAO;EAClB;EAEA,SAASiB,iBAAiBA,CAACpQ,GAAG,EAAEqQ,OAAO,EAAEC,OAAO,EAAE3B,MAAM,EAAEC,SAAS,EAAEC,WAAW,EAAE;IAC9E,IAAI/K,GAAG,GAAGvH,IAAI,CAAC+B,GAAG,CAACiS,qBAAqB,CAACvQ,GAAG,EAAEqQ,OAAO,EAAEC,OAAO,EAAE3B,MAAM,EAClEC,SAAS,EAAEC,WAAW,CAAC;IAC3B7O,GAAG,CAACyH,QAAQ,EAAE;IACd,OAAO3D,GAAG;EACd;EAEA,SAASiM,KAAKA,CAAA,EAAG;IACb,IAAI,CAACH,IAAI,GAAG,CAAC;IACb,IAAI,CAACC,KAAK,GAAG,CAAC;EAClB;EAGA,SAASW,OAAOA,CAAA,EAAG;IACf,IAAI,CAACC,QAAQ,GAAG,CAAC;EACrB;;EAEA;AACJ;AACA;AACA;AACA;EACI,SAASC,GAAGA,CAAClL,CAAC,EAAEgF,CAAC,EAAE;IACf,OAAOA,CAAC,IAAI,CAAC,GAAGkG,GAAG,CAAClG,CAAC,EAAEhF,CAAC,GAAGgF,CAAC,CAAC,GAAGhF,CAAC;EACrC;;EAEA;AACJ;AACA;EACI,SAASmL,QAAQA,CAAC1M,CAAC,EAAE2M,GAAG,EAAElG,CAAC,EAAE;IACzB;AACR;AACA;AACA;IACQ,IAAImG,GAAG,GAAI3M,IAAI,CAACE,EAAE,GAAGwM,GAAI;IAEzB3M,CAAC,IAAIyG,CAAC;IACN,IAAIzG,CAAC,GAAG,CAAC,EACLA,CAAC,GAAG,CAAC;IACT,IAAIA,CAAC,GAAG,CAAC,EACLA,CAAC,GAAG,CAAC;IACT,IAAI6M,EAAE,GAAG7M,CAAC,GAAG,EAAE;IAEf,IAAI8M,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG7M,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,CAAC,GAAGC,IAAI,CAACE,EAAE,CAAC,GAAG,IAAI,GAAGF,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,CAAC,GAAGC,IAAI,CAACE,EAAE,CAAC;IACpF,IAAIF,IAAI,CAACuB,GAAG,CAACqL,EAAE,CAAC,GAAG,IAAI,EACnB,OAAQD,GAAG,GAAG3M,IAAI,CAACE,EAAE,CAAE,KAEvB,OAAQ2M,IAAI,GAAG7M,IAAI,CAAC8M,GAAG,CAACtG,CAAC,GAAGmG,GAAG,GAAGC,EAAE,CAAC,IAAI5M,IAAI,CAACE,EAAE,GAAGsG,CAAC,GAAGoG,EAAE,CAAC;EAClE;EAEA,SAASG,oBAAoBA,CAACjR,GAAG,EAAEkR,MAAM,EAAEC,SAAS,EAAEC,WAAW,EAAEC,KAAK,EAAE3B,YAAY,EAAE4B,GAAG,EAAEb,QAAQ,EAAErB,EAAE,EAAE;IACvG,IAAInP,GAAG,GAAGD,GAAG,CAACG,cAAc;IAC5B,IAAIqF,CAAC;MAAEgF,CAAC,GAAG,CAAC;MAAEa,CAAC;IACf;IACA,IAAIkG,GAAG,GAAGvR,GAAG,CAAC8I,cAAc,GACtB4H,GAAG,CAAC1Q,GAAG,CAAC8I,cAAc,EAAE9I,GAAG,CAACQ,aAAa,CAAC;IAChD,IAAI+Q,GAAG,GAAGxV,iBAAiB,CAACyV,GAAG,EAC3BD,GAAG,GAAGxV,iBAAiB,CAACyV,GAAG;IAE/B,IAAIC,QAAQ,GAAIvN,IAAI,CAACuB,GAAG,CAACxF,GAAG,CAAC+B,cAAc,GACrCkC,IAAI,CAACwN,KAAK,CAAC,EAAE,GAAGzR,GAAG,CAAC+B,cAAc,CAAC,CAAC,GAAG,KAAK,GAAI,CAAC,GAAG,CAAC;IAC3D,IAAI4O,GAAG,GAAG,IAAI,GAAG3Q,GAAG,CAAC+B,cAAc;IACnC,IAAI4O,GAAG,GAAG,IAAI,EACVA,GAAG,GAAG,IAAI;IACd,IAAIe,QAAQ,GAAG,EAAE;IACjB,IAAI,CAAC,IAAIA,QAAQ,GAAG,CAAC,EACjB,EAAEA,QAAQ;IACd;IACAA,QAAQ,IAAIF,QAAQ;IACpB;;IAEA,IAAIG,SAAS,GAAGD,QAAQ,GAAG,CAAC;IAC5B;;IAEA,IAAI1R,GAAG,CAAC4R,yBAAyB,IAAI,CAAC,EAAE;MACpC5R,GAAG,CAAC6R,SAAS,CAAC,CAAC,CAAC,GAAGvW,SAAS,CAACqW,SAAS,CAAC;MACvC3R,GAAG,CAAC6R,SAAS,CAAC,CAAC,CAAC,GAAGvW,SAAS,CAACqW,SAAS,CAAC;MACvC,KAAKpM,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,GAAG+L,GAAG,EAAE,EAAE/L,CAAC,EACzBvF,GAAG,CAAC8R,SAAS,CAACvM,CAAC,CAAC,GAAGjK,SAAS,CAACqW,SAAS,CAAC;MAE3C3R,GAAG,CAAC+R,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;MAChB/R,GAAG,CAAC+R,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;;MAEhB;MACA,KAAKxH,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,GAAG+G,GAAG,EAAE/G,CAAC,EAAE,EAAE;QAC3B,IAAIyH,GAAG,GAAG,EAAE;QACZ,IAAIC,MAAM,GAAG,CAAC1H,CAAC,GAAG+G,GAAG,KAAK,EAAE,GAAGA,GAAG,CAAC;QACnC,KAAK/L,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAImM,QAAQ,EAAEnM,CAAC,EAAE,EAC1ByM,GAAG,IAAIhS,GAAG,CAAC8R,SAAS,CAACvH,CAAC,CAAC,CAAChF,CAAC,CAAC,GAAGmL,QAAQ,CAACnL,CAAC,GAAG0M,MAAM,EAAEtB,GAAG,EACjDe,QAAQ,CAAC;QACjB,KAAKnM,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAImM,QAAQ,EAAEnM,CAAC,EAAE,EAC1BvF,GAAG,CAAC8R,SAAS,CAACvH,CAAC,CAAC,CAAChF,CAAC,CAAC,IAAIyM,GAAG;MAClC;MACAhS,GAAG,CAAC4R,yBAAyB,GAAG,CAAC;IACrC;IAEA,IAAIC,SAAS,GAAG7R,GAAG,CAAC6R,SAAS,CAAC1C,EAAE,CAAC;;IAEjC;IACA;IACA,KAAK/D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+F,WAAW,EAAE/F,CAAC,EAAE,EAAE;MAC9B,IAAI8G,KAAK;MACT,IAAIC,IAAI;MAERD,KAAK,GAAG9G,CAAC,GAAGpL,GAAG,CAAC+B,cAAc;MAC9B;MACAwI,CAAC,GAAG,CAAC,GAAGtG,IAAI,CAACwN,KAAK,CAACS,KAAK,GAAGlS,GAAG,CAAC+R,KAAK,CAAC5C,EAAE,CAAC,CAAC;;MAEzC;MACA,IAAKuC,QAAQ,GAAGnH,CAAC,GAAGmH,QAAQ,GAAG,CAAC,IAAKL,GAAG,EACpC;;MAEJ;MACA;MACA,IAAIY,MAAM,GAAIC,KAAK,GAAGlS,GAAG,CAAC+R,KAAK,CAAC5C,EAAE,CAAC,IAAI5E,CAAC,GAAG,EAAE,IAAImH,QAAQ,GAAG,CAAC,CAAC,CAAE;MAChE/V,MAAM,CAACsI,IAAI,CAACuB,GAAG,CAACyM,MAAM,CAAC,IAAI,IAAI,CAAC;;MAEhC;MACAE,IAAI,GAAG,CAAC,GAAGlO,IAAI,CAACwN,KAAK,CAAEQ,MAAM,GAAG,CAAC,GAAGX,GAAG,GAAIA,GAAG,GAAG,EAAE,CAAC;MACpD,IAAIc,MAAM,GAAG,EAAE;MACf,KAAK7M,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAImM,QAAQ,EAAE,EAAEnM,CAAC,EAAE;QAC1C;QACc,IAAI8M,EAAE,GAAG,CAAC,GAAI9M,CAAC,GAAGgF,CAAC,GAAGmH,QAAQ,GAAG,CAAE;QACnC,IAAIY,CAAC;QACL3W,MAAM,CAAC0W,EAAE,GAAGhB,GAAG,CAAC;QAChB1V,MAAM,CAAC0W,EAAE,GAAGV,SAAS,IAAI,CAAC,CAAC;QAC3BW,CAAC,GAAID,EAAE,GAAG,CAAC,GAAIR,SAAS,CAACF,SAAS,GAAGU,EAAE,CAAC,GAAGjB,KAAK,CAAC3B,YAAY,GAC3D4C,EAAE,CAAC;QACLD,MAAM,IAAIE,CAAC,GAAGtS,GAAG,CAAC8R,SAAS,CAACK,IAAI,CAAC,CAAC5M,CAAC,CAAC;MACxC;MACA0L,MAAM,CAACC,SAAS,GAAG9F,CAAC,CAAC,GAAGgH,MAAM;IAClC;;IAEA;IACA;;IAEA;IACA5B,QAAQ,CAACA,QAAQ,GAAGvM,IAAI,CAACqC,GAAG,CAAC+K,GAAG,EAAEK,QAAQ,GAAGnH,CAAC,GAAGmH,QAAQ,GAAG,CAAC,CAAC;;IAE9D;AACR;AACA;AACA;AACA;IACQ1R,GAAG,CAAC+R,KAAK,CAAC5C,EAAE,CAAC,IAAIqB,QAAQ,CAACA,QAAQ,GAAGpF,CAAC,GAAGpL,GAAG,CAAC+B,cAAc;;IAE3D;IACA,IAAIyO,QAAQ,CAACA,QAAQ,IAAImB,SAAS,EAAE;MAChC,KAAKpM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoM,SAAS,EAAEpM,CAAC,EAAE,EAC1BsM,SAAS,CAACtM,CAAC,CAAC,GAAG6L,KAAK,CAAC3B,YAAY,GAAGe,QAAQ,CAACA,QAAQ,GAAGjL,CAAC,GACvDoM,SAAS,CAAC;IACpB,CAAC,MAAM;MACH;MACA,IAAIY,OAAO,GAAGZ,SAAS,GAAGnB,QAAQ,CAACA,QAAQ;MAC3C;AACZ;AACA;AACA;;MAEY;AACZ;AACA;AACA;MACY,KAAKjL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgN,OAAO,EAAE,EAAEhN,CAAC,EACxBsM,SAAS,CAACtM,CAAC,CAAC,GAAGsM,SAAS,CAACtM,CAAC,GAAGiL,QAAQ,CAACA,QAAQ,CAAC;;MAEnD;MACA,KAAKjG,CAAC,GAAG,CAAC,EAAEhF,CAAC,GAAGoM,SAAS,EAAE,EAAEpM,CAAC,EAAE,EAAEgF,CAAC,EAC/BsH,SAAS,CAACtM,CAAC,CAAC,GAAG6L,KAAK,CAAC3B,YAAY,GAAGlF,CAAC,CAAC;MAE1C5O,MAAM,CAAC4O,CAAC,IAAIiG,QAAQ,CAACA,QAAQ,CAAC;IAClC;IACA,OAAOpF,CAAC;IACR;EACJ;EAEA,SAAS2E,WAAWA,CAAChQ,GAAG,EAAEsP,KAAK,EAAER,SAAS,EAAEY,YAAY,EAAExC,QAAQ,EAAEuF,EAAE,EAAE;IACpE,IAAIxS,GAAG,GAAGD,GAAG,CAACG,cAAc;;IAE5B;IACA,IAAKF,GAAG,CAAC+B,cAAc,GAAG,KAAK,IAAM/B,GAAG,CAAC+B,cAAc,GAAG,MAAO,EAAE;MAC/D,KAAK,IAAIoN,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGnP,GAAG,CAACmI,YAAY,EAAEgH,EAAE,EAAE,EAAE;QAC1C,IAAIsD,OAAO,GAAG,IAAIlC,OAAO,CAAC,CAAC;QAC3BiC,EAAE,CAAC5C,KAAK,GAAGoB,oBAAoB,CAACjR,GAAG,EAAEsP,KAAK,CAACF,EAAE,CAAC,EAAEnP,GAAG,CAACiD,OAAO,EACvDlD,GAAG,CAACgK,SAAS,EAAE8E,SAAS,CAACM,EAAE,CAAC,EAAEM,YAAY,EAAExC,QAAQ,EACpDwF,OAAO,EAAEtD,EAAE,CAAC;QAChBqD,EAAE,CAAC7C,IAAI,GAAG8C,OAAO,CAACjC,QAAQ;MAC9B;IACJ,CAAC,MAAM;MACHgC,EAAE,CAAC5C,KAAK,GAAG3L,IAAI,CAACqC,GAAG,CAACvG,GAAG,CAACgK,SAAS,EAAEkD,QAAQ,CAAC;MAC5CuF,EAAE,CAAC7C,IAAI,GAAG6C,EAAE,CAAC5C,KAAK;MAClB,KAAK,IAAIrK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiN,EAAE,CAAC5C,KAAK,EAAE,EAAErK,CAAC,EAAE;QAC/B8J,KAAK,CAAC,CAAC,CAAC,CAACrP,GAAG,CAACiD,OAAO,GAAGsC,CAAC,CAAC,GAAGsJ,SAAS,CAAC,CAAC,CAAC,CAACY,YAAY,GAAGlK,CAAC,CAAC;QAC1D,IAAIvF,GAAG,CAACmI,YAAY,IAAI,CAAC,EACrBkH,KAAK,CAAC,CAAC,CAAC,CAACrP,GAAG,CAACiD,OAAO,GAAGsC,CAAC,CAAC,GAAGsJ,SAAS,CAAC,CAAC,CAAC,CAACY,YAAY,GAAGlK,CAAC,CAAC;MAClE;IACJ;EACJ;AAEJ;AAEAmN,MAAM,CAACC,OAAO,GAAGtW,IAAI","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
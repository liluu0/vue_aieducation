{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { reqGptAsk, reqAudioGet } from '@/api';\nimport * as lamejs from 'lamejs';\nexport default {\n  data() {\n    return {\n      chatData: [],\n      messageData: '',\n      mediaRecorder: null,\n      chunks: [],\n      isAudio: false\n    };\n  },\n  methods: {\n    getCurrentTime() {\n      return new Date().toLocaleString();\n    },\n    async voiceBtn() {\n      this.isAudio = !this.isAudio;\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        this.mediaRecorder = new MediaRecorder(stream);\n        this.mediaRecorder.ondataavailable = event => {\n          this.chunks.push(event.data);\n        };\n        if (this.isAudio) {\n          this.mediaRecorder.start();\n        } else {\n          // mediaRecorder.stop();\n          const blob = new Blob(this.chunks, {\n            type: 'audio/wav'\n          });\n          this.convertToMP3(blob);\n          this.mediaRecorder = null;\n          this.chunks = [];\n        }\n      } catch (error) {\n        console.error('无法访问麦克风:', error);\n      }\n    },\n    convertToMP3(blob) {\n      //   const lame = new lamejs();\n      const mp3Encoder = new lamejs.Mp3Encoder(1, 44100, 128);\n      const fileReader = new FileReader();\n      fileReader.onload = () => {\n        const pcmData = new Int16Array(fileReader.result);\n        const mp3Data = mp3Encoder.encodeBuffer(pcmData);\n        const mp3Buffer = mp3Encoder.flush();\n        const mp3Blob = new Blob([new Uint8Array(mp3Buffer)], {\n          type: 'audio/mp3'\n        });\n        this.voicesend(mp3Blob);\n      };\n      fileReader.readAsArrayBuffer(blob);\n    },\n    async voicesend(blob) {\n      console.log('收到了', blob);\n      // 将blob对象传递给后端，这里你可以使用fetch或者其他HTTP请求库\n      const formData = new FormData();\n      formData.append('audio', blob, 'recording.mp3');\n      console.log(formData);\n      try {\n        const res = await reqAudioGet(formData);\n        console.log(res.data);\n      } catch (error) {\n        console.log('reqAudioGet', error);\n      }\n    }\n  },\n  async sendBtn() {\n    if (this.messageData == '') {\n      return;\n    }\n    const time = this.getCurrentTime();\n    const message = this.messageData;\n    this.chatData.push({\n      chatTime: time,\n      chatUser: this.messageData,\n      chatGpt: '正在加载中，请稍后……'\n    });\n    const lastItem = this.chatData[this.chatData.length - 1];\n    this.messageData = '';\n    console.log(message);\n    try {\n      const res = await reqGptAsk({\n        question: message\n      });\n      console.log(res.data);\n      lastItem.chatGpt = res.data.data;\n\n      // const chatbox = this.$refs.chatbox;\n      // chatbox.scrollTop = chatbox.scrollHeight;\n    } catch (error) {\n      console.log('reqGptAsk', error);\n    }\n  }\n};","map":{"version":3,"names":["reqGptAsk","reqAudioGet","lamejs","data","chatData","messageData","mediaRecorder","chunks","isAudio","methods","getCurrentTime","Date","toLocaleString","voiceBtn","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder","ondataavailable","event","push","start","blob","Blob","type","convertToMP3","error","console","mp3Encoder","Mp3Encoder","fileReader","FileReader","onload","pcmData","Int16Array","result","mp3Data","encodeBuffer","mp3Buffer","flush","mp3Blob","Uint8Array","voicesend","readAsArrayBuffer","log","formData","FormData","append","res","sendBtn","time","message","chatTime","chatUser","chatGpt","lastItem","length","question"],"sources":["D:\\代码\\vscodeProjects\\AiEducation\\vue_aieducation\\src\\components\\ChatBot\\index.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"chat-com-content-wrap\">\r\n              <div class=\"content-header\">\r\n                学生智能助手\r\n              </div>\r\n              <!-- 中间内容 -->\r\n              <div class=\"chat-content\">\r\n                <div class=\"chandler-content_main-board\">\r\n                  <div class=\"chandler-ext-content_communication-wrap\">\r\n                     <div v-if=\"this.chatData.length == 0\" class=\"chatbox\">\r\n\r\n                        <div class=\"boctx-wrap-introduce\">\r\n                            <div class=\"introduceleft\">\r\n                                <h2 class=\"max-w-500px\">我是你的心理陪聊助手</h2><br>\r\n                                <div class=\"desc max-w-500px\">\r\n                                    我拥有很多神奇的能力哦~<br>\r\n                                </div>\r\n                                <div class=\"ctrl\">\r\n                                    <ul >\r\n                                        <li>我可以陪你聊天，倾听你的心声</li>\r\n                                        <li>我可以为你解答疑惑，帮助你学习</li>\r\n                                        <li>我可以帮你排解压力、减轻焦虑</li>\r\n                                        <li>快来和我聊天吧~</li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"introduceright\">\r\n                                <img class=\"robotImg\" \r\n                                src=\"@/assets/img/robot04.gif\">\r\n                            </div>\r\n                        </div>\r\n                       <!-- <img src=\"@/assets/img/robot04.gif\" class=\"robotImg\"> -->\r\n\r\n                     </div>\r\n                    <div v-else class=\"chatbox\" ref=\"chatbox\">\r\n                        <li v-for=\"(item,index) in this.chatData\" :key=\"index\">\r\n                            <div class=\"user-message clearfix\">\r\n                                <div class=\"message-time\" id=\"time1\"> {{item.chatTime}} </div>\r\n                                <div class=\"chat-message user \" >{{item.chatUser}}</div>\r\n                            </div>\r\n                            <div class=\"bot-message\">\r\n                                <div class=\"chat-message chatbot\">{{item.chatGpt}}</div>\r\n                            </div>\r\n                        </li> \r\n                    </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n                <!-- 底部输入框 -->\r\n                  <div class=\"chandler-content_input-box\" >\r\n                    <div class=\"chandler-content_input-box-content\">\r\n                      <div class=\"top\">\r\n                        <textarea v-model=\"this.messageData\" \r\n                                  class=\"chandler-content_input-area\" \r\n                                  placeholder=\"可以问我任何问题哦~\"></textarea>\r\n                      </div>\r\n                      <div class=\"bottom\">\r\n                        <div class=\"left\">\r\n                           <img class=\"paperclip\" src=\"@/assets/img/voiceImg.jpg\" @click=\"voiceBtn\">\r\n                           <div class=\"audio\" v-if=\"this.isAudio\">\r\n                            <i class=\"el-icon-loading\"></i>\r\n                            正在录音中，点击暂停……\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"right\">\r\n                                <img class=\"send\" src=\"@/assets/img/send.jpg\" @click=\"sendBtn\">\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n              </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {reqGptAsk,reqAudioGet} from '@/api'\r\nimport * as lamejs from 'lamejs';\r\n\r\nexport default {\r\n    data () {\r\n        return {\r\n            chatData:[],\r\n            messageData:'',\r\n            mediaRecorder: null,\r\n            chunks: [],\r\n            isAudio: false\r\n        }\r\n    },\r\n    methods:{\r\n    getCurrentTime() {\r\n      return new Date().toLocaleString();\r\n    },\r\n    async voiceBtn(){\r\n        this.isAudio = !this.isAudio\r\n        try {\r\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n            this.mediaRecorder = new MediaRecorder(stream);\r\n    \r\n            this.mediaRecorder.ondataavailable = event => {\r\n              this.chunks.push(event.data);\r\n            };\r\n            if(this.isAudio){\r\n                this.mediaRecorder.start();\r\n            }else{\r\n                // mediaRecorder.stop();\r\n              const blob = new Blob(this.chunks, { type: 'audio/wav' });\r\n              this.convertToMP3(blob);\r\n              this.mediaRecorder = null;\r\n              this.chunks = [];\r\n            }\r\n      } catch (error) {\r\n        console.error('无法访问麦克风:', error);\r\n      }\r\n    },\r\n\r\n    convertToMP3(blob) {\r\n    //   const lame = new lamejs();\r\n      const mp3Encoder = new lamejs.Mp3Encoder(1, 44100, 128);\r\n      const fileReader = new FileReader();\r\n      \r\n      fileReader.onload = () => {\r\n        const pcmData = new Int16Array(fileReader.result);\r\n        const mp3Data = mp3Encoder.encodeBuffer(pcmData);\r\n        const mp3Buffer = mp3Encoder.flush();\r\n        const mp3Blob = new Blob([new Uint8Array(mp3Buffer)], { type: 'audio/mp3' });\r\n        this.voicesend(mp3Blob);\r\n      };\r\n      fileReader.readAsArrayBuffer(blob);\r\n    },\r\n\r\n    async voicesend(blob){\r\n        console.log('收到了',blob);\r\n        // 将blob对象传递给后端，这里你可以使用fetch或者其他HTTP请求库\r\n        const formData = new FormData();\r\n        formData.append('audio', blob, 'recording.mp3');\r\n        console.log(formData);\r\n        try {\r\n            const res = await reqAudioGet(formData)\r\n            console.log(res.data);\r\n            \r\n        } catch (error) {\r\n            console.log('reqAudioGet',error);\r\n        }\r\n\r\n    }\r\n\r\n    },\r\n    async sendBtn(){\r\n        if(this.messageData == '') {\r\n            return\r\n        }\r\n        const time = this.getCurrentTime()\r\n        const message = this.messageData\r\n        this.chatData.push({\r\n            chatTime: time,\r\n            chatUser: this.messageData,\r\n            chatGpt: '正在加载中，请稍后……'\r\n        });\r\n        const lastItem = this.chatData[this.chatData.length - 1];\r\n        this.messageData = ''\r\n        console.log(message);\r\n        try {\r\n            const res = await reqGptAsk({question:message})\r\n            console.log(res.data);\r\n            lastItem.chatGpt = res.data.data;\r\n\r\n        // const chatbox = this.$refs.chatbox;\r\n        // chatbox.scrollTop = chatbox.scrollHeight;\r\n      } catch (error) {\r\n        console.log('reqGptAsk',error);\r\n      }\r\n    }\r\n  \r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n.introduceleft {\r\n    margin-left: 20px;\r\n}\r\n.desc {\r\n    font-size: 18px;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    line-height: 1.2;\r\n}\r\n.left h2 {\r\n    margin-bottom: 4px;\r\n    color: #120f18;\r\n    font-family: IBM Plex Sans;\r\n    font-size: 20px;\r\n    font-style: normal;\r\n    font-weight: 700;\r\n    line-height: 1.2;\r\n}\r\n.left .audio {\r\n    padding: 5px 8px;\r\n    background: #d7d7e4;\r\n    border-radius: 5px;\r\n}\r\n.max-w-500px {\r\n    max-width: 500px;\r\n}\r\n.ctrl{\r\n    color: #413659;\r\n    font-size: 14px;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    line-height: 20px;\r\n}\r\n.robotImg {\r\n    max-width: 100%;\r\n    height: auto;\r\n    display: block;\r\n    /* vertical-align: middle; */\r\n}\r\n.boctx-wrap-introduce{\r\n    width: 100%;\r\n    padding: 20px 24px;\r\n    border-radius: 32px;\r\n    margin-top: 20px;\r\n    background: #fff;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n.boctx-wrap-introduce .left {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: flex-start;\r\n}\r\n\r\n.robotImg {\r\n    height: 200px;\r\n}\r\n/* 聊天内容区域 */\r\n\r\nul, ol, li {\r\n      list-style-type: none;\r\n  }\r\n.message-time {\r\n    font-size: 12px;\r\n    color: gray;\r\n    margin: 4px 0;\r\n    text-align: center;\r\n}\r\n\r\n.chatbox {\r\n    border-radius: 3px;\r\n    height: 100%;\r\n    margin: 0 0 20px;\r\n    padding: 10px;\r\n    min-height: 300px;\r\n}\r\n.chat-message {\r\n    font-size: 16px;\r\n    display: inline-block;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    margin-bottom: 22px;\r\n}\r\n\r\n.user {\r\n    background-color: #fff;\r\n    color: #333;\r\n    float: right;\r\n}\r\n\r\n.clearfix::after {\r\n    content: \"\";\r\n    display: table;\r\n    clear: both;\r\n}\r\n\r\n.chatbot {\r\n    /* background-color: #4a40b1de; */\r\n    background-color: #6255e7de;\r\n    color: #fff;\r\n}\r\n\r\n/* 总体框架 */\r\n .right .send {\r\n    margin-left: 8px;\r\n    width: 36px;\r\n    height: 36px;\r\n    border-radius: 50%;\r\n    background: #ffc800;\r\n    transition: all .3s linear;\r\n    cursor: pointer;\r\n    background-size: 24px 24px;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n}\r\n.left .paperclip {\r\n    margin-right: 15px;\r\n    /* width: 22px; */\r\n    height: 25px;\r\n    display: block;\r\n    cursor: pointer;\r\n    margin-left: 10px;\r\n}\r\n\r\n.left {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n}\r\n\r\n.bottom {\r\n    padding: 8px 12px;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n.right {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n}\r\n.chandler-content_input-area {\r\n    resize: none;\r\n    width: 100%;\r\n    padding: 12px 10px;\r\n    height: 11vh;\r\n    max-height: 100px;\r\n    min-height: 60px;\r\n    border: unset;\r\n    color: #413659;\r\n    font-size: 16px;\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    line-height: 22px;\r\n    outline: none;\r\n    box-sizing: border-box;\r\n    background: transparent;\r\n}\r\n.top {\r\n    flex: 1;\r\n    width: 100%;\r\n    padding: 0 14px;\r\n}\r\n.chat-com-content-wrap .chandler-content_main-board {\r\n    width: 100%;\r\n    overflow-y: auto;\r\n    flex: 1 1 0%;\r\n    overscroll-behavior: contain;\r\n}\r\n.chat-com-content-wrap .chat-content {\r\n    width: 100%;\r\n    height: calc(100% - 56px);\r\n    flex-grow: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    user-select: text;\r\n}\r\n.chat-com-content-wrap {\r\n    width: 100%;\r\n    height: calc(100% - 46px);\r\n    flex: 1 1 0%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    max-width: 900px;\r\n    margin: 16px auto 0px;\r\n    border-radius: 36px;\r\n    /* background: rgba(255, 255, 255, 0.62); */\r\n    background: #ebeef5;\r\n    overflow: hidden;\r\n}\r\n\r\n.content-header {\r\n    width: 100%;\r\n    /* height: 56px; */\r\n    padding: 24px 0 12px 24px;\r\n    backdrop-filter: blur(22px);\r\n    border-radius: 36px 36px 0 0;\r\n    font-size: 18px;\r\n    font-style: normal;\r\n    font-weight: 600;\r\n    background: linear-gradient(10deg,rgba(255,255,255,.72) 75.63%,rgba(74, 71, 243, 0.72) 100%);\r\n    color: var(--text-color);\r\n    z-index: 10;\r\n\r\n}\r\n\r\n.chandler-content_input-box {\r\n    position: relative;\r\n    width: 100%;\r\n    z-index: 1;\r\n    padding: 0 12px 12px;\r\n}\r\n.chandler-content_input-box-content {\r\n    width: 100%;\r\n    background: rgba(255,255,255,.72);\r\n    border-radius: 22px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: relative;\r\n    box-shadow: 0 3px rgba(112, 110, 245, 0.82) ;\r\n    overflow: hidden;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n/* 文本框 */\r\n.chandler-content_input-area:focus {\r\n  border: 1px solid blue;\r\n  transition:  0.3s ease; /* 添加过渡效果 */\r\n  border-radius: 22px;\r\n}\r\n\r\n/* 中间聊天区 */\r\n.chandler-ext-content_communication-wrap {\r\n    width: 100%;\r\n    padding: 0 20px 30px;\r\n    min-height: 690px;\r\n    max-height: 690px;\r\n    overflow: auto;\r\n}\r\n/* 设置滚动条的样式 */\r\n.chandler-ext-content_communication-wrap::-webkit-scrollbar {\r\n   width:8px;\r\n}\r\n/* 滚动槽 */\r\n.chandler-ext-content_communication-wrap::-webkit-scrollbar-track {\r\n   -webkit-box-shadow:rgba(254,254,254,1);\r\n   border-radius:10px;\r\n}\r\n/* 滚动条滑块 */\r\n.chandler-ext-content_communication-wrap::-webkit-scrollbar-thumb {\r\n   border-radius:3px;\r\n   background-color: rgba(40,40,40,0.6);\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
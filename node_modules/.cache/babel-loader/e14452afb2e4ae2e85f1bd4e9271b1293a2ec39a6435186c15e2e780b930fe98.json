{"ast":null,"code":"var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\nvar GainAnalysis = require('./GainAnalysis.js');\nfunction ReplayGain() {\n  this.linprebuf = new_float(GainAnalysis.MAX_ORDER * 2);\n  /**\n   * left input samples, with pre-buffer\n   */\n  this.linpre = 0;\n  this.lstepbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n  /**\n   * left \"first step\" (i.e. post first filter) samples\n   */\n  this.lstep = 0;\n  this.loutbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n  /**\n   * left \"out\" (i.e. post second filter) samples\n   */\n  this.lout = 0;\n  this.rinprebuf = new_float(GainAnalysis.MAX_ORDER * 2);\n  /**\n   * right input samples ...\n   */\n  this.rinpre = 0;\n  this.rstepbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n  this.rstep = 0;\n  this.routbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n  this.rout = 0;\n  /**\n   * number of samples required to reach number of milliseconds required\n   * for RMS window\n   */\n  this.sampleWindow = 0;\n  this.totsamp = 0;\n  this.lsum = 0.;\n  this.rsum = 0.;\n  this.freqindex = 0;\n  this.first = 0;\n  this.A = new_int(0 | GainAnalysis.STEPS_per_dB * GainAnalysis.MAX_dB);\n  this.B = new_int(0 | GainAnalysis.STEPS_per_dB * GainAnalysis.MAX_dB);\n}\nmodule.exports = ReplayGain;","map":{"version":3,"names":["common","require","System","VbrMode","Float","ShortBlock","Util","Arrays","new_array_n","new_byte","new_double","new_float","new_float_n","new_int","new_int_n","assert","GainAnalysis","ReplayGain","linprebuf","MAX_ORDER","linpre","lstepbuf","MAX_SAMPLES_PER_WINDOW","lstep","loutbuf","lout","rinprebuf","rinpre","rstepbuf","rstep","routbuf","rout","sampleWindow","totsamp","lsum","rsum","freqindex","first","A","STEPS_per_dB","MAX_dB","B","module","exports"],"sources":["D:/代码/vscodeProjects/AiEducation/vue_aieducation/node_modules/lamejs/src/js/ReplayGain.js"],"sourcesContent":["var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar GainAnalysis = require('./GainAnalysis.js');\n\nfunction ReplayGain() {\n    this.linprebuf = new_float(GainAnalysis.MAX_ORDER * 2);\n    /**\n     * left input samples, with pre-buffer\n     */\n    this.linpre = 0;\n    this.lstepbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n    /**\n     * left \"first step\" (i.e. post first filter) samples\n     */\n    this.lstep = 0;\n    this.loutbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n    /**\n     * left \"out\" (i.e. post second filter) samples\n     */\n    this.lout = 0;\n    this.rinprebuf = new_float(GainAnalysis.MAX_ORDER * 2);\n    /**\n     * right input samples ...\n     */\n    this.rinpre = 0;\n    this.rstepbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n    this.rstep = 0;\n    this.routbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n    this.rout = 0;\n    /**\n     * number of samples required to reach number of milliseconds required\n     * for RMS window\n     */\n    this.sampleWindow = 0;\n    this.totsamp = 0;\n    this.lsum = 0.;\n    this.rsum = 0.;\n    this.freqindex = 0;\n    this.first = 0;\n    this.A = new_int(0 | (GainAnalysis.STEPS_per_dB * GainAnalysis.MAX_dB));\n    this.B = new_int(0 | (GainAnalysis.STEPS_per_dB * GainAnalysis.MAX_dB));\n\n}\n\nmodule.exports = ReplayGain;\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;AACnC,IAAIC,MAAM,GAAGF,MAAM,CAACE,MAAM;AAC1B,IAAIC,OAAO,GAAGH,MAAM,CAACG,OAAO;AAC5B,IAAIC,KAAK,GAAGJ,MAAM,CAACI,KAAK;AACxB,IAAIC,UAAU,GAAGL,MAAM,CAACK,UAAU;AAClC,IAAIC,IAAI,GAAGN,MAAM,CAACM,IAAI;AACtB,IAAIC,MAAM,GAAGP,MAAM,CAACO,MAAM;AAC1B,IAAIC,WAAW,GAAGR,MAAM,CAACQ,WAAW;AACpC,IAAIC,QAAQ,GAAGT,MAAM,CAACS,QAAQ;AAC9B,IAAIC,UAAU,GAAGV,MAAM,CAACU,UAAU;AAClC,IAAIC,SAAS,GAAGX,MAAM,CAACW,SAAS;AAChC,IAAIC,WAAW,GAAGZ,MAAM,CAACY,WAAW;AACpC,IAAIC,OAAO,GAAGb,MAAM,CAACa,OAAO;AAC5B,IAAIC,SAAS,GAAGd,MAAM,CAACc,SAAS;AAChC,IAAIC,MAAM,GAAGf,MAAM,CAACe,MAAM;AAE1B,IAAIC,YAAY,GAAGf,OAAO,CAAC,mBAAmB,CAAC;AAE/C,SAASgB,UAAUA,CAAA,EAAG;EAClB,IAAI,CAACC,SAAS,GAAGP,SAAS,CAACK,YAAY,CAACG,SAAS,GAAG,CAAC,CAAC;EACtD;AACJ;AACA;EACI,IAAI,CAACC,MAAM,GAAG,CAAC;EACf,IAAI,CAACC,QAAQ,GAAGV,SAAS,CAACK,YAAY,CAACM,sBAAsB,GAAGN,YAAY,CAACG,SAAS,CAAC;EACvF;AACJ;AACA;EACI,IAAI,CAACI,KAAK,GAAG,CAAC;EACd,IAAI,CAACC,OAAO,GAAGb,SAAS,CAACK,YAAY,CAACM,sBAAsB,GAAGN,YAAY,CAACG,SAAS,CAAC;EACtF;AACJ;AACA;EACI,IAAI,CAACM,IAAI,GAAG,CAAC;EACb,IAAI,CAACC,SAAS,GAAGf,SAAS,CAACK,YAAY,CAACG,SAAS,GAAG,CAAC,CAAC;EACtD;AACJ;AACA;EACI,IAAI,CAACQ,MAAM,GAAG,CAAC;EACf,IAAI,CAACC,QAAQ,GAAGjB,SAAS,CAACK,YAAY,CAACM,sBAAsB,GAAGN,YAAY,CAACG,SAAS,CAAC;EACvF,IAAI,CAACU,KAAK,GAAG,CAAC;EACd,IAAI,CAACC,OAAO,GAAGnB,SAAS,CAACK,YAAY,CAACM,sBAAsB,GAAGN,YAAY,CAACG,SAAS,CAAC;EACtF,IAAI,CAACY,IAAI,GAAG,CAAC;EACb;AACJ;AACA;AACA;EACI,IAAI,CAACC,YAAY,GAAG,CAAC;EACrB,IAAI,CAACC,OAAO,GAAG,CAAC;EAChB,IAAI,CAACC,IAAI,GAAG,EAAE;EACd,IAAI,CAACC,IAAI,GAAG,EAAE;EACd,IAAI,CAACC,SAAS,GAAG,CAAC;EAClB,IAAI,CAACC,KAAK,GAAG,CAAC;EACd,IAAI,CAACC,CAAC,GAAGzB,OAAO,CAAC,CAAC,GAAIG,YAAY,CAACuB,YAAY,GAAGvB,YAAY,CAACwB,MAAO,CAAC;EACvE,IAAI,CAACC,CAAC,GAAG5B,OAAO,CAAC,CAAC,GAAIG,YAAY,CAACuB,YAAY,GAAGvB,YAAY,CAACwB,MAAO,CAAC;AAE3E;AAEAE,MAAM,CAACC,OAAO,GAAG1B,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}